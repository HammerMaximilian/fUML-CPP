[comment encoding = UTF-8 /]
[module generateModelClassHeaderFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fuml::generator::globalconstants::globalconstants /]
[import fuml::generator::naming::naming /]
[import fuml::generator::syntax::syntax /]

[template public generateModelClassHeaderFile(aPackage : Package)]
[file (sourceDirectoryPath() + aPackage.getNameSanitized() + 'Model.h', false, 'UTF-8')]
/*
 * [aPackage.getNameSanitized() + 'Model.h'/]
 * 
 * Auto-generated file
 */

#ifndef [aPackage.getNameSanitized().toUpperCase() + '_MODEL_H'/]
#define [aPackage.getNameSanitized().toUpperCase() + '_MODEL_H'/]

#include <fuml/syntax/fwd.h>
#include <utils/environment/InMemoryModel.h>

/* [protected (': User-defined includes and forward declarations')]
 * This section may be used for includes and forward declarations.
 * It will not be overwritten by future generation processes.
 */

/*
 * [/protected]
 */

namespace [aPackage.getNameSanitized()/]
{
	class [aPackage.getNameSanitized() + 'Model'/] : public fuml::environment::InMemoryModel
	{
		public:
		[aPackage.generatePublicMemberDeclarations()/]

		public:
			virtual ~[aPackage.getNameSanitized() + 'Model'/]();
			static const std::shared_ptr<[aPackage.getNameSanitized() + 'Model'/]>& Instance();

		private:
			[aPackage.getNameSanitized() + 'Model'/]();
			void initializeInMemoryModel();

		/* [protected (': User-defined members')]
		 * This section may be used for user-defined members.
		 * It will not be overwritten by future generation processes.
		 */

		/*
 		 * [/protected]
		 */
	};
}

#endif /* [aPackage.getNameSanitized().toUpperCase() + '_MODEL_H'/] */
[/file]
[/template]

[template private generatePublicMemberDeclarations(aPackage : Package) post(trim())]
/*
 * [aPackage.eClass().name + ' ' + aPackage.getName()/]
 */
PackagePtr [aPackage.getFullNameSanitized()/] = nullptr;
[comment Check if metaclass of anElement is supported by fUML syntax /]
[for (packagedElement : Element | aPackage.packagedElement->select(pE : PackageableElement | supportedUMLMetaclasses()->includes(pE.eClass().name)))]
	[packagedElement.generatePublicMemberDeclarations()/]
[/for]
[/template]

[template private generatePublicMemberDeclarations(anElement : Element) post(trim())]
[if (anElement.oclIsKindOf(Package))]
[anElement.oclAsType(Package).generatePublicMemberDeclarations()/]
[else]
[anElement.eClass().name.adjustMetaclassName()/]Ptr [anElement.getFullNameSanitized()/] = nullptr;
	[for (ownedElement : Element | anElement.ownedElement->select(e : Element | supportedUMLMetaclasses()->includes(e.eClass().name)))]
	[ownedElement.generatePublicMemberDeclarations()/]
	[/for]
[/if]
[/template]
