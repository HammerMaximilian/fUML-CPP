[comment encoding = UTF-8 /]
[module syntax('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public generateMetaclassInclude(anElement : Element)]
[let metaclassName : String = anElement.eClass().name]
[if (supportedUMLMetaclasses()->includes(metaclassName))]
#include <fuml/syntax/[if(supportedActionsMetaclasses()->includes(metaclassName))]actions[elseif(supportedActivitiesMetaclasses()->includes(metaclassName))]activities[elseif(supportedClassificationMetaclasses()->includes(metaclassName))]classification[elseif(supportedCommonBehaviorMetaclasses()->includes(metaclassName))]commonbehavior[elseif(supportedCommonStructureMetaclasses()->includes(metaclassName))]commonstructure[elseif(supportedPackagesMetaclasses()->includes(metaclassName))]packages[elseif(supportedSimpleClassifiersMetaclasses()->includes(metaclassName))]simpleclassifiers[elseif(supportedStructuredClassifiersMetaclasses()->includes(metaclassName))]structuredclassifiers[elseif(supportedValuesMetaclasses()->includes(metaclassName))]values[/if]/[metaclassName.adjustMetaclassName()/].h>
[else]
//Cannot add #include for unsupported metaclass [metaclassName/]
[/if]
[/let]
[/template]

[query public supportedUMLMetaclasses(Any : OclAny) : Set(String) = Set(String)
	{
		supportedActionsMetaclasses(),
		supportedActivitiesMetaclasses(),
		supportedClassificationMetaclasses(),
		supportedCommonBehaviorMetaclasses(),
		supportedCommonStructureMetaclasses(),
		supportedPackagesMetaclasses(),
		supportedSimpleClassifiersMetaclasses(),
		supportedStructuredClassifiersMetaclasses(),
		supportedValuesMetaclasses()
	}->flatten()
 /]

[query private supportedActionsMetaclasses(Any : OclAny) : Set(String) = Set(String)
	{
		'AcceptCallAction',
		'AcceptEventAction',
		'AddStructuralFeatureValueAction',
		'CallBehaviorAction',
		'CallOperationAction',
		'Clause',
		'ClearAssociationAction',
		'ClearStructuralFeatureAction',
		'CreateLinkAction',
		'CreateObjectAction',
		'DestroyLinkAction',
		'DestroyObjectAction',
		'ExpansionNode',
		'ExpansionRegion',
		'InputPin',
		'LinkEndCreationData',
		'LinkEndData',
		'LinkEndDestructionData',
		'LoopNode',
		'OutputPin',
		'RaiseExceptionAction',
		'ReadExtentAction',
		'ReadIsClassifiedObjectAction',
		'ReadLinkAction',
		'ReadSelfAction',
		'ReadStructuralFeatureAction',
		'ReclassifyObjectAction',
		'ReduceAction',
		'RemoveStructuralFeatureValueAction',
		'ReplyAction',
		'SendSignalAction',
		'StartClassifierBehaviorAction',
		'StartObjectBehaviorAction',
		'StructuredActivityNode',
		'TestIdentityAction',
		'UnmarshallAction',
		'ValueSpecificationAction'
	}
 /]

[query private supportedActivitiesMetaclasses(Any : OclAny) : Set(String) = Set(String)
	{
		'Activity',
		'ActivityFinalNode',
		'ActivityParameterNode',
		'CentralBufferNode',
		'ConditionalNode',
		'ControlFlow',
		'DataStoreNode',
		'DecisionNode',
		'ExceptionHandler',
		'FinalNode',
		'FlowFinalNode',
		'ForkNode',
		'InitialNode',
		'JoinNode',
		'MergeNode',
		'ObjectFlow'
	}
 /]

[query private supportedClassificationMetaclasses(Any : OclAny) : Set(String) = Set(String)
	{
		'Generalization',
		'InstanceSpecification',
		'InstanceValue',
		'Operation',
		'Parameter',
		'Property',
		'Slot'
	}
 /]

[query private supportedCommonBehaviorMetaclasses(Any : OclAny) : Set(String) = Set(String)
	{
		'CallEvent',
		'Event',
		'FunctionBehavior',
		'MessageEvent',
		'OpaqueBehavior',
		'SignalEvent',
		'Trigger'
	}
 /]

[query private supportedCommonStructureMetaclasses(Any : OclAny) : Set(String) = Set(String)
	{
		'Comment',
		'ElementImport',
		'PackageImport'
	}
 /]

[query private supportedPackagesMetaclasses(Any : OclAny) : Set(String) = Set(String)
	{
		'Package'
	}
 /]

[query private supportedSimpleClassifiersMetaclasses(Any : OclAny) : Set(String) = Set(String)
	{
		'DataType',
		'Enumeration',
		'EnumerationLiteral',
		'PrimitiveType',
		'Reception',
		'Signal'
	}
 /]

[query private supportedStructuredClassifiersMetaclasses(Any : OclAny) : Set(String) = Set(String)
	{
		'Association',
		'Class'
	}
 /]

[query private supportedValuesMetaclasses(Any : OclAny) : Set(String) = Set(String)
	{
		'LiteralBoolean',
		'LiteralInteger',
		'LiteralNull',
		'LiteralReal',
		'LiteralSpecification',
		'LiteralString',
		'LiteralUnlimitedNatural',
		'ValueSpecification'
	}
 /]

[query public adjustMetaclassName(originalMetaclassName : String) : String =
	if(originalMetaclassName = 'Model')
		then 'Package'
	else 
		if(originalMetaclassName = 'Class')
			then 'Class_'
		else 
			if(originalMetaclassName = 'FunctionBehavior')
				then 'OpaqueBehavior'
			else
				originalMetaclassName
			endif
		endif
	endif
/]

