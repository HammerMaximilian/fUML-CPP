[comment encoding = UTF-8 /]
[module generateEnvironmentClassSourceFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fuml::generator::naming::naming /]

[template public generateEnvironmentClassSourceFile(aPackage : Package)]
[file (aPackage.getName() + 'Environment.cpp', false, 'UTF-8')]
/*
 * [aPackage.getName() + 'Environment.cpp'/]
 * 
 * Auto-generated file
 */

#include "[aPackage.getName() + 'Environment.h'/]"

#include "[aPackage.getName() + 'Model.h'/]"
[for (anOpaqueBehavior : OpaqueBehavior | aPackage.allOwnedElements()->filter(OpaqueBehavior))]
#include "[anOpaqueBehavior.getName() + 'Execution.h'/]"
[/for]

/* [protected (': User-defined includes and using directives')]
 * This section may be used for includes and using directives.
 * It will not be overwritten by future generation processes.
 */

/*
 * [/protected]
 */

using namespace [aPackage.getName()/];

/* [protected (': User-defined members')]
 * This section may be used for user-defined members,
 * for exmaple implementations of user-defined member functions
 * or definition of static members.
 * It will not be overwritten by future generation processes.
 */

/*
 * [/protected]
 */

[aPackage.getName() + 'Environment'/]::[aPackage.getName() + 'Environment'/]()
{
	/*
	 * Create custom opaque behavior execution instances and add them to the execution environment.
	 */
	[for (anOpaqueBehavior : OpaqueBehavior | aPackage.allOwnedElements()->filter(OpaqueBehavior))]
	std::shared_ptr<[anOpaqueBehavior.getName() + 'Execution'/]> _[anOpaqueBehavior.getName() + 'Execution'/](new [anOpaqueBehavior.getName() + 'Execution'/]());
	_[anOpaqueBehavior.getName() + 'Execution'/]->setThisObject_Ptr(_[anOpaqueBehavior.getName() + 'Execution'/]);
	this->addPrimitiveBehaviorPrototype(_[anOpaqueBehavior.getName() + 'Execution'/]);
	[/for]

	/* [protected (': Additional environment initializations')]
 	 * This section may be used to do any additional environment initialization,
	 * for example initializing user-defined members.
 	 * It will not be overwritten by future generation processes.
 	 */

	/*
 	 * [/protected]
 	 */
}

[aPackage.getName() + 'Environment'/]::~[aPackage.getName() + 'Environment'/]()
{
	/* [protected (': Additional environment cleanup')]
 	 * This section may be used to do any additional environment cleanup,
	 * for example freeing memory for user-defined members.
 	 * It will not be overwritten by future generation processes.
 	 */

	/*
 	 * [/protected]
 	 */
}

const std::shared_ptr<[aPackage.getName() + 'Environment'/]>& [aPackage.getName() + 'Environment'/]::Instance()
{
	static std::shared_ptr<[aPackage.getName() + 'Environment'/]> instance = nullptr;

	if(!instance)
	{
		instance.reset(new [aPackage.getName() + 'Environment'/]());
		instance->inMemoryModel = [aPackage.getName() + 'Model'/]::Instance();
	}

	return instance;
}

void [aPackage.getName() + 'Environment'/]::execute(std::string behaviorName)
{
	/* [protected (': Context and inputs initializations')]
 	 * This section may be used to initialize the execution context 
	 * as well as input parameter values if required.
 	 * It will not be overwritten by future generation processes.
 	 */

	//this->context = ...;
	//this->inputs = ...;

	/*
 	 * [/protected]
 	 */

	/*
	 * Start execution via base class call
	 */
	fuml::environment::Environment::execute(behaviorName);

	/* [protected (': Onputs evaluation')]
 	 * This section may be used to evaluate output parameter values if required.
 	 * It will not be overwritten by future generation processes.
 	 */

	//ParameterValueListPtr theOutputs = this->outputs;
	//...

	/*
 	 * [/protected]
 	 */
}
[/file]
[/template]
