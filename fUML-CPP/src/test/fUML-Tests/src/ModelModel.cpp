/*
 * ModelModel.cpp
 * 
 * Auto-generated file
 */

#include "ModelModel.h"

#include <fuml/syntax/activities/Activity.h>
#include <fuml/syntax/actions/ValueSpecificationAction.h>
#include <fuml/syntax/actions/CallBehaviorAction.h>
#include <fuml/syntax/actions/TestIdentityAction.h>
#include <fuml/syntax/activities/InitialNode.h>
#include <fuml/syntax/activities/MergeNode.h>
#include <fuml/syntax/activities/ActivityParameterNode.h>
#include <fuml/syntax/values/LiteralReal.h>
#include <fuml/syntax/commonbehavior/CallEvent.h>
#include <fuml/syntax/structuredclassifiers/Association.h>
#include <fuml/syntax/actions/RemoveStructuralFeatureValueAction.h>
#include <fuml/syntax/actions/StartObjectBehaviorAction.h>
#include <fuml/syntax/activities/CentralBufferNode.h>
#include <utils/library/LibraryModel.h>
#include <fuml/syntax/actions/AddStructuralFeatureValueAction.h>
#include <fuml/syntax/actions/StructuredActivityNode.h>
#include <fuml/syntax/values/LiteralBoolean.h>
#include <fuml/syntax/actions/CallOperationAction.h>
#include <fuml/syntax/values/LiteralInteger.h>
#include <fuml/syntax/actions/ReadExtentAction.h>
#include <fuml/syntax/classification/Generalization.h>
#include <fuml/syntax/commonbehavior/Trigger.h>
#include <fuml/syntax/actions/InputPin.h>
#include <fuml/syntax/activities/JoinNode.h>
#include <fuml/syntax/actions/ReclassifyObjectAction.h>
#include <fuml/syntax/activities/DecisionNode.h>
#include <fuml/syntax/activities/ObjectFlow.h>
#include <fuml/syntax/commonstructure/PackageImport.h>
#include <utils/primitivetypes/PrimitiveTypesModel.h>
#include <fuml/syntax/structuredclassifiers/Class_.h>
#include <fuml/syntax/actions/ReadStructuralFeatureAction.h>
#include <fuml/syntax/activities/DataStoreNode.h>
#include <fuml/syntax/actions/SendSignalAction.h>
#include <fuml/syntax/actions/ReplyAction.h>
#include <fuml/syntax/simpleclassifiers/Signal.h>
#include <fuml/syntax/actions/CreateObjectAction.h>
#include <fuml/syntax/activities/ActivityFinalNode.h>
#include <fuml/syntax/actions/AcceptCallAction.h>
#include <fuml/syntax/actions/UnmarshallAction.h>
#include <fuml/syntax/simpleclassifiers/PrimitiveType.h>
#include <fuml/syntax/commonbehavior/SignalEvent.h>
#include <fuml/syntax/values/LiteralUnlimitedNatural.h>
#include <fuml/syntax/actions/AcceptEventAction.h>
#include <fuml/syntax/actions/ReadLinkAction.h>
#include <fuml/syntax/actions/LinkEndData.h>
#include <fuml/syntax/activities/ControlFlow.h>
#include <fuml/syntax/actions/ReadIsClassifiedObjectAction.h>
#include <fuml/syntax/activities/ForkNode.h>
#include <fuml/syntax/classification/Property.h>
#include <fuml/syntax/actions/ReadSelfAction.h>
#include <fuml/syntax/classification/Parameter.h>
#include <fuml/syntax/actions/OutputPin.h>
#include <fuml/syntax/actions/DestroyObjectAction.h>
#include <fuml/syntax/values/LiteralString.h>
#include <fuml/syntax/classification/Operation.h>
#include <fuml/syntax/packages/Package.h>


/*
 *	TODO: Generate includes for metaclasses
 */

/* Start of user code : User-defined includes and using directives
 * This section may be used for includes and using directives.
 * It will not be overwritten by future generation processes.
 */

/*
 * End of user code
 */

using namespace Model;
using namespace fuml::primitivetypes;

/* Start of user code : User-defined members
 * This section may be used for user-defined members,
 * for exmaple implementations of user-defined member functions
 * or definition of static members.
 * It will not be overwritten by future generation processes.
 */

/*
 * End of user code
 */

ModelModel::ModelModel()
{
	/* Start of user code : Additional model initializations
 	 * This section may be used to do any additional model initialization,
	 * for example initializing user-defined members.
 	 * It will not be overwritten by future generation processes.
 	 */

	/*
 	 * End of user code
 	 */
}

ModelModel::~ModelModel()
{
	/* Start of user code : Additional model cleanup
 	 * This section may be used to do any additional model cleanup,
	 * for example freeing memory for user-defined members.
 	 * It will not be overwritten by future generation processes.
 	 */

	/*
 	 * End of user code
 	 */
}

const std::shared_ptr<ModelModel>& ModelModel::Instance()
{
	static std::shared_ptr<ModelModel> instance = nullptr;

	if(!instance)
	{
		instance.reset(new ModelModel());
		instance->initializeInMemoryModel();
	}

	return instance;
}

void ModelModel::initializeInMemoryModel()
{
	// Create public members
	/*
	 * Model Model
	 */
	Model.reset(new Package());
	this->addToElementRepository("Model", Model);
		Model_TestSpecializedSignalSend.reset(new Activity());
		this->addToElementRepository("TestSpecializedSignalSend", Model_TestSpecializedSignalSend);
			Model_TestSpecializedSignalSend_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSpecializedSignalSend_);
				Model_TestSpecializedSignalSend__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSpecializedSignalSend__);
			Model_TestSpecializedSignalSend_Start(TestSignalReceiver).reset(new StartObjectBehaviorAction());
			this->addToElementRepository("Start(TestSignalReceiver)", Model_TestSpecializedSignalSend_Start(TestSignalReceiver));
				Model_TestSpecializedSignalSend_Start(TestSignalReceiver)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestSpecializedSignalSend_Start(TestSignalReceiver)_object);
					Model_TestSpecializedSignalSend_Start(TestSignalReceiver)_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestSpecializedSignalSend_Start(TestSignalReceiver)_object_);
					Model_TestSpecializedSignalSend_Start(TestSignalReceiver)_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestSpecializedSignalSend_Start(TestSignalReceiver)_object_);
			Model_TestSpecializedSignalSend_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSpecializedSignalSend_);
				Model_TestSpecializedSignalSend__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSpecializedSignalSend__);
			Model_TestSpecializedSignalSend_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestSpecializedSignalSend_);
				Model_TestSpecializedSignalSend__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSpecializedSignalSend__);
			Model_TestSpecializedSignalSend_.reset(new ActivityFinalNode());
			this->addToElementRepository("", Model_TestSpecializedSignalSend_);
			Model_TestSpecializedSignalSend_Send(SpecializedSignal).reset(new SendSignalAction());
			this->addToElementRepository("Send(SpecializedSignal)", Model_TestSpecializedSignalSend_Send(SpecializedSignal));
				Model_TestSpecializedSignalSend_Send(SpecializedSignal)_target.reset(new InputPin());
				this->addToElementRepository("target", Model_TestSpecializedSignalSend_Send(SpecializedSignal)_target);
					Model_TestSpecializedSignalSend_Send(SpecializedSignal)_target_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestSpecializedSignalSend_Send(SpecializedSignal)_target_);
					Model_TestSpecializedSignalSend_Send(SpecializedSignal)_target_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestSpecializedSignalSend_Send(SpecializedSignal)_target_);
			Model_TestSpecializedSignalSend_Create(TestSignalReceiver).reset(new CreateObjectAction());
			this->addToElementRepository("Create(TestSignalReceiver)", Model_TestSpecializedSignalSend_Create(TestSignalReceiver));
				Model_TestSpecializedSignalSend_Create(TestSignalReceiver)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestSpecializedSignalSend_Create(TestSignalReceiver)_result);
					Model_TestSpecializedSignalSend_Create(TestSignalReceiver)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestSpecializedSignalSend_Create(TestSignalReceiver)_result_);
					Model_TestSpecializedSignalSend_Create(TestSignalReceiver)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestSpecializedSignalSend_Create(TestSignalReceiver)_result_);
			Model_TestSpecializedSignalSend_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSpecializedSignalSend_);
				Model_TestSpecializedSignalSend__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSpecializedSignalSend__);
			Model_TestSpecializedSignalSend_.reset(new InitialNode());
			this->addToElementRepository("", Model_TestSpecializedSignalSend_);
			Model_TestSpecializedSignalSend_.reset(new ForkNode());
			this->addToElementRepository("", Model_TestSpecializedSignalSend_);
			Model_TestSpecializedSignalSend_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestSpecializedSignalSend_);
				Model_TestSpecializedSignalSend__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSpecializedSignalSend__);
			Model_TestSpecializedSignalSend_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestSpecializedSignalSend_);
				Model_TestSpecializedSignalSend__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSpecializedSignalSend__);
		Model_TestNodeEnabler.reset(new Activity());
		this->addToElementRepository("TestNodeEnabler", Model_TestNodeEnabler);
			Model_TestNodeEnabler_Value(1).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(1)", Model_TestNodeEnabler_Value(1));
				Model_TestNodeEnabler_Value(1)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestNodeEnabler_Value(1)_);
				Model_TestNodeEnabler_Value(1)_Value(1).result.reset(new OutputPin());
				this->addToElementRepository("Value(1).result", Model_TestNodeEnabler_Value(1)_Value(1).result);
			Model_TestNodeEnabler_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestNodeEnabler_);
				Model_TestNodeEnabler__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestNodeEnabler__);
			Model_TestNodeEnabler_Call(NodeEnabler).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(NodeEnabler)", Model_TestNodeEnabler_Call(NodeEnabler));
				Model_TestNodeEnabler_Call(NodeEnabler)_Call(NodeEnabler).output.reset(new OutputPin());
				this->addToElementRepository("Call(NodeEnabler).output", Model_TestNodeEnabler_Call(NodeEnabler)_Call(NodeEnabler).output);
					Model_TestNodeEnabler_Call(NodeEnabler)_Call(NodeEnabler).output_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestNodeEnabler_Call(NodeEnabler)_Call(NodeEnabler).output_);
					Model_TestNodeEnabler_Call(NodeEnabler)_Call(NodeEnabler).output_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestNodeEnabler_Call(NodeEnabler)_Call(NodeEnabler).output_);
				Model_TestNodeEnabler_Call(NodeEnabler)_Call(NodeEnabler).input.reset(new InputPin());
				this->addToElementRepository("Call(NodeEnabler).input", Model_TestNodeEnabler_Call(NodeEnabler)_Call(NodeEnabler).input);
					Model_TestNodeEnabler_Call(NodeEnabler)_Call(NodeEnabler).input_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestNodeEnabler_Call(NodeEnabler)_Call(NodeEnabler).input_);
					Model_TestNodeEnabler_Call(NodeEnabler)_Call(NodeEnabler).input_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestNodeEnabler_Call(NodeEnabler)_Call(NodeEnabler).input_);
			Model_TestNodeEnabler_output.reset(new Parameter());
			this->addToElementRepository("output", Model_TestNodeEnabler_output);
				Model_TestNodeEnabler_output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestNodeEnabler_output_);
				Model_TestNodeEnabler_output_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestNodeEnabler_output_);
			Model_TestNodeEnabler_output.reset(new ActivityParameterNode());
			this->addToElementRepository("output", Model_TestNodeEnabler_output);
			Model_TestNodeEnabler_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestNodeEnabler_);
				Model_TestNodeEnabler__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestNodeEnabler__);
		Model_TestComposite.reset(new Class_());
		this->addToElementRepository("TestComposite", Model_TestComposite);
			Model_TestComposite_c1.reset(new Property());
			this->addToElementRepository("c1", Model_TestComposite_c1);
		Model_TestDataStore.reset(new Activity());
		this->addToElementRepository("TestDataStore", Model_TestDataStore);
			Model_TestDataStore_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
				Model_TestDataStore__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_Merge1.reset(new MergeNode());
			this->addToElementRepository("Merge1", Model_TestDataStore_Merge1);
			Model_TestDataStore_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_DecisionNode.reset(new DecisionNode());
			this->addToElementRepository("DecisionNode", Model_TestDataStore_DecisionNode);
			Model_TestDataStore_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_Merge3.reset(new MergeNode());
			this->addToElementRepository("Merge3", Model_TestDataStore_Merge3);
			Model_TestDataStore_Value(2).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(2)", Model_TestDataStore_Value(2));
				Model_TestDataStore_Value(2)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestDataStore_Value(2)_);
				Model_TestDataStore_Value(2)_Value(2).result.reset(new OutputPin());
				this->addToElementRepository("Value(2).result", Model_TestDataStore_Value(2)_Value(2).result);
			Model_TestDataStore_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_Value(1)-Init-2.reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(1)-Init-2", Model_TestDataStore_Value(1)-Init-2);
				Model_TestDataStore_Value(1)-Init-2_Value(1)-Init-2.result.reset(new OutputPin());
				this->addToElementRepository("Value(1)-Init-2.result", Model_TestDataStore_Value(1)-Init-2_Value(1)-Init-2.result);
				Model_TestDataStore_Value(1)-Init-2_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestDataStore_Value(1)-Init-2_);
			Model_TestDataStore_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_Parameter(output).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(output)", Model_TestDataStore_Parameter(output));
			Model_TestDataStore_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_Call(Copier)-2.reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Copier)-2", Model_TestDataStore_Call(Copier)-2);
				Model_TestDataStore_Call(Copier)-2_Call(Copier)-2.input.reset(new InputPin());
				this->addToElementRepository("Call(Copier)-2.input", Model_TestDataStore_Call(Copier)-2_Call(Copier)-2.input);
					Model_TestDataStore_Call(Copier)-2_Call(Copier)-2.input_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestDataStore_Call(Copier)-2_Call(Copier)-2.input_);
					Model_TestDataStore_Call(Copier)-2_Call(Copier)-2.input_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestDataStore_Call(Copier)-2_Call(Copier)-2.input_);
				Model_TestDataStore_Call(Copier)-2_Call(Copier)-2.output.reset(new OutputPin());
				this->addToElementRepository("Call(Copier)-2.output", Model_TestDataStore_Call(Copier)-2_Call(Copier)-2.output);
					Model_TestDataStore_Call(Copier)-2_Call(Copier)-2.output_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestDataStore_Call(Copier)-2_Call(Copier)-2.output_);
					Model_TestDataStore_Call(Copier)-2_Call(Copier)-2.output_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestDataStore_Call(Copier)-2_Call(Copier)-2.output_);
			Model_TestDataStore_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_Value(3).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(3)", Model_TestDataStore_Value(3));
				Model_TestDataStore_Value(3)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestDataStore_Value(3)_);
				Model_TestDataStore_Value(3)_Value(3).result.reset(new OutputPin());
				this->addToElementRepository("Value(3).result", Model_TestDataStore_Value(3)_Value(3).result);
			Model_TestDataStore_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_Value(1).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(1)", Model_TestDataStore_Value(1));
				Model_TestDataStore_Value(1)_Value(1).result.reset(new OutputPin());
				this->addToElementRepository("Value(1).result", Model_TestDataStore_Value(1)_Value(1).result);
				Model_TestDataStore_Value(1)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestDataStore_Value(1)_);
			Model_TestDataStore_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestDataStore__);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_decisionInputFlow.reset(new ObjectFlow());
			this->addToElementRepository("decisionInputFlow", Model_TestDataStore_decisionInputFlow);
				Model_TestDataStore_decisionInputFlow_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore_decisionInputFlow_);
			Model_TestDataStore_Call(Copier)-1.reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Copier)-1", Model_TestDataStore_Call(Copier)-1);
				Model_TestDataStore_Call(Copier)-1_Call(Copier)-1.input.reset(new InputPin());
				this->addToElementRepository("Call(Copier)-1.input", Model_TestDataStore_Call(Copier)-1_Call(Copier)-1.input);
					Model_TestDataStore_Call(Copier)-1_Call(Copier)-1.input_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestDataStore_Call(Copier)-1_Call(Copier)-1.input_);
					Model_TestDataStore_Call(Copier)-1_Call(Copier)-1.input_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestDataStore_Call(Copier)-1_Call(Copier)-1.input_);
				Model_TestDataStore_Call(Copier)-1_Call(Copier)-1.output.reset(new OutputPin());
				this->addToElementRepository("Call(Copier)-1.output", Model_TestDataStore_Call(Copier)-1_Call(Copier)-1.output);
					Model_TestDataStore_Call(Copier)-1_Call(Copier)-1.output_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestDataStore_Call(Copier)-1_Call(Copier)-1.output_);
					Model_TestDataStore_Call(Copier)-1_Call(Copier)-1.output_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestDataStore_Call(Copier)-1_Call(Copier)-1.output_);
			Model_TestDataStore_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_DataStoreNode.reset(new DataStoreNode());
			this->addToElementRepository("DataStoreNode", Model_TestDataStore_DataStoreNode);
			Model_TestDataStore_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestDataStore_);
				Model_TestDataStore__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore__);
				Model_TestDataStore__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestDataStore__);
			Model_TestDataStore_Value(2)-Init-3.reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(2)-Init-3", Model_TestDataStore_Value(2)-Init-3);
				Model_TestDataStore_Value(2)-Init-3_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestDataStore_Value(2)-Init-3_);
				Model_TestDataStore_Value(2)-Init-3_Value(2)-Init-1.result.reset(new OutputPin());
				this->addToElementRepository("Value(2)-Init-1.result", Model_TestDataStore_Value(2)-Init-3_Value(2)-Init-1.result);
			Model_TestDataStore_Merge2.reset(new MergeNode());
			this->addToElementRepository("Merge2", Model_TestDataStore_Merge2);
			Model_TestDataStore_.reset(new InitialNode());
			this->addToElementRepository("", Model_TestDataStore_);
			Model_TestDataStore_Value(1)-Init-1.reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(1)-Init-1", Model_TestDataStore_Value(1)-Init-1);
				Model_TestDataStore_Value(1)-Init-1_Value(1)-Init-1.result.reset(new OutputPin());
				this->addToElementRepository("Value(1)-Init-1.result", Model_TestDataStore_Value(1)-Init-1_Value(1)-Init-1.result);
				Model_TestDataStore_Value(1)-Init-1_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestDataStore_Value(1)-Init-1_);
			Model_TestDataStore_FinalNode.reset(new ActivityFinalNode());
			this->addToElementRepository("FinalNode", Model_TestDataStore_FinalNode);
			Model_TestDataStore_output.reset(new Parameter());
			this->addToElementRepository("output", Model_TestDataStore_output);
				Model_TestDataStore_output_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestDataStore_output_);
				Model_TestDataStore_output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestDataStore_output_);
		Model_.reset(new CallEvent());
		this->addToElementRepository("", Model_);
		Model_TestClassUnmarshaller.reset(new Activity());
		this->addToElementRepository("TestClassUnmarshaller", Model_TestClassUnmarshaller);
			Model_TestClassUnmarshaller_Output(x).reset(new ActivityParameterNode());
			this->addToElementRepository("Output(x)", Model_TestClassUnmarshaller_Output(x));
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
			Model_TestClassUnmarshaller_Output(y).reset(new ActivityParameterNode());
			this->addToElementRepository("Output(y)", Model_TestClassUnmarshaller_Output(y));
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
			Model_TestClassUnmarshaller_Value(0).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(0)", Model_TestClassUnmarshaller_Value(0));
				Model_TestClassUnmarshaller_Value(0)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassUnmarshaller_Value(0)_result);
					Model_TestClassUnmarshaller_Value(0)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Value(0)_result_);
					Model_TestClassUnmarshaller_Value(0)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Value(0)_result_);
				Model_TestClassUnmarshaller_Value(0)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassUnmarshaller_Value(0)_);
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
			Model_TestClassUnmarshaller_.reset(new ForkNode());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
			Model_TestClassUnmarshaller_Write(a).reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Write(a)", Model_TestClassUnmarshaller_Write(a));
				Model_TestClassUnmarshaller_Write(a)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassUnmarshaller_Write(a)_object);
					Model_TestClassUnmarshaller_Write(a)_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(a)_object_);
					Model_TestClassUnmarshaller_Write(a)_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(a)_object_);
				Model_TestClassUnmarshaller_Write(a)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassUnmarshaller_Write(a)_result);
				Model_TestClassUnmarshaller_Write(a)_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestClassUnmarshaller_Write(a)_value);
					Model_TestClassUnmarshaller_Write(a)_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(a)_value_);
					Model_TestClassUnmarshaller_Write(a)_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(a)_value_);
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
			Model_TestClassUnmarshaller_y.reset(new Parameter());
			this->addToElementRepository("y", Model_TestClassUnmarshaller_y);
				Model_TestClassUnmarshaller_y_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassUnmarshaller_y_);
				Model_TestClassUnmarshaller_y_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller_y_);
			Model_TestClassUnmarshaller_Value(1).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(1)", Model_TestClassUnmarshaller_Value(1));
				Model_TestClassUnmarshaller_Value(1)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassUnmarshaller_Value(1)_result);
					Model_TestClassUnmarshaller_Value(1)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Value(1)_result_);
					Model_TestClassUnmarshaller_Value(1)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Value(1)_result_);
				Model_TestClassUnmarshaller_Value(1)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassUnmarshaller_Value(1)_);
			Model_TestClassUnmarshaller_Unmarshall(TestClass).reset(new UnmarshallAction());
			this->addToElementRepository("Unmarshall(TestClass)", Model_TestClassUnmarshaller_Unmarshall(TestClass));
				Model_TestClassUnmarshaller_Unmarshall(TestClass)_result(y).reset(new OutputPin());
				this->addToElementRepository("result(y)", Model_TestClassUnmarshaller_Unmarshall(TestClass)_result(y));
					Model_TestClassUnmarshaller_Unmarshall(TestClass)_result(y)_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Unmarshall(TestClass)_result(y)_);
					Model_TestClassUnmarshaller_Unmarshall(TestClass)_result(y)_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Unmarshall(TestClass)_result(y)_);
				Model_TestClassUnmarshaller_Unmarshall(TestClass)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassUnmarshaller_Unmarshall(TestClass)_object);
					Model_TestClassUnmarshaller_Unmarshall(TestClass)_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Unmarshall(TestClass)_object_);
					Model_TestClassUnmarshaller_Unmarshall(TestClass)_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Unmarshall(TestClass)_object_);
				Model_TestClassUnmarshaller_Unmarshall(TestClass)_result(x).reset(new OutputPin());
				this->addToElementRepository("result(x)", Model_TestClassUnmarshaller_Unmarshall(TestClass)_result(x));
					Model_TestClassUnmarshaller_Unmarshall(TestClass)_result(x)_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Unmarshall(TestClass)_result(x)_);
					Model_TestClassUnmarshaller_Unmarshall(TestClass)_result(x)_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Unmarshall(TestClass)_result(x)_);
			Model_TestClassUnmarshaller_Value(true).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(true)", Model_TestClassUnmarshaller_Value(true));
				Model_TestClassUnmarshaller_Value(true)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassUnmarshaller_Value(true)_result);
					Model_TestClassUnmarshaller_Value(true)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Value(true)_result_);
					Model_TestClassUnmarshaller_Value(true)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Value(true)_result_);
				Model_TestClassUnmarshaller_Value(true)_.reset(new LiteralBoolean());
				this->addToElementRepository("", Model_TestClassUnmarshaller_Value(true)_);
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
			Model_TestClassUnmarshaller_x.reset(new Parameter());
			this->addToElementRepository("x", Model_TestClassUnmarshaller_x);
				Model_TestClassUnmarshaller_x_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassUnmarshaller_x_);
				Model_TestClassUnmarshaller_x_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller_x_);
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
			Model_TestClassUnmarshaller_Value(2).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(2)", Model_TestClassUnmarshaller_Value(2));
				Model_TestClassUnmarshaller_Value(2)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassUnmarshaller_Value(2)_);
				Model_TestClassUnmarshaller_Value(2)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassUnmarshaller_Value(2)_result);
					Model_TestClassUnmarshaller_Value(2)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Value(2)_result_);
					Model_TestClassUnmarshaller_Value(2)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Value(2)_result_);
			Model_TestClassUnmarshaller_Value(*).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(*)", Model_TestClassUnmarshaller_Value(*));
				Model_TestClassUnmarshaller_Value(*)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassUnmarshaller_Value(*)_result);
				Model_TestClassUnmarshaller_Value(*)_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller_Value(*)_);
			Model_TestClassUnmarshaller_Write(y[1]).reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Write(y[1])", Model_TestClassUnmarshaller_Write(y[1]));
				Model_TestClassUnmarshaller_Write(y[1])_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassUnmarshaller_Write(y[1])_result);
					Model_TestClassUnmarshaller_Write(y[1])_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(y[1])_result_);
					Model_TestClassUnmarshaller_Write(y[1])_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(y[1])_result_);
				Model_TestClassUnmarshaller_Write(y[1])_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestClassUnmarshaller_Write(y[1])_value);
					Model_TestClassUnmarshaller_Write(y[1])_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(y[1])_value_);
					Model_TestClassUnmarshaller_Write(y[1])_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(y[1])_value_);
				Model_TestClassUnmarshaller_Write(y[1])_insertAt.reset(new InputPin());
				this->addToElementRepository("insertAt", Model_TestClassUnmarshaller_Write(y[1])_insertAt);
				Model_TestClassUnmarshaller_Write(y[1])_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassUnmarshaller_Write(y[1])_object);
					Model_TestClassUnmarshaller_Write(y[1])_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(y[1])_object_);
					Model_TestClassUnmarshaller_Write(y[1])_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(y[1])_object_);
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
			Model_TestClassUnmarshaller_Create(Subclass1).reset(new CreateObjectAction());
			this->addToElementRepository("Create(Subclass1)", Model_TestClassUnmarshaller_Create(Subclass1));
				Model_TestClassUnmarshaller_Create(Subclass1)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassUnmarshaller_Create(Subclass1)_result);
					Model_TestClassUnmarshaller_Create(Subclass1)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Create(Subclass1)_result_);
					Model_TestClassUnmarshaller_Create(Subclass1)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Create(Subclass1)_result_);
			Model_TestClassUnmarshaller_Write(y[2]).reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Write(y[2])", Model_TestClassUnmarshaller_Write(y[2]));
				Model_TestClassUnmarshaller_Write(y[2])_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassUnmarshaller_Write(y[2])_object);
					Model_TestClassUnmarshaller_Write(y[2])_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(y[2])_object_);
					Model_TestClassUnmarshaller_Write(y[2])_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(y[2])_object_);
				Model_TestClassUnmarshaller_Write(y[2])_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassUnmarshaller_Write(y[2])_result);
				Model_TestClassUnmarshaller_Write(y[2])_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestClassUnmarshaller_Write(y[2])_value);
					Model_TestClassUnmarshaller_Write(y[2])_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(y[2])_value_);
					Model_TestClassUnmarshaller_Write(y[2])_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(y[2])_value_);
				Model_TestClassUnmarshaller_Write(y[2])_insertAt.reset(new InputPin());
				this->addToElementRepository("insertAt", Model_TestClassUnmarshaller_Write(y[2])_insertAt);
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
			Model_TestClassUnmarshaller_Write(x).reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Write(x)", Model_TestClassUnmarshaller_Write(x));
				Model_TestClassUnmarshaller_Write(x)_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestClassUnmarshaller_Write(x)_value);
					Model_TestClassUnmarshaller_Write(x)_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(x)_value_);
					Model_TestClassUnmarshaller_Write(x)_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(x)_value_);
				Model_TestClassUnmarshaller_Write(x)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassUnmarshaller_Write(x)_object);
					Model_TestClassUnmarshaller_Write(x)_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(x)_object_);
					Model_TestClassUnmarshaller_Write(x)_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(x)_object_);
				Model_TestClassUnmarshaller_Write(x)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassUnmarshaller_Write(x)_result);
					Model_TestClassUnmarshaller_Write(x)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(x)_result_);
					Model_TestClassUnmarshaller_Write(x)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassUnmarshaller_Write(x)_result_);
			Model_TestClassUnmarshaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassUnmarshaller_);
				Model_TestClassUnmarshaller__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassUnmarshaller__);
		Model_TestClassObjectDestroyer.reset(new Activity());
		this->addToElementRepository("TestClassObjectDestroyer", Model_TestClassObjectDestroyer);
			Model_TestClassObjectDestroyer_objectOut.reset(new Parameter());
			this->addToElementRepository("objectOut", Model_TestClassObjectDestroyer_objectOut);
				Model_TestClassObjectDestroyer_objectOut_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassObjectDestroyer_objectOut_);
				Model_TestClassObjectDestroyer_objectOut_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassObjectDestroyer_objectOut_);
			Model_TestClassObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassObjectDestroyer_);
				Model_TestClassObjectDestroyer__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassObjectDestroyer__);
			Model_TestClassObjectDestroyer_Parameter(objectIn).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(objectIn)", Model_TestClassObjectDestroyer_Parameter(objectIn));
			Model_TestClassObjectDestroyer_DestroyObject.reset(new DestroyObjectAction());
			this->addToElementRepository("DestroyObject", Model_TestClassObjectDestroyer_DestroyObject);
				Model_TestClassObjectDestroyer_DestroyObject_DestroyObject.target.reset(new InputPin());
				this->addToElementRepository("DestroyObject.target", Model_TestClassObjectDestroyer_DestroyObject_DestroyObject.target);
			Model_TestClassObjectDestroyer_objectIn.reset(new Parameter());
			this->addToElementRepository("objectIn", Model_TestClassObjectDestroyer_objectIn);
				Model_TestClassObjectDestroyer_objectIn_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassObjectDestroyer_objectIn_);
				Model_TestClassObjectDestroyer_objectIn_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassObjectDestroyer_objectIn_);
			Model_TestClassObjectDestroyer_Fork.reset(new ForkNode());
			this->addToElementRepository("Fork", Model_TestClassObjectDestroyer_Fork);
			Model_TestClassObjectDestroyer_Parameter(objectOut).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(objectOut)", Model_TestClassObjectDestroyer_Parameter(objectOut));
			Model_TestClassObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassObjectDestroyer_);
				Model_TestClassObjectDestroyer__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassObjectDestroyer__);
			Model_TestClassObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassObjectDestroyer_);
				Model_TestClassObjectDestroyer__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassObjectDestroyer__);
		Model_SimpleDecision.reset(new Activity());
		this->addToElementRepository("SimpleDecision", Model_SimpleDecision);
			Model_SimpleDecision_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_SimpleDecision_);
				Model_SimpleDecision__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_SimpleDecision__);
			Model_SimpleDecision_Parameter(output_1).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(output_1)", Model_SimpleDecision_Parameter(output_1));
			Model_SimpleDecision_testValue.reset(new Parameter());
			this->addToElementRepository("testValue", Model_SimpleDecision_testValue);
				Model_SimpleDecision_testValue_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_SimpleDecision_testValue_);
				Model_SimpleDecision_testValue_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_SimpleDecision_testValue_);
			Model_SimpleDecision_output_0.reset(new Parameter());
			this->addToElementRepository("output_0", Model_SimpleDecision_output_0);
				Model_SimpleDecision_output_0_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_SimpleDecision_output_0_);
				Model_SimpleDecision_output_0_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_SimpleDecision_output_0_);
			Model_SimpleDecision_output_1.reset(new Parameter());
			this->addToElementRepository("output_1", Model_SimpleDecision_output_1);
				Model_SimpleDecision_output_1_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_SimpleDecision_output_1_);
				Model_SimpleDecision_output_1_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_SimpleDecision_output_1_);
			Model_SimpleDecision_Parameter(output_0).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(output_0)", Model_SimpleDecision_Parameter(output_0));
			Model_SimpleDecision_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_SimpleDecision_);
				Model_SimpleDecision__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_SimpleDecision__);
				Model_SimpleDecision__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_SimpleDecision__);
			Model_SimpleDecision_Parameter(testValue).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(testValue)", Model_SimpleDecision_Parameter(testValue));
			Model_SimpleDecision_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_SimpleDecision_);
				Model_SimpleDecision__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_SimpleDecision__);
				Model_SimpleDecision__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_SimpleDecision__);
			Model_SimpleDecision_DecisionNode.reset(new DecisionNode());
			this->addToElementRepository("DecisionNode", Model_SimpleDecision_DecisionNode);
		Model_TestClassObjectCreator.reset(new Activity());
		this->addToElementRepository("TestClassObjectCreator", Model_TestClassObjectCreator);
			Model_TestClassObjectCreator_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassObjectCreator_);
				Model_TestClassObjectCreator__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassObjectCreator__);
			Model_TestClassObjectCreator_Create(TestClass).reset(new CreateObjectAction());
			this->addToElementRepository("Create(TestClass)", Model_TestClassObjectCreator_Create(TestClass));
				Model_TestClassObjectCreator_Create(TestClass)_Create(TestClass).result.reset(new OutputPin());
				this->addToElementRepository("Create(TestClass).result", Model_TestClassObjectCreator_Create(TestClass)_Create(TestClass).result);
					Model_TestClassObjectCreator_Create(TestClass)_Create(TestClass).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassObjectCreator_Create(TestClass)_Create(TestClass).result_);
					Model_TestClassObjectCreator_Create(TestClass)_Create(TestClass).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassObjectCreator_Create(TestClass)_Create(TestClass).result_);
			Model_TestClassObjectCreator_Parameter(result).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(result)", Model_TestClassObjectCreator_Parameter(result));
			Model_TestClassObjectCreator_result.reset(new Parameter());
			this->addToElementRepository("result", Model_TestClassObjectCreator_result);
				Model_TestClassObjectCreator_result_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassObjectCreator_result_);
				Model_TestClassObjectCreator_result_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassObjectCreator_result_);
		Model_TestRealComparisonFunctions.reset(new Activity());
		this->addToElementRepository("TestRealComparisonFunctions", Model_TestRealComparisonFunctions);
			Model_TestRealComparisonFunctions_LTResult.reset(new Parameter());
			this->addToElementRepository("LTResult", Model_TestRealComparisonFunctions_LTResult);
			Model_TestRealComparisonFunctions_GTResult.reset(new Parameter());
			this->addToElementRepository("GTResult", Model_TestRealComparisonFunctions_GTResult);
			Model_TestRealComparisonFunctions_Call(GT).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(GT)", Model_TestRealComparisonFunctions_Call(GT));
				Model_TestRealComparisonFunctions_Call(GT)_x.reset(new InputPin());
				this->addToElementRepository("x", Model_TestRealComparisonFunctions_Call(GT)_x);
					Model_TestRealComparisonFunctions_Call(GT)_x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(GT)_x_);
					Model_TestRealComparisonFunctions_Call(GT)_x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(GT)_x_);
				Model_TestRealComparisonFunctions_Call(GT)_y.reset(new InputPin());
				this->addToElementRepository("y", Model_TestRealComparisonFunctions_Call(GT)_y);
					Model_TestRealComparisonFunctions_Call(GT)_y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(GT)_y_);
					Model_TestRealComparisonFunctions_Call(GT)_y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(GT)_y_);
				Model_TestRealComparisonFunctions_Call(GT)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestRealComparisonFunctions_Call(GT)_result);
					Model_TestRealComparisonFunctions_Call(GT)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(GT)_result_);
					Model_TestRealComparisonFunctions_Call(GT)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(GT)_result_);
			Model_TestRealComparisonFunctions_Param(LEResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(LEResult)", Model_TestRealComparisonFunctions_Param(LEResult));
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_Call(GE).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(GE)", Model_TestRealComparisonFunctions_Call(GE));
				Model_TestRealComparisonFunctions_Call(GE)_x.reset(new InputPin());
				this->addToElementRepository("x", Model_TestRealComparisonFunctions_Call(GE)_x);
					Model_TestRealComparisonFunctions_Call(GE)_x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(GE)_x_);
					Model_TestRealComparisonFunctions_Call(GE)_x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(GE)_x_);
				Model_TestRealComparisonFunctions_Call(GE)_y.reset(new InputPin());
				this->addToElementRepository("y", Model_TestRealComparisonFunctions_Call(GE)_y);
					Model_TestRealComparisonFunctions_Call(GE)_y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(GE)_y_);
					Model_TestRealComparisonFunctions_Call(GE)_y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(GE)_y_);
				Model_TestRealComparisonFunctions_Call(GE)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestRealComparisonFunctions_Call(GE)_result);
					Model_TestRealComparisonFunctions_Call(GE)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(GE)_result_);
					Model_TestRealComparisonFunctions_Call(GE)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(GE)_result_);
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_Value(3.0).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(3.0)", Model_TestRealComparisonFunctions_Value(3.0));
				Model_TestRealComparisonFunctions_Value(3.0)_Value(3.0).result.reset(new OutputPin());
				this->addToElementRepository("Value(3.0).result", Model_TestRealComparisonFunctions_Value(3.0)_Value(3.0).result);
					Model_TestRealComparisonFunctions_Value(3.0)_Value(3.0).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Value(3.0)_Value(3.0).result_);
					Model_TestRealComparisonFunctions_Value(3.0)_Value(3.0).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Value(3.0)_Value(3.0).result_);
				Model_TestRealComparisonFunctions_Value(3.0)_.reset(new LiteralReal());
				this->addToElementRepository("", Model_TestRealComparisonFunctions_Value(3.0)_);
			Model_TestRealComparisonFunctions_Value(2.0).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(2.0)", Model_TestRealComparisonFunctions_Value(2.0));
				Model_TestRealComparisonFunctions_Value(2.0)_Value(2.0).result.reset(new OutputPin());
				this->addToElementRepository("Value(2.0).result", Model_TestRealComparisonFunctions_Value(2.0)_Value(2.0).result);
					Model_TestRealComparisonFunctions_Value(2.0)_Value(2.0).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Value(2.0)_Value(2.0).result_);
					Model_TestRealComparisonFunctions_Value(2.0)_Value(2.0).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Value(2.0)_Value(2.0).result_);
				Model_TestRealComparisonFunctions_Value(2.0)_.reset(new LiteralReal());
				this->addToElementRepository("", Model_TestRealComparisonFunctions_Value(2.0)_);
			Model_TestRealComparisonFunctions_Call(LE).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(LE)", Model_TestRealComparisonFunctions_Call(LE));
				Model_TestRealComparisonFunctions_Call(LE)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestRealComparisonFunctions_Call(LE)_result);
					Model_TestRealComparisonFunctions_Call(LE)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(LE)_result_);
					Model_TestRealComparisonFunctions_Call(LE)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(LE)_result_);
				Model_TestRealComparisonFunctions_Call(LE)_x.reset(new InputPin());
				this->addToElementRepository("x", Model_TestRealComparisonFunctions_Call(LE)_x);
					Model_TestRealComparisonFunctions_Call(LE)_x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(LE)_x_);
					Model_TestRealComparisonFunctions_Call(LE)_x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(LE)_x_);
				Model_TestRealComparisonFunctions_Call(LE)_y.reset(new InputPin());
				this->addToElementRepository("y", Model_TestRealComparisonFunctions_Call(LE)_y);
					Model_TestRealComparisonFunctions_Call(LE)_y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(LE)_y_);
					Model_TestRealComparisonFunctions_Call(LE)_y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(LE)_y_);
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_Call(LT).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(LT)", Model_TestRealComparisonFunctions_Call(LT));
				Model_TestRealComparisonFunctions_Call(LT)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestRealComparisonFunctions_Call(LT)_result);
					Model_TestRealComparisonFunctions_Call(LT)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(LT)_result_);
					Model_TestRealComparisonFunctions_Call(LT)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(LT)_result_);
				Model_TestRealComparisonFunctions_Call(LT)_x.reset(new InputPin());
				this->addToElementRepository("x", Model_TestRealComparisonFunctions_Call(LT)_x);
					Model_TestRealComparisonFunctions_Call(LT)_x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(LT)_x_);
					Model_TestRealComparisonFunctions_Call(LT)_x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(LT)_x_);
				Model_TestRealComparisonFunctions_Call(LT)_y.reset(new InputPin());
				this->addToElementRepository("y", Model_TestRealComparisonFunctions_Call(LT)_y);
					Model_TestRealComparisonFunctions_Call(LT)_y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(LT)_y_);
					Model_TestRealComparisonFunctions_Call(LT)_y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealComparisonFunctions_Call(LT)_y_);
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_GEResult.reset(new Parameter());
			this->addToElementRepository("GEResult", Model_TestRealComparisonFunctions_GEResult);
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_Param(GEResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(GEResult)", Model_TestRealComparisonFunctions_Param(GEResult));
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_Param(LTResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(LTResult)", Model_TestRealComparisonFunctions_Param(LTResult));
			Model_TestRealComparisonFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_LEResult.reset(new Parameter());
			this->addToElementRepository("LEResult", Model_TestRealComparisonFunctions_LEResult);
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_Fork(3.0).reset(new ForkNode());
			this->addToElementRepository("Fork(3.0)", Model_TestRealComparisonFunctions_Fork(3.0));
			Model_TestRealComparisonFunctions_Fork(2.0).reset(new ForkNode());
			this->addToElementRepository("Fork(2.0)", Model_TestRealComparisonFunctions_Fork(2.0));
			Model_TestRealComparisonFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealComparisonFunctions_);
				Model_TestRealComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealComparisonFunctions__);
			Model_TestRealComparisonFunctions_Param(GTResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(GTResult)", Model_TestRealComparisonFunctions_Param(GTResult));
		Model_.reset(new SignalEvent());
		this->addToElementRepository("", Model_);
		Model_Copier.reset(new Activity());
		this->addToElementRepository("Copier", Model_Copier);
			Model_Copier_Parameter(input).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(input)", Model_Copier_Parameter(input));
			Model_Copier_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_Copier_);
				Model_Copier__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_Copier__);
			Model_Copier_input.reset(new Parameter());
			this->addToElementRepository("input", Model_Copier_input);
				Model_Copier_input_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_Copier_input_);
				Model_Copier_input_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_Copier_input_);
			Model_Copier_Parameter(output).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(output)", Model_Copier_Parameter(output));
			Model_Copier_output.reset(new Parameter());
			this->addToElementRepository("output", Model_Copier_output);
				Model_Copier_output_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_Copier_output_);
				Model_Copier_output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_Copier_output_);
		Model_TestClass.reset(new Class_());
		this->addToElementRepository("TestClass", Model_TestClass);
			Model_TestClass_y.reset(new Property());
			this->addToElementRepository("y", Model_TestClass_y);
				Model_TestClass_y_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClass_y_);
				Model_TestClass_y_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClass_y_);
			Model_TestClass_x.reset(new Property());
			this->addToElementRepository("x", Model_TestClass_x);
				Model_TestClass_x_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClass_x_);
				Model_TestClass_x_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClass_x_);
		Model_TestAssociation.reset(new Association());
		this->addToElementRepository("TestAssociation", Model_TestAssociation);
			Model_TestAssociation_end2.reset(new Property());
			this->addToElementRepository("end2", Model_TestAssociation_end2);
				Model_TestAssociation_end2_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestAssociation_end2_);
				Model_TestAssociation_end2_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociation_end2_);
			Model_TestAssociation_end1.reset(new Property());
			this->addToElementRepository("end1", Model_TestAssociation_end1);
				Model_TestAssociation_end1_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestAssociation_end1_);
				Model_TestAssociation_end1_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociation_end1_);
		Model_Subclass1.reset(new Class_());
		this->addToElementRepository("Subclass1", Model_Subclass1);
			Model_Subclass1_a.reset(new Property());
			this->addToElementRepository("a", Model_Subclass1_a);
			Model_Subclass1_Generalization0.reset(new Generalization());
			this->addToElementRepository("Generalization0", Model_Subclass1_Generalization0);
		Model_TestClassIdentityTester.reset(new Activity());
		this->addToElementRepository("TestClassIdentityTester", Model_TestClassIdentityTester);
			Model_TestClassIdentityTester_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassIdentityTester_);
				Model_TestClassIdentityTester__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassIdentityTester__);
			Model_TestClassIdentityTester_TestIdentity.reset(new TestIdentityAction());
			this->addToElementRepository("TestIdentity", Model_TestClassIdentityTester_TestIdentity);
				Model_TestClassIdentityTester_TestIdentity_TestIdentity.first.reset(new InputPin());
				this->addToElementRepository("TestIdentity.first", Model_TestClassIdentityTester_TestIdentity_TestIdentity.first);
				Model_TestClassIdentityTester_TestIdentity_TestIdentity.second.reset(new InputPin());
				this->addToElementRepository("TestIdentity.second", Model_TestClassIdentityTester_TestIdentity_TestIdentity.second);
				Model_TestClassIdentityTester_TestIdentity_TestIdentity.result.reset(new OutputPin());
				this->addToElementRepository("TestIdentity.result", Model_TestClassIdentityTester_TestIdentity_TestIdentity.result);
			Model_TestClassIdentityTester_value1.reset(new Parameter());
			this->addToElementRepository("value1", Model_TestClassIdentityTester_value1);
				Model_TestClassIdentityTester_value1_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassIdentityTester_value1_);
				Model_TestClassIdentityTester_value1_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassIdentityTester_value1_);
			Model_TestClassIdentityTester_Parameter(result).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(result)", Model_TestClassIdentityTester_Parameter(result));
			Model_TestClassIdentityTester_Parameter(value2).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(value2)", Model_TestClassIdentityTester_Parameter(value2));
			Model_TestClassIdentityTester_result.reset(new Parameter());
			this->addToElementRepository("result", Model_TestClassIdentityTester_result);
				Model_TestClassIdentityTester_result_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassIdentityTester_result_);
				Model_TestClassIdentityTester_result_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassIdentityTester_result_);
			Model_TestClassIdentityTester_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassIdentityTester_);
				Model_TestClassIdentityTester__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassIdentityTester__);
			Model_TestClassIdentityTester_value2.reset(new Parameter());
			this->addToElementRepository("value2", Model_TestClassIdentityTester_value2);
				Model_TestClassIdentityTester_value2_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassIdentityTester_value2_);
				Model_TestClassIdentityTester_value2_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassIdentityTester_value2_);
			Model_TestClassIdentityTester_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassIdentityTester_);
				Model_TestClassIdentityTester__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassIdentityTester__);
			Model_TestClassIdentityTester_Parameter(value1).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(value1)", Model_TestClassIdentityTester_Parameter(value1));
		Model_General.reset(new Class_());
		this->addToElementRepository("General", Model_General);
			Model_General_y.reset(new Property());
			this->addToElementRepository("y", Model_General_y);
		Model_TestIntegerFunctions.reset(new Activity());
		this->addToElementRepository("TestIntegerFunctions", Model_TestIntegerFunctions);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_Call(Minus).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Minus)", Model_TestIntegerFunctions_Call(Minus));
				Model_TestIntegerFunctions_Call(Minus)_x.reset(new InputPin());
				this->addToElementRepository("x", Model_TestIntegerFunctions_Call(Minus)_x);
					Model_TestIntegerFunctions_Call(Minus)_x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Minus)_x_);
					Model_TestIntegerFunctions_Call(Minus)_x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Minus)_x_);
				Model_TestIntegerFunctions_Call(Minus)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestIntegerFunctions_Call(Minus)_result);
					Model_TestIntegerFunctions_Call(Minus)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Minus)_result_);
					Model_TestIntegerFunctions_Call(Minus)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Minus)_result_);
				Model_TestIntegerFunctions_Call(Minus)_y.reset(new InputPin());
				this->addToElementRepository("y", Model_TestIntegerFunctions_Call(Minus)_y);
					Model_TestIntegerFunctions_Call(Minus)_y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Minus)_y_);
					Model_TestIntegerFunctions_Call(Minus)_y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Minus)_y_);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_MaxResult.reset(new Parameter());
			this->addToElementRepository("MaxResult", Model_TestIntegerFunctions_MaxResult);
			Model_TestIntegerFunctions_Param(TimesResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(TimesResult)", Model_TestIntegerFunctions_Param(TimesResult));
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_Call(Div).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Div)", Model_TestIntegerFunctions_Call(Div));
				Model_TestIntegerFunctions_Call(Div)_Div.y.reset(new InputPin());
				this->addToElementRepository("Div.y", Model_TestIntegerFunctions_Call(Div)_Div.y);
					Model_TestIntegerFunctions_Call(Div)_Div.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Div)_Div.y_);
					Model_TestIntegerFunctions_Call(Div)_Div.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Div)_Div.y_);
				Model_TestIntegerFunctions_Call(Div)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestIntegerFunctions_Call(Div)_result);
					Model_TestIntegerFunctions_Call(Div)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Div)_result_);
					Model_TestIntegerFunctions_Call(Div)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Div)_result_);
				Model_TestIntegerFunctions_Call(Div)_Div.x.reset(new InputPin());
				this->addToElementRepository("Div.x", Model_TestIntegerFunctions_Call(Div)_Div.x);
					Model_TestIntegerFunctions_Call(Div)_Div.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Div)_Div.x_);
					Model_TestIntegerFunctions_Call(Div)_Div.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Div)_Div.x_);
			Model_TestIntegerFunctions_TimesResult.reset(new Parameter());
			this->addToElementRepository("TimesResult", Model_TestIntegerFunctions_TimesResult);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_Value(2).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(2)", Model_TestIntegerFunctions_Value(2));
				Model_TestIntegerFunctions_Value(2)_Value(2).result.reset(new OutputPin());
				this->addToElementRepository("Value(2).result", Model_TestIntegerFunctions_Value(2)_Value(2).result);
					Model_TestIntegerFunctions_Value(2)_Value(2).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Value(2)_Value(2).result_);
				Model_TestIntegerFunctions_Value(2)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions_Value(2)_);
			Model_TestIntegerFunctions_PlusResult.reset(new Parameter());
			this->addToElementRepository("PlusResult", Model_TestIntegerFunctions_PlusResult);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_Call(Mod).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Mod)", Model_TestIntegerFunctions_Call(Mod));
				Model_TestIntegerFunctions_Call(Mod)_Mod.y.reset(new InputPin());
				this->addToElementRepository("Mod.y", Model_TestIntegerFunctions_Call(Mod)_Mod.y);
					Model_TestIntegerFunctions_Call(Mod)_Mod.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Mod)_Mod.y_);
					Model_TestIntegerFunctions_Call(Mod)_Mod.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Mod)_Mod.y_);
				Model_TestIntegerFunctions_Call(Mod)_Mod.result.reset(new OutputPin());
				this->addToElementRepository("Mod.result", Model_TestIntegerFunctions_Call(Mod)_Mod.result);
					Model_TestIntegerFunctions_Call(Mod)_Mod.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Mod)_Mod.result_);
					Model_TestIntegerFunctions_Call(Mod)_Mod.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Mod)_Mod.result_);
				Model_TestIntegerFunctions_Call(Mod)_Mod.x.reset(new InputPin());
				this->addToElementRepository("Mod.x", Model_TestIntegerFunctions_Call(Mod)_Mod.x);
					Model_TestIntegerFunctions_Call(Mod)_Mod.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Mod)_Mod.x_);
					Model_TestIntegerFunctions_Call(Mod)_Mod.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Mod)_Mod.x_);
			Model_TestIntegerFunctions_Call(Times).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Times)", Model_TestIntegerFunctions_Call(Times));
				Model_TestIntegerFunctions_Call(Times)_Times.x.reset(new InputPin());
				this->addToElementRepository("Times.x", Model_TestIntegerFunctions_Call(Times)_Times.x);
					Model_TestIntegerFunctions_Call(Times)_Times.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Times)_Times.x_);
					Model_TestIntegerFunctions_Call(Times)_Times.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Times)_Times.x_);
				Model_TestIntegerFunctions_Call(Times)_Times.result.reset(new OutputPin());
				this->addToElementRepository("Times.result", Model_TestIntegerFunctions_Call(Times)_Times.result);
					Model_TestIntegerFunctions_Call(Times)_Times.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Times)_Times.result_);
					Model_TestIntegerFunctions_Call(Times)_Times.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Times)_Times.result_);
				Model_TestIntegerFunctions_Call(Times)_Times.y.reset(new InputPin());
				this->addToElementRepository("Times.y", Model_TestIntegerFunctions_Call(Times)_Times.y);
					Model_TestIntegerFunctions_Call(Times)_Times.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Times)_Times.y_);
					Model_TestIntegerFunctions_Call(Times)_Times.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Times)_Times.y_);
			Model_TestIntegerFunctions_Param(PlusResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(PlusResult)", Model_TestIntegerFunctions_Param(PlusResult));
			Model_TestIntegerFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_Call(Plus).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Plus)", Model_TestIntegerFunctions_Call(Plus));
				Model_TestIntegerFunctions_Call(Plus)_Plus.x.reset(new InputPin());
				this->addToElementRepository("Plus.x", Model_TestIntegerFunctions_Call(Plus)_Plus.x);
					Model_TestIntegerFunctions_Call(Plus)_Plus.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Plus)_Plus.x_);
					Model_TestIntegerFunctions_Call(Plus)_Plus.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Plus)_Plus.x_);
				Model_TestIntegerFunctions_Call(Plus)_Plus.result.reset(new OutputPin());
				this->addToElementRepository("Plus.result", Model_TestIntegerFunctions_Call(Plus)_Plus.result);
					Model_TestIntegerFunctions_Call(Plus)_Plus.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Plus)_Plus.result_);
					Model_TestIntegerFunctions_Call(Plus)_Plus.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Plus)_Plus.result_);
				Model_TestIntegerFunctions_Call(Plus)_Plus.y.reset(new InputPin());
				this->addToElementRepository("Plus.y", Model_TestIntegerFunctions_Call(Plus)_Plus.y);
					Model_TestIntegerFunctions_Call(Plus)_Plus.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Plus)_Plus.y_);
					Model_TestIntegerFunctions_Call(Plus)_Plus.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Plus)_Plus.y_);
			Model_TestIntegerFunctions_Param(ModResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(ModResult)", Model_TestIntegerFunctions_Param(ModResult));
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_Value(-2).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(-2)", Model_TestIntegerFunctions_Value(-2));
				Model_TestIntegerFunctions_Value(-2)_Value(-2).result.reset(new OutputPin());
				this->addToElementRepository("Value(-2).result", Model_TestIntegerFunctions_Value(-2)_Value(-2).result);
					Model_TestIntegerFunctions_Value(-2)_Value(-2).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Value(-2)_Value(-2).result_);
					Model_TestIntegerFunctions_Value(-2)_Value(-2).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Value(-2)_Value(-2).result_);
				Model_TestIntegerFunctions_Value(-2)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions_Value(-2)_);
			Model_TestIntegerFunctions_Param(DivResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(DivResult)", Model_TestIntegerFunctions_Param(DivResult));
			Model_TestIntegerFunctions_Fork(2).reset(new ForkNode());
			this->addToElementRepository("Fork(2)", Model_TestIntegerFunctions_Fork(2));
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_Call(Min).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Min)", Model_TestIntegerFunctions_Call(Min));
				Model_TestIntegerFunctions_Call(Min)_Min.y.reset(new InputPin());
				this->addToElementRepository("Min.y", Model_TestIntegerFunctions_Call(Min)_Min.y);
					Model_TestIntegerFunctions_Call(Min)_Min.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Min)_Min.y_);
					Model_TestIntegerFunctions_Call(Min)_Min.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Min)_Min.y_);
				Model_TestIntegerFunctions_Call(Min)_Min.x.reset(new InputPin());
				this->addToElementRepository("Min.x", Model_TestIntegerFunctions_Call(Min)_Min.x);
					Model_TestIntegerFunctions_Call(Min)_Min.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Min)_Min.x_);
					Model_TestIntegerFunctions_Call(Min)_Min.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Min)_Min.x_);
				Model_TestIntegerFunctions_Call(Min)_Min.result.reset(new OutputPin());
				this->addToElementRepository("Min.result", Model_TestIntegerFunctions_Call(Min)_Min.result);
					Model_TestIntegerFunctions_Call(Min)_Min.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Min)_Min.result_);
					Model_TestIntegerFunctions_Call(Min)_Min.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Min)_Min.result_);
			Model_TestIntegerFunctions_ModResult.reset(new Parameter());
			this->addToElementRepository("ModResult", Model_TestIntegerFunctions_ModResult);
			Model_TestIntegerFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_Param(MaxResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(MaxResult)", Model_TestIntegerFunctions_Param(MaxResult));
			Model_TestIntegerFunctions_Call(Abs).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Abs)", Model_TestIntegerFunctions_Call(Abs));
				Model_TestIntegerFunctions_Call(Abs)_Abs.result.reset(new OutputPin());
				this->addToElementRepository("Abs.result", Model_TestIntegerFunctions_Call(Abs)_Abs.result);
					Model_TestIntegerFunctions_Call(Abs)_Abs.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Abs)_Abs.result_);
					Model_TestIntegerFunctions_Call(Abs)_Abs.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Abs)_Abs.result_);
				Model_TestIntegerFunctions_Call(Abs)_Abs.x.reset(new InputPin());
				this->addToElementRepository("Abs.x", Model_TestIntegerFunctions_Call(Abs)_Abs.x);
					Model_TestIntegerFunctions_Call(Abs)_Abs.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Abs)_Abs.x_);
					Model_TestIntegerFunctions_Call(Abs)_Abs.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Abs)_Abs.x_);
			Model_TestIntegerFunctions_Param(NegResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(NegResult)", Model_TestIntegerFunctions_Param(NegResult));
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_Param(MinusResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(MinusResult)", Model_TestIntegerFunctions_Param(MinusResult));
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_Fork(3).reset(new ForkNode());
			this->addToElementRepository("Fork(3)", Model_TestIntegerFunctions_Fork(3));
			Model_TestIntegerFunctions_MinResult.reset(new Parameter());
			this->addToElementRepository("MinResult", Model_TestIntegerFunctions_MinResult);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_MinusResult.reset(new Parameter());
			this->addToElementRepository("MinusResult", Model_TestIntegerFunctions_MinusResult);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_Value(3).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(3)", Model_TestIntegerFunctions_Value(3));
				Model_TestIntegerFunctions_Value(3)_Value(3).result.reset(new OutputPin());
				this->addToElementRepository("Value(3).result", Model_TestIntegerFunctions_Value(3)_Value(3).result);
				Model_TestIntegerFunctions_Value(3)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions_Value(3)_);
			Model_TestIntegerFunctions_Call(Neg).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Neg)", Model_TestIntegerFunctions_Call(Neg));
				Model_TestIntegerFunctions_Call(Neg)_Neg.x.reset(new InputPin());
				this->addToElementRepository("Neg.x", Model_TestIntegerFunctions_Call(Neg)_Neg.x);
					Model_TestIntegerFunctions_Call(Neg)_Neg.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Neg)_Neg.x_);
					Model_TestIntegerFunctions_Call(Neg)_Neg.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Neg)_Neg.x_);
				Model_TestIntegerFunctions_Call(Neg)_Neg.result.reset(new OutputPin());
				this->addToElementRepository("Neg.result", Model_TestIntegerFunctions_Call(Neg)_Neg.result);
					Model_TestIntegerFunctions_Call(Neg)_Neg.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Neg)_Neg.result_);
					Model_TestIntegerFunctions_Call(Neg)_Neg.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Neg)_Neg.result_);
			Model_TestIntegerFunctions_DivResult.reset(new Parameter());
			this->addToElementRepository("DivResult", Model_TestIntegerFunctions_DivResult);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_AbsResult.reset(new Parameter());
			this->addToElementRepository("AbsResult", Model_TestIntegerFunctions_AbsResult);
			Model_TestIntegerFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_Param(MinResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(MinResult)", Model_TestIntegerFunctions_Param(MinResult));
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_NegResult.reset(new Parameter());
			this->addToElementRepository("NegResult", Model_TestIntegerFunctions_NegResult);
			Model_TestIntegerFunctions_Call(Max).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Max)", Model_TestIntegerFunctions_Call(Max));
				Model_TestIntegerFunctions_Call(Max)_Max.y.reset(new InputPin());
				this->addToElementRepository("Max.y", Model_TestIntegerFunctions_Call(Max)_Max.y);
					Model_TestIntegerFunctions_Call(Max)_Max.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Max)_Max.y_);
					Model_TestIntegerFunctions_Call(Max)_Max.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Max)_Max.y_);
				Model_TestIntegerFunctions_Call(Max)_Max.result.reset(new OutputPin());
				this->addToElementRepository("Max.result", Model_TestIntegerFunctions_Call(Max)_Max.result);
					Model_TestIntegerFunctions_Call(Max)_Max.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Max)_Max.result_);
					Model_TestIntegerFunctions_Call(Max)_Max.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Max)_Max.result_);
				Model_TestIntegerFunctions_Call(Max)_Max.x.reset(new InputPin());
				this->addToElementRepository("Max.x", Model_TestIntegerFunctions_Call(Max)_Max.x);
					Model_TestIntegerFunctions_Call(Max)_Max.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Max)_Max.x_);
					Model_TestIntegerFunctions_Call(Max)_Max.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerFunctions_Call(Max)_Max.x_);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerFunctions_);
				Model_TestIntegerFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerFunctions__);
			Model_TestIntegerFunctions_Param(AbsResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(AbsResult)", Model_TestIntegerFunctions_Param(AbsResult));
		Model_TestSimpleActivities.reset(new Activity());
		this->addToElementRepository("TestSimpleActivities", Model_TestSimpleActivities);
			Model_TestSimpleActivities_Call(DecisionJoin).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(DecisionJoin)", Model_TestSimpleActivities_Call(DecisionJoin));
				Model_TestSimpleActivities_Call(DecisionJoin)_DecisionJoin.output.reset(new OutputPin());
				this->addToElementRepository("DecisionJoin.output", Model_TestSimpleActivities_Call(DecisionJoin)_DecisionJoin.output);
			Model_TestSimpleActivities_Call(CopierCaller).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(CopierCaller)", Model_TestSimpleActivities_Call(CopierCaller));
				Model_TestSimpleActivities_Call(CopierCaller)_CopierCaller.output.reset(new OutputPin());
				this->addToElementRepository("CopierCaller.output", Model_TestSimpleActivities_Call(CopierCaller)_CopierCaller.output);
			Model_TestSimpleActivities_Parameter(ForkMerge).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(ForkMerge)", Model_TestSimpleActivities_Parameter(ForkMerge));
			Model_TestSimpleActivities_Parameter(Copier.output).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(Copier.output)", Model_TestSimpleActivities_Parameter(Copier.output));
			Model_TestSimpleActivities_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_Parameter(ForkMergeData.output).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(ForkMergeData.output)", Model_TestSimpleActivities_Parameter(ForkMergeData.output));
			Model_TestSimpleActivities_Call(ForkMergeData).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(ForkMergeData)", Model_TestSimpleActivities_Call(ForkMergeData));
				Model_TestSimpleActivities_Call(ForkMergeData)_ForkMergeData.output.reset(new OutputPin());
				this->addToElementRepository("ForkMergeData.output", Model_TestSimpleActivities_Call(ForkMergeData)_ForkMergeData.output);
			Model_TestSimpleActivities_Parameter(SimpleDecision_0.output_1).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(SimpleDecision_0.output_1)", Model_TestSimpleActivities_Parameter(SimpleDecision_0.output_1));
			Model_TestSimpleActivities_ForkMergeData.output.reset(new Parameter());
			this->addToElementRepository("ForkMergeData.output", Model_TestSimpleActivities_ForkMergeData.output);
				Model_TestSimpleActivities_ForkMergeData.output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSimpleActivities_ForkMergeData.output_);
				Model_TestSimpleActivities_ForkMergeData.output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSimpleActivities_ForkMergeData.output_);
			Model_TestSimpleActivities_Parameter(DecisionJoin.output).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(DecisionJoin.output)", Model_TestSimpleActivities_Parameter(DecisionJoin.output));
			Model_TestSimpleActivities_Copier.output.reset(new Parameter());
			this->addToElementRepository("Copier.output", Model_TestSimpleActivities_Copier.output);
				Model_TestSimpleActivities_Copier.output_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities_Copier.output_);
				Model_TestSimpleActivities_Copier.output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSimpleActivities_Copier.output_);
			Model_TestSimpleActivities_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_Call(SimpleDecision_1).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(SimpleDecision_1)", Model_TestSimpleActivities_Call(SimpleDecision_1));
				Model_TestSimpleActivities_Call(SimpleDecision_1)_SimpleDecision_1.output_0.reset(new OutputPin());
				this->addToElementRepository("SimpleDecision_1.output_0", Model_TestSimpleActivities_Call(SimpleDecision_1)_SimpleDecision_1.output_0);
				Model_TestSimpleActivities_Call(SimpleDecision_1)_SimpleDecision_1.testValue.reset(new InputPin());
				this->addToElementRepository("SimpleDecision_1.testValue", Model_TestSimpleActivities_Call(SimpleDecision_1)_SimpleDecision_1.testValue);
				Model_TestSimpleActivities_Call(SimpleDecision_1)_SimpleDecision_1.output_1.reset(new OutputPin());
				this->addToElementRepository("SimpleDecision_1.output_1", Model_TestSimpleActivities_Call(SimpleDecision_1)_SimpleDecision_1.output_1);
			Model_TestSimpleActivities_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_Parameter(CopierCaller.output).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(CopierCaller.output)", Model_TestSimpleActivities_Parameter(CopierCaller.output));
			Model_TestSimpleActivities_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_Parameter(SimpleDecision_1.output_0).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(SimpleDecision_1.output_0)", Model_TestSimpleActivities_Parameter(SimpleDecision_1.output_0));
			Model_TestSimpleActivities_SimpleDecision_1.output_0.reset(new Parameter());
			this->addToElementRepository("SimpleDecision_1.output_0", Model_TestSimpleActivities_SimpleDecision_1.output_0);
				Model_TestSimpleActivities_SimpleDecision_1.output_0_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSimpleActivities_SimpleDecision_1.output_0_);
				Model_TestSimpleActivities_SimpleDecision_1.output_0_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities_SimpleDecision_1.output_0_);
			Model_TestSimpleActivities_ForkMerge.reset(new Parameter());
			this->addToElementRepository("ForkMerge", Model_TestSimpleActivities_ForkMerge);
				Model_TestSimpleActivities_ForkMerge_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSimpleActivities_ForkMerge_);
				Model_TestSimpleActivities_ForkMerge_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSimpleActivities_ForkMerge_);
			Model_TestSimpleActivities_Call(ForkMerge).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(ForkMerge)", Model_TestSimpleActivities_Call(ForkMerge));
				Model_TestSimpleActivities_Call(ForkMerge)_ForkMerge.output.reset(new OutputPin());
				this->addToElementRepository("ForkMerge.output", Model_TestSimpleActivities_Call(ForkMerge)_ForkMerge.output);
			Model_TestSimpleActivities_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_Value(1).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(1)", Model_TestSimpleActivities_Value(1));
				Model_TestSimpleActivities_Value(1)_Value(1).result.reset(new OutputPin());
				this->addToElementRepository("Value(1).result", Model_TestSimpleActivities_Value(1)_Value(1).result);
					Model_TestSimpleActivities_Value(1)_Value(1).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestSimpleActivities_Value(1)_Value(1).result_);
					Model_TestSimpleActivities_Value(1)_Value(1).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestSimpleActivities_Value(1)_Value(1).result_);
				Model_TestSimpleActivities_Value(1)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities_Value(1)_);
			Model_TestSimpleActivities_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_Value(0).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(0)", Model_TestSimpleActivities_Value(0));
				Model_TestSimpleActivities_Value(0)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities_Value(0)_);
				Model_TestSimpleActivities_Value(0)_Value(0).result.reset(new OutputPin());
				this->addToElementRepository("Value(0).result", Model_TestSimpleActivities_Value(0)_Value(0).result);
					Model_TestSimpleActivities_Value(0)_Value(0).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestSimpleActivities_Value(0)_Value(0).result_);
					Model_TestSimpleActivities_Value(0)_Value(0).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestSimpleActivities_Value(0)_Value(0).result_);
			Model_TestSimpleActivities_SimpleDecision_1.output_1.reset(new Parameter());
			this->addToElementRepository("SimpleDecision_1.output_1", Model_TestSimpleActivities_SimpleDecision_1.output_1);
				Model_TestSimpleActivities_SimpleDecision_1.output_1_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSimpleActivities_SimpleDecision_1.output_1_);
				Model_TestSimpleActivities_SimpleDecision_1.output_1_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities_SimpleDecision_1.output_1_);
			Model_TestSimpleActivities_Fork_0.reset(new ForkNode());
			this->addToElementRepository("Fork_0", Model_TestSimpleActivities_Fork_0);
			Model_TestSimpleActivities_CopierCaller.output.reset(new Parameter());
			this->addToElementRepository("CopierCaller.output", Model_TestSimpleActivities_CopierCaller.output);
				Model_TestSimpleActivities_CopierCaller.output_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities_CopierCaller.output_);
				Model_TestSimpleActivities_CopierCaller.output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSimpleActivities_CopierCaller.output_);
			Model_TestSimpleActivities_Parameter(SimpleDecision_0.output_0).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(SimpleDecision_0.output_0)", Model_TestSimpleActivities_Parameter(SimpleDecision_0.output_0));
			Model_TestSimpleActivities_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_Call(SimpleDecision_0).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(SimpleDecision_0)", Model_TestSimpleActivities_Call(SimpleDecision_0));
				Model_TestSimpleActivities_Call(SimpleDecision_0)_SimpleDcision_0.output_1.reset(new OutputPin());
				this->addToElementRepository("SimpleDcision_0.output_1", Model_TestSimpleActivities_Call(SimpleDecision_0)_SimpleDcision_0.output_1);
				Model_TestSimpleActivities_Call(SimpleDecision_0)_SimpleDecision_0.testValue.reset(new InputPin());
				this->addToElementRepository("SimpleDecision_0.testValue", Model_TestSimpleActivities_Call(SimpleDecision_0)_SimpleDecision_0.testValue);
				Model_TestSimpleActivities_Call(SimpleDecision_0)_SimpleDecision_0.output_0.reset(new OutputPin());
				this->addToElementRepository("SimpleDecision_0.output_0", Model_TestSimpleActivities_Call(SimpleDecision_0)_SimpleDecision_0.output_0);
			Model_TestSimpleActivities_SimpleDecision_1.output_1.reset(new ActivityParameterNode());
			this->addToElementRepository("SimpleDecision_1.output_1", Model_TestSimpleActivities_SimpleDecision_1.output_1);
			Model_TestSimpleActivities_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_SimpleDecision_0.output_0.reset(new Parameter());
			this->addToElementRepository("SimpleDecision_0.output_0", Model_TestSimpleActivities_SimpleDecision_0.output_0);
				Model_TestSimpleActivities_SimpleDecision_0.output_0_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities_SimpleDecision_0.output_0_);
				Model_TestSimpleActivities_SimpleDecision_0.output_0_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSimpleActivities_SimpleDecision_0.output_0_);
			Model_TestSimpleActivities_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_SimpleDecision_0.output_1.reset(new Parameter());
			this->addToElementRepository("SimpleDecision_0.output_1", Model_TestSimpleActivities_SimpleDecision_0.output_1);
				Model_TestSimpleActivities_SimpleDecision_0.output_1_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSimpleActivities_SimpleDecision_0.output_1_);
				Model_TestSimpleActivities_SimpleDecision_0.output_1_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities_SimpleDecision_0.output_1_);
			Model_TestSimpleActivities_Call(ForkJoin).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(ForkJoin)", Model_TestSimpleActivities_Call(ForkJoin));
			Model_TestSimpleActivities_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_DecisionJoin.output.reset(new Parameter());
			this->addToElementRepository("DecisionJoin.output", Model_TestSimpleActivities_DecisionJoin.output);
				Model_TestSimpleActivities_DecisionJoin.output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSimpleActivities_DecisionJoin.output_);
				Model_TestSimpleActivities_DecisionJoin.output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSimpleActivities_DecisionJoin.output_);
			Model_TestSimpleActivities_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_Call(Copier).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Copier)", Model_TestSimpleActivities_Call(Copier));
				Model_TestSimpleActivities_Call(Copier)_Copier.input.reset(new InputPin());
				this->addToElementRepository("Copier.input", Model_TestSimpleActivities_Call(Copier)_Copier.input);
				Model_TestSimpleActivities_Call(Copier)_Copier.output.reset(new OutputPin());
				this->addToElementRepository("Copier.output", Model_TestSimpleActivities_Call(Copier)_Copier.output);
			Model_TestSimpleActivities_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
			Model_TestSimpleActivities_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSimpleActivities_);
				Model_TestSimpleActivities__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSimpleActivities__);
		Model_.reset(new SignalEvent());
		this->addToElementRepository("", Model_);
		Model_SelfReader.reset(new Activity());
		this->addToElementRepository("SelfReader", Model_SelfReader);
			Model_SelfReader_ReadSelf.reset(new ReadSelfAction());
			this->addToElementRepository("ReadSelf", Model_SelfReader_ReadSelf);
				Model_SelfReader_ReadSelf_ReadSelf.result.reset(new OutputPin());
				this->addToElementRepository("ReadSelf.result", Model_SelfReader_ReadSelf_ReadSelf.result);
			Model_SelfReader_.reset(new ForkNode());
			this->addToElementRepository("", Model_SelfReader_);
			Model_SelfReader_isSelfReader.reset(new Parameter());
			this->addToElementRepository("isSelfReader", Model_SelfReader_isSelfReader);
			Model_SelfReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_SelfReader_);
				Model_SelfReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_SelfReader__);
			Model_SelfReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_SelfReader_);
				Model_SelfReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_SelfReader__);
			Model_SelfReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_SelfReader_);
				Model_SelfReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_SelfReader__);
			Model_SelfReader_Parameter(isSelfReader).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(isSelfReader)", Model_SelfReader_Parameter(isSelfReader));
			Model_SelfReader_Parameter(self).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(self)", Model_SelfReader_Parameter(self));
			Model_SelfReader_IsClassified(SelfReader).reset(new ReadIsClassifiedObjectAction());
			this->addToElementRepository("IsClassified(SelfReader)", Model_SelfReader_IsClassified(SelfReader));
				Model_SelfReader_IsClassified(SelfReader)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_SelfReader_IsClassified(SelfReader)_object);
				Model_SelfReader_IsClassified(SelfReader)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_SelfReader_IsClassified(SelfReader)_result);
			Model_SelfReader_self.reset(new Parameter());
			this->addToElementRepository("self", Model_SelfReader_self);
				Model_SelfReader_self_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_SelfReader_self_);
				Model_SelfReader_self_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_SelfReader_self_);
			Model_SelfReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_SelfReader_);
				Model_SelfReader__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_SelfReader__);
		Model_TestRealFunctions.reset(new Activity());
		this->addToElementRepository("TestRealFunctions", Model_TestRealFunctions);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_Fork(0.5).reset(new ForkNode());
			this->addToElementRepository("Fork(0.5)", Model_TestRealFunctions_Fork(0.5));
			Model_TestRealFunctions_Call(Plus).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Plus)", Model_TestRealFunctions_Call(Plus));
				Model_TestRealFunctions_Call(Plus)_Plus.x.reset(new InputPin());
				this->addToElementRepository("Plus.x", Model_TestRealFunctions_Call(Plus)_Plus.x);
					Model_TestRealFunctions_Call(Plus)_Plus.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Plus)_Plus.x_);
					Model_TestRealFunctions_Call(Plus)_Plus.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Plus)_Plus.x_);
				Model_TestRealFunctions_Call(Plus)_Plus.y.reset(new InputPin());
				this->addToElementRepository("Plus.y", Model_TestRealFunctions_Call(Plus)_Plus.y);
					Model_TestRealFunctions_Call(Plus)_Plus.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Plus)_Plus.y_);
					Model_TestRealFunctions_Call(Plus)_Plus.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Plus)_Plus.y_);
				Model_TestRealFunctions_Call(Plus)_Plus.result.reset(new OutputPin());
				this->addToElementRepository("Plus.result", Model_TestRealFunctions_Call(Plus)_Plus.result);
					Model_TestRealFunctions_Call(Plus)_Plus.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Plus)_Plus.result_);
					Model_TestRealFunctions_Call(Plus)_Plus.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Plus)_Plus.result_);
			Model_TestRealFunctions_Param(NegResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(NegResult)", Model_TestRealFunctions_Param(NegResult));
			Model_TestRealFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_Param(TimesResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(TimesResult)", Model_TestRealFunctions_Param(TimesResult));
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_MinusResult.reset(new Parameter());
			this->addToElementRepository("MinusResult", Model_TestRealFunctions_MinusResult);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_MinResult.reset(new Parameter());
			this->addToElementRepository("MinResult", Model_TestRealFunctions_MinResult);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_MaxResult.reset(new Parameter());
			this->addToElementRepository("MaxResult", Model_TestRealFunctions_MaxResult);
			Model_TestRealFunctions_Value(0.5).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(0.5)", Model_TestRealFunctions_Value(0.5));
				Model_TestRealFunctions_Value(0.5)_Value(0.5).result.reset(new OutputPin());
				this->addToElementRepository("Value(0.5).result", Model_TestRealFunctions_Value(0.5)_Value(0.5).result);
					Model_TestRealFunctions_Value(0.5)_Value(0.5).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Value(0.5)_Value(0.5).result_);
					Model_TestRealFunctions_Value(0.5)_Value(0.5).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Value(0.5)_Value(0.5).result_);
				Model_TestRealFunctions_Value(0.5)_.reset(new LiteralReal());
				this->addToElementRepository("", Model_TestRealFunctions_Value(0.5)_);
			Model_TestRealFunctions_Call(Minus).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Minus)", Model_TestRealFunctions_Call(Minus));
				Model_TestRealFunctions_Call(Minus)_Minus.result.reset(new OutputPin());
				this->addToElementRepository("Minus.result", Model_TestRealFunctions_Call(Minus)_Minus.result);
					Model_TestRealFunctions_Call(Minus)_Minus.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Minus)_Minus.result_);
					Model_TestRealFunctions_Call(Minus)_Minus.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Minus)_Minus.result_);
				Model_TestRealFunctions_Call(Minus)_Minus.y.reset(new InputPin());
				this->addToElementRepository("Minus.y", Model_TestRealFunctions_Call(Minus)_Minus.y);
					Model_TestRealFunctions_Call(Minus)_Minus.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Minus)_Minus.y_);
					Model_TestRealFunctions_Call(Minus)_Minus.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Minus)_Minus.y_);
				Model_TestRealFunctions_Call(Minus)_Minus.x.reset(new InputPin());
				this->addToElementRepository("Minus.x", Model_TestRealFunctions_Call(Minus)_Minus.x);
					Model_TestRealFunctions_Call(Minus)_Minus.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Minus)_Minus.x_);
					Model_TestRealFunctions_Call(Minus)_Minus.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Minus)_Minus.x_);
			Model_TestRealFunctions_Call(Times).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Times)", Model_TestRealFunctions_Call(Times));
				Model_TestRealFunctions_Call(Times)_Times.x.reset(new InputPin());
				this->addToElementRepository("Times.x", Model_TestRealFunctions_Call(Times)_Times.x);
					Model_TestRealFunctions_Call(Times)_Times.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Times)_Times.x_);
					Model_TestRealFunctions_Call(Times)_Times.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Times)_Times.x_);
				Model_TestRealFunctions_Call(Times)_Times.y.reset(new InputPin());
				this->addToElementRepository("Times.y", Model_TestRealFunctions_Call(Times)_Times.y);
					Model_TestRealFunctions_Call(Times)_Times.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Times)_Times.y_);
					Model_TestRealFunctions_Call(Times)_Times.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Times)_Times.y_);
				Model_TestRealFunctions_Call(Times)_Times.result.reset(new OutputPin());
				this->addToElementRepository("Times.result", Model_TestRealFunctions_Call(Times)_Times.result);
					Model_TestRealFunctions_Call(Times)_Times.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Times)_Times.result_);
					Model_TestRealFunctions_Call(Times)_Times.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Times)_Times.result_);
			Model_TestRealFunctions_Param(ToIntegerResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(ToIntegerResult)", Model_TestRealFunctions_Param(ToIntegerResult));
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_Param(MaxResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(MaxResult)", Model_TestRealFunctions_Param(MaxResult));
			Model_TestRealFunctions_Call(AbsResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Call(AbsResult)", Model_TestRealFunctions_Call(AbsResult));
			Model_TestRealFunctions_FloorResult.reset(new Parameter());
			this->addToElementRepository("FloorResult", Model_TestRealFunctions_FloorResult);
				Model_TestRealFunctions_FloorResult_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions_FloorResult_);
				Model_TestRealFunctions_FloorResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions_FloorResult_);
			Model_TestRealFunctions_Call(Inv).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Inv)", Model_TestRealFunctions_Call(Inv));
				Model_TestRealFunctions_Call(Inv)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestRealFunctions_Call(Inv)_result);
				Model_TestRealFunctions_Call(Inv)_x.reset(new InputPin());
				this->addToElementRepository("x", Model_TestRealFunctions_Call(Inv)_x);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_Param(DivideResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(DivideResult)", Model_TestRealFunctions_Param(DivideResult));
			Model_TestRealFunctions_RoundResult.reset(new Parameter());
			this->addToElementRepository("RoundResult", Model_TestRealFunctions_RoundResult);
				Model_TestRealFunctions_RoundResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions_RoundResult_);
				Model_TestRealFunctions_RoundResult_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions_RoundResult_);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_Call(Divide).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Divide)", Model_TestRealFunctions_Call(Divide));
				Model_TestRealFunctions_Call(Divide)_x.reset(new InputPin());
				this->addToElementRepository("x", Model_TestRealFunctions_Call(Divide)_x);
					Model_TestRealFunctions_Call(Divide)_x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Divide)_x_);
					Model_TestRealFunctions_Call(Divide)_x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Divide)_x_);
				Model_TestRealFunctions_Call(Divide)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestRealFunctions_Call(Divide)_result);
					Model_TestRealFunctions_Call(Divide)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Divide)_result_);
					Model_TestRealFunctions_Call(Divide)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Divide)_result_);
				Model_TestRealFunctions_Call(Divide)_y.reset(new InputPin());
				this->addToElementRepository("y", Model_TestRealFunctions_Call(Divide)_y);
					Model_TestRealFunctions_Call(Divide)_y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Divide)_y_);
					Model_TestRealFunctions_Call(Divide)_y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Divide)_y_);
			Model_TestRealFunctions_Param(InvResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(InvResult)", Model_TestRealFunctions_Param(InvResult));
			Model_TestRealFunctions_Call(ToInteger).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(ToInteger)", Model_TestRealFunctions_Call(ToInteger));
				Model_TestRealFunctions_Call(ToInteger)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestRealFunctions_Call(ToInteger)_result);
					Model_TestRealFunctions_Call(ToInteger)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(ToInteger)_result_);
					Model_TestRealFunctions_Call(ToInteger)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(ToInteger)_result_);
				Model_TestRealFunctions_Call(ToInteger)_x.reset(new InputPin());
				this->addToElementRepository("x", Model_TestRealFunctions_Call(ToInteger)_x);
					Model_TestRealFunctions_Call(ToInteger)_x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(ToInteger)_x_);
					Model_TestRealFunctions_Call(ToInteger)_x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(ToInteger)_x_);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_Value(3.1).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(3.1)", Model_TestRealFunctions_Value(3.1));
				Model_TestRealFunctions_Value(3.1)_Value(3.1).result.reset(new OutputPin());
				this->addToElementRepository("Value(3.1).result", Model_TestRealFunctions_Value(3.1)_Value(3.1).result);
				Model_TestRealFunctions_Value(3.1)_.reset(new LiteralReal());
				this->addToElementRepository("", Model_TestRealFunctions_Value(3.1)_);
			Model_TestRealFunctions_Param(MinusResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(MinusResult)", Model_TestRealFunctions_Param(MinusResult));
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_TimesResult.reset(new Parameter());
			this->addToElementRepository("TimesResult", Model_TestRealFunctions_TimesResult);
			Model_TestRealFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_Fork(-2.3).reset(new ForkNode());
			this->addToElementRepository("Fork(-2.3)", Model_TestRealFunctions_Fork(-2.3));
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_ToIntegerResult.reset(new Parameter());
			this->addToElementRepository("ToIntegerResult", Model_TestRealFunctions_ToIntegerResult);
				Model_TestRealFunctions_ToIntegerResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions_ToIntegerResult_);
				Model_TestRealFunctions_ToIntegerResult_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions_ToIntegerResult_);
			Model_TestRealFunctions_Param(MinResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(MinResult)", Model_TestRealFunctions_Param(MinResult));
			Model_TestRealFunctions_Call(Floor).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Floor)", Model_TestRealFunctions_Call(Floor));
				Model_TestRealFunctions_Call(Floor)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestRealFunctions_Call(Floor)_result);
					Model_TestRealFunctions_Call(Floor)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Floor)_result_);
					Model_TestRealFunctions_Call(Floor)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Floor)_result_);
				Model_TestRealFunctions_Call(Floor)_x.reset(new InputPin());
				this->addToElementRepository("x", Model_TestRealFunctions_Call(Floor)_x);
					Model_TestRealFunctions_Call(Floor)_x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Floor)_x_);
					Model_TestRealFunctions_Call(Floor)_x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Floor)_x_);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_Value(-2.3).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(-2.3)", Model_TestRealFunctions_Value(-2.3));
				Model_TestRealFunctions_Value(-2.3)_.reset(new LiteralReal());
				this->addToElementRepository("", Model_TestRealFunctions_Value(-2.3)_);
				Model_TestRealFunctions_Value(-2.3)_Value(-2.3).result.reset(new OutputPin());
				this->addToElementRepository("Value(-2.3).result", Model_TestRealFunctions_Value(-2.3)_Value(-2.3).result);
					Model_TestRealFunctions_Value(-2.3)_Value(-2.3).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Value(-2.3)_Value(-2.3).result_);
					Model_TestRealFunctions_Value(-2.3)_Value(-2.3).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Value(-2.3)_Value(-2.3).result_);
			Model_TestRealFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_PlusResult.reset(new Parameter());
			this->addToElementRepository("PlusResult", Model_TestRealFunctions_PlusResult);
			Model_TestRealFunctions_Call(Abs).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Abs)", Model_TestRealFunctions_Call(Abs));
				Model_TestRealFunctions_Call(Abs)_Abs.result.reset(new OutputPin());
				this->addToElementRepository("Abs.result", Model_TestRealFunctions_Call(Abs)_Abs.result);
					Model_TestRealFunctions_Call(Abs)_Abs.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Abs)_Abs.result_);
					Model_TestRealFunctions_Call(Abs)_Abs.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Abs)_Abs.result_);
				Model_TestRealFunctions_Call(Abs)_Abs.x.reset(new InputPin());
				this->addToElementRepository("Abs.x", Model_TestRealFunctions_Call(Abs)_Abs.x);
					Model_TestRealFunctions_Call(Abs)_Abs.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Abs)_Abs.x_);
					Model_TestRealFunctions_Call(Abs)_Abs.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Abs)_Abs.x_);
			Model_TestRealFunctions_Param(PlusResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(PlusResult)", Model_TestRealFunctions_Param(PlusResult));
			Model_TestRealFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_Param(RoundResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(RoundResult)", Model_TestRealFunctions_Param(RoundResult));
			Model_TestRealFunctions_Call(Neg).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Neg)", Model_TestRealFunctions_Call(Neg));
				Model_TestRealFunctions_Call(Neg)_Neg.x.reset(new InputPin());
				this->addToElementRepository("Neg.x", Model_TestRealFunctions_Call(Neg)_Neg.x);
					Model_TestRealFunctions_Call(Neg)_Neg.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Neg)_Neg.x_);
					Model_TestRealFunctions_Call(Neg)_Neg.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Neg)_Neg.x_);
				Model_TestRealFunctions_Call(Neg)_Neg.result.reset(new OutputPin());
				this->addToElementRepository("Neg.result", Model_TestRealFunctions_Call(Neg)_Neg.result);
					Model_TestRealFunctions_Call(Neg)_Neg.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Neg)_Neg.result_);
					Model_TestRealFunctions_Call(Neg)_Neg.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Neg)_Neg.result_);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_Call(Max).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Max)", Model_TestRealFunctions_Call(Max));
				Model_TestRealFunctions_Call(Max)_Max.y.reset(new InputPin());
				this->addToElementRepository("Max.y", Model_TestRealFunctions_Call(Max)_Max.y);
					Model_TestRealFunctions_Call(Max)_Max.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Max)_Max.y_);
					Model_TestRealFunctions_Call(Max)_Max.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Max)_Max.y_);
				Model_TestRealFunctions_Call(Max)_Max.x.reset(new InputPin());
				this->addToElementRepository("Max.x", Model_TestRealFunctions_Call(Max)_Max.x);
					Model_TestRealFunctions_Call(Max)_Max.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Max)_Max.x_);
					Model_TestRealFunctions_Call(Max)_Max.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Max)_Max.x_);
				Model_TestRealFunctions_Call(Max)_Max.result.reset(new OutputPin());
				this->addToElementRepository("Max.result", Model_TestRealFunctions_Call(Max)_Max.result);
					Model_TestRealFunctions_Call(Max)_Max.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Max)_Max.result_);
					Model_TestRealFunctions_Call(Max)_Max.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Max)_Max.result_);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_Fork(3.1).reset(new ForkNode());
			this->addToElementRepository("Fork(3.1)", Model_TestRealFunctions_Fork(3.1));
			Model_TestRealFunctions_NegResult.reset(new Parameter());
			this->addToElementRepository("NegResult", Model_TestRealFunctions_NegResult);
			Model_TestRealFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_DivideResult.reset(new Parameter());
			this->addToElementRepository("DivideResult", Model_TestRealFunctions_DivideResult);
			Model_TestRealFunctions_AbsResult.reset(new Parameter());
			this->addToElementRepository("AbsResult", Model_TestRealFunctions_AbsResult);
			Model_TestRealFunctions_Call(Round).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Round)", Model_TestRealFunctions_Call(Round));
				Model_TestRealFunctions_Call(Round)_Round.result.reset(new OutputPin());
				this->addToElementRepository("Round.result", Model_TestRealFunctions_Call(Round)_Round.result);
				Model_TestRealFunctions_Call(Round)_Round.x.reset(new InputPin());
				this->addToElementRepository("Round.x", Model_TestRealFunctions_Call(Round)_Round.x);
			Model_TestRealFunctions_Call(Min).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Min)", Model_TestRealFunctions_Call(Min));
				Model_TestRealFunctions_Call(Min)_Min.y.reset(new InputPin());
				this->addToElementRepository("Min.y", Model_TestRealFunctions_Call(Min)_Min.y);
					Model_TestRealFunctions_Call(Min)_Min.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Min)_Min.y_);
					Model_TestRealFunctions_Call(Min)_Min.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Min)_Min.y_);
				Model_TestRealFunctions_Call(Min)_Min.result.reset(new OutputPin());
				this->addToElementRepository("Min.result", Model_TestRealFunctions_Call(Min)_Min.result);
					Model_TestRealFunctions_Call(Min)_Min.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Min)_Min.result_);
					Model_TestRealFunctions_Call(Min)_Min.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Min)_Min.result_);
				Model_TestRealFunctions_Call(Min)_Min.x.reset(new InputPin());
				this->addToElementRepository("Min.x", Model_TestRealFunctions_Call(Min)_Min.x);
					Model_TestRealFunctions_Call(Min)_Min.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Min)_Min.x_);
					Model_TestRealFunctions_Call(Min)_Min.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestRealFunctions_Call(Min)_Min.x_);
			Model_TestRealFunctions_InvResult.reset(new Parameter());
			this->addToElementRepository("InvResult", Model_TestRealFunctions_InvResult);
			Model_TestRealFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestRealFunctions_);
				Model_TestRealFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestRealFunctions__);
			Model_TestRealFunctions_Param(FloorResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(FloorResult)", Model_TestRealFunctions_Param(FloorResult));
		Model_ForkMerge.reset(new Activity());
		this->addToElementRepository("ForkMerge", Model_ForkMerge);
			Model_ForkMerge_.reset(new ControlFlow());
			this->addToElementRepository("", Model_ForkMerge_);
				Model_ForkMerge__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkMerge__);
			Model_ForkMerge_.reset(new ControlFlow());
			this->addToElementRepository("", Model_ForkMerge_);
				Model_ForkMerge__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkMerge__);
			Model_ForkMerge_OutputNode.reset(new ActivityParameterNode());
			this->addToElementRepository("OutputNode", Model_ForkMerge_OutputNode);
			Model_ForkMerge_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_ForkMerge_);
				Model_ForkMerge__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkMerge__);
			Model_ForkMerge_Value(0).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(0)", Model_ForkMerge_Value(0));
				Model_ForkMerge_Value(0)_Value(0).result.reset(new OutputPin());
				this->addToElementRepository("Value(0).result", Model_ForkMerge_Value(0)_Value(0).result);
					Model_ForkMerge_Value(0)_Value(0).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_ForkMerge_Value(0)_Value(0).result_);
					Model_ForkMerge_Value(0)_Value(0).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_ForkMerge_Value(0)_Value(0).result_);
				Model_ForkMerge_Value(0)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkMerge_Value(0)_);
			Model_ForkMerge_.reset(new ControlFlow());
			this->addToElementRepository("", Model_ForkMerge_);
				Model_ForkMerge__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkMerge__);
			Model_ForkMerge_ForkNode.reset(new ForkNode());
			this->addToElementRepository("ForkNode", Model_ForkMerge_ForkNode);
			Model_ForkMerge_InitialNode.reset(new InitialNode());
			this->addToElementRepository("InitialNode", Model_ForkMerge_InitialNode);
			Model_ForkMerge_MergeNode.reset(new MergeNode());
			this->addToElementRepository("MergeNode", Model_ForkMerge_MergeNode);
			Model_ForkMerge_output.reset(new Parameter());
			this->addToElementRepository("output", Model_ForkMerge_output);
				Model_ForkMerge_output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_ForkMerge_output_);
				Model_ForkMerge_output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_ForkMerge_output_);
			Model_ForkMerge_.reset(new ControlFlow());
			this->addToElementRepository("", Model_ForkMerge_);
				Model_ForkMerge__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkMerge__);
		Model_ForkJoin.reset(new Activity());
		this->addToElementRepository("ForkJoin", Model_ForkJoin);
			Model_ForkJoin_InitialNode.reset(new InitialNode());
			this->addToElementRepository("InitialNode", Model_ForkJoin_InitialNode);
			Model_ForkJoin_ForkNode.reset(new ForkNode());
			this->addToElementRepository("ForkNode", Model_ForkJoin_ForkNode);
			Model_ForkJoin_FinalNode.reset(new ActivityFinalNode());
			this->addToElementRepository("FinalNode", Model_ForkJoin_FinalNode);
			Model_ForkJoin_.reset(new ControlFlow());
			this->addToElementRepository("", Model_ForkJoin_);
				Model_ForkJoin__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkJoin__);
			Model_ForkJoin_.reset(new ControlFlow());
			this->addToElementRepository("", Model_ForkJoin_);
				Model_ForkJoin__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkJoin__);
			Model_ForkJoin_.reset(new ControlFlow());
			this->addToElementRepository("", Model_ForkJoin_);
				Model_ForkJoin__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkJoin__);
			Model_ForkJoin_JoinNode.reset(new JoinNode());
			this->addToElementRepository("JoinNode", Model_ForkJoin_JoinNode);
			Model_ForkJoin_.reset(new ControlFlow());
			this->addToElementRepository("", Model_ForkJoin_);
				Model_ForkJoin__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkJoin__);
		Model_TestListFunctions.reset(new Activity());
		this->addToElementRepository("TestListFunctions", Model_TestListFunctions);
			Model_TestListFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestListFunctions_);
				Model_TestListFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestListFunctions__);
			Model_TestListFunctions_Param(size).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(size)", Model_TestListFunctions_Param(size));
			Model_TestListFunctions_concat.reset(new ActivityParameterNode());
			this->addToElementRepository("concat", Model_TestListFunctions_concat);
			Model_TestListFunctions_size.reset(new Parameter());
			this->addToElementRepository("size", Model_TestListFunctions_size);
				Model_TestListFunctions_size_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestListFunctions_size_);
				Model_TestListFunctions_size_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestListFunctions_size_);
			Model_TestListFunctions_Fork.reset(new ForkNode());
			this->addToElementRepository("Fork", Model_TestListFunctions_Fork);
			Model_TestListFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestListFunctions_);
				Model_TestListFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestListFunctions__);
			Model_TestListFunctions_Call(ListConcat).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(ListConcat)", Model_TestListFunctions_Call(ListConcat));
				Model_TestListFunctions_Call(ListConcat)_ListConcat.result.reset(new OutputPin());
				this->addToElementRepository("ListConcat.result", Model_TestListFunctions_Call(ListConcat)_ListConcat.result);
					Model_TestListFunctions_Call(ListConcat)_ListConcat.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListConcat)_ListConcat.result_);
					Model_TestListFunctions_Call(ListConcat)_ListConcat.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListConcat)_ListConcat.result_);
				Model_TestListFunctions_Call(ListConcat)_ListConcat.list2.reset(new InputPin());
				this->addToElementRepository("ListConcat.list2", Model_TestListFunctions_Call(ListConcat)_ListConcat.list2);
					Model_TestListFunctions_Call(ListConcat)_ListConcat.list2_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListConcat)_ListConcat.list2_);
					Model_TestListFunctions_Call(ListConcat)_ListConcat.list2_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListConcat)_ListConcat.list2_);
				Model_TestListFunctions_Call(ListConcat)_ListConcat.list1.reset(new InputPin());
				this->addToElementRepository("ListConcat.list1", Model_TestListFunctions_Call(ListConcat)_ListConcat.list1);
					Model_TestListFunctions_Call(ListConcat)_ListConcat.list1_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListConcat)_ListConcat.list1_);
					Model_TestListFunctions_Call(ListConcat)_ListConcat.list1_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListConcat)_ListConcat.list1_);
			Model_TestListFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestListFunctions_);
				Model_TestListFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestListFunctions__);
			Model_TestListFunctions_Call(ListGet).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(ListGet)", Model_TestListFunctions_Call(ListGet));
				Model_TestListFunctions_Call(ListGet)_ListGet.index.reset(new InputPin());
				this->addToElementRepository("ListGet.index", Model_TestListFunctions_Call(ListGet)_ListGet.index);
					Model_TestListFunctions_Call(ListGet)_ListGet.index_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListGet)_ListGet.index_);
					Model_TestListFunctions_Call(ListGet)_ListGet.index_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListGet)_ListGet.index_);
				Model_TestListFunctions_Call(ListGet)_ListGet.list.reset(new InputPin());
				this->addToElementRepository("ListGet.list", Model_TestListFunctions_Call(ListGet)_ListGet.list);
					Model_TestListFunctions_Call(ListGet)_ListGet.list_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListGet)_ListGet.list_);
					Model_TestListFunctions_Call(ListGet)_ListGet.list_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListGet)_ListGet.list_);
				Model_TestListFunctions_Call(ListGet)_ListGet.result.reset(new OutputPin());
				this->addToElementRepository("ListGet.result", Model_TestListFunctions_Call(ListGet)_ListGet.result);
					Model_TestListFunctions_Call(ListGet)_ListGet.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListGet)_ListGet.result_);
					Model_TestListFunctions_Call(ListGet)_ListGet.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListGet)_ListGet.result_);
			Model_TestListFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestListFunctions_);
				Model_TestListFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestListFunctions__);
			Model_TestListFunctions_Call(ListSize).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(ListSize)", Model_TestListFunctions_Call(ListSize));
				Model_TestListFunctions_Call(ListSize)_ListSize.list.reset(new InputPin());
				this->addToElementRepository("ListSize.list", Model_TestListFunctions_Call(ListSize)_ListSize.list);
					Model_TestListFunctions_Call(ListSize)_ListSize.list_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListSize)_ListSize.list_);
					Model_TestListFunctions_Call(ListSize)_ListSize.list_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListSize)_ListSize.list_);
				Model_TestListFunctions_Call(ListSize)_ListSize.result.reset(new OutputPin());
				this->addToElementRepository("ListSize.result", Model_TestListFunctions_Call(ListSize)_ListSize.result);
					Model_TestListFunctions_Call(ListSize)_ListSize.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListSize)_ListSize.result_);
					Model_TestListFunctions_Call(ListSize)_ListSize.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestListFunctions_Call(ListSize)_ListSize.result_);
			Model_TestListFunctions_Value(index).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(index)", Model_TestListFunctions_Value(index));
				Model_TestListFunctions_Value(index)_Value(index).result.reset(new OutputPin());
				this->addToElementRepository("Value(index).result", Model_TestListFunctions_Value(index)_Value(index).result);
					Model_TestListFunctions_Value(index)_Value(index).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestListFunctions_Value(index)_Value(index).result_);
					Model_TestListFunctions_Value(index)_Value(index).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestListFunctions_Value(index)_Value(index).result_);
				Model_TestListFunctions_Value(index)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestListFunctions_Value(index)_);
			Model_TestListFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestListFunctions_);
				Model_TestListFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestListFunctions__);
			Model_TestListFunctions_Call(GenerateListTestData).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(GenerateListTestData)", Model_TestListFunctions_Call(GenerateListTestData));
				Model_TestListFunctions_Call(GenerateListTestData)_GenData.list.reset(new OutputPin());
				this->addToElementRepository("GenData.list", Model_TestListFunctions_Call(GenerateListTestData)_GenData.list);
					Model_TestListFunctions_Call(GenerateListTestData)_GenData.list_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestListFunctions_Call(GenerateListTestData)_GenData.list_);
					Model_TestListFunctions_Call(GenerateListTestData)_GenData.list_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestListFunctions_Call(GenerateListTestData)_GenData.list_);
			Model_TestListFunctions_concat.reset(new Parameter());
			this->addToElementRepository("concat", Model_TestListFunctions_concat);
				Model_TestListFunctions_concat_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestListFunctions_concat_);
				Model_TestListFunctions_concat_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestListFunctions_concat_);
			Model_TestListFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestListFunctions_);
				Model_TestListFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestListFunctions__);
			Model_TestListFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestListFunctions_);
				Model_TestListFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestListFunctions__);
			Model_TestListFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestListFunctions_);
				Model_TestListFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestListFunctions__);
			Model_TestListFunctions_Param(element).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(element)", Model_TestListFunctions_Param(element));
			Model_TestListFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestListFunctions_);
				Model_TestListFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestListFunctions__);
			Model_TestListFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestListFunctions_);
				Model_TestListFunctions__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestListFunctions__);
			Model_TestListFunctions_element.reset(new Parameter());
			this->addToElementRepository("element", Model_TestListFunctions_element);
				Model_TestListFunctions_element_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestListFunctions_element_);
				Model_TestListFunctions_element_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestListFunctions_element_);
			Model_TestListFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestListFunctions_);
				Model_TestListFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestListFunctions__);
		Model_TestCallAccepter.reset(new Activity());
		this->addToElementRepository("TestCallAccepter", Model_TestCallAccepter);
			Model_TestCallAccepter_Accept(test).reset(new AcceptCallAction());
			this->addToElementRepository("Accept(test)", Model_TestCallAccepter_Accept(test));
				Model_TestCallAccepter_Accept(test)_Accept(test).result.reset(new OutputPin());
				this->addToElementRepository("Accept(test).result", Model_TestCallAccepter_Accept(test)_Accept(test).result);
				Model_TestCallAccepter_Accept(test)_Accept(test).returnInfo.reset(new OutputPin());
				this->addToElementRepository("Accept(test).returnInfo", Model_TestCallAccepter_Accept(test)_Accept(test).returnInfo);
				Model_TestCallAccepter_Accept(test)_.reset(new Trigger());
				this->addToElementRepository("", Model_TestCallAccepter_Accept(test)_);
			Model_TestCallAccepter_Reply(test).reset(new ReplyAction());
			this->addToElementRepository("Reply(test)", Model_TestCallAccepter_Reply(test));
				Model_TestCallAccepter_Reply(test)_Reply(test).replyValue.reset(new InputPin());
				this->addToElementRepository("Reply(test).replyValue", Model_TestCallAccepter_Reply(test)_Reply(test).replyValue);
				Model_TestCallAccepter_Reply(test)_Reply(test).returnInfo.reset(new InputPin());
				this->addToElementRepository("Reply(test).returnInfo", Model_TestCallAccepter_Reply(test)_Reply(test).returnInfo);
			Model_TestCallAccepter_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCallAccepter_);
				Model_TestCallAccepter__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallAccepter__);
			Model_TestCallAccepter_.reset(new InitialNode());
			this->addToElementRepository("", Model_TestCallAccepter_);
			Model_TestCallAccepter_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCallAccepter_);
				Model_TestCallAccepter__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallAccepter__);
			Model_TestCallAccepter_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestCallAccepter_);
				Model_TestCallAccepter__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallAccepter__);
			Model_TestCallAccepter_test.reset(new Operation());
			this->addToElementRepository("test", Model_TestCallAccepter_test);
				Model_TestCallAccepter_test_input.reset(new Parameter());
				this->addToElementRepository("input", Model_TestCallAccepter_test_input);
				Model_TestCallAccepter_test_output.reset(new Parameter());
				this->addToElementRepository("output", Model_TestCallAccepter_test_output);
		Model_CompositeAssociation.reset(new Association());
		this->addToElementRepository("CompositeAssociation", Model_CompositeAssociation);
			Model_CompositeAssociation_c2.reset(new Property());
			this->addToElementRepository("c2", Model_CompositeAssociation_c2);
			Model_CompositeAssociation_composite.reset(new Property());
			this->addToElementRepository("composite", Model_CompositeAssociation_composite);
		Model_.reset(new SignalEvent());
		this->addToElementRepository("", Model_);
		Model_TestSignal.reset(new Signal());
		this->addToElementRepository("TestSignal", Model_TestSignal);
		Model_TestSignalReceiver.reset(new Activity());
		this->addToElementRepository("TestSignalReceiver", Model_TestSignalReceiver);
			Model_TestSignalReceiver_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestSignalReceiver_);
				Model_TestSignalReceiver__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSignalReceiver__);
			Model_TestSignalReceiver_.reset(new InitialNode());
			this->addToElementRepository("", Model_TestSignalReceiver_);
			Model_TestSignalReceiver_Output(testSignalOut).reset(new ActivityParameterNode());
			this->addToElementRepository("Output(testSignalOut)", Model_TestSignalReceiver_Output(testSignalOut));
			Model_TestSignalReceiver_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSignalReceiver_);
				Model_TestSignalReceiver__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSignalReceiver__);
			Model_TestSignalReceiver_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSignalReceiver_);
				Model_TestSignalReceiver__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSignalReceiver__);
			Model_TestSignalReceiver_Fork(signal).reset(new ForkNode());
			this->addToElementRepository("Fork(signal)", Model_TestSignalReceiver_Fork(signal));
			Model_TestSignalReceiver_Accept(TestSignal).reset(new AcceptEventAction());
			this->addToElementRepository("Accept(TestSignal)", Model_TestSignalReceiver_Accept(TestSignal));
				Model_TestSignalReceiver_Accept(TestSignal)_.reset(new Trigger());
				this->addToElementRepository("", Model_TestSignalReceiver_Accept(TestSignal)_);
				Model_TestSignalReceiver_Accept(TestSignal)_signal.reset(new OutputPin());
				this->addToElementRepository("signal", Model_TestSignalReceiver_Accept(TestSignal)_signal);
					Model_TestSignalReceiver_Accept(TestSignal)_signal_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestSignalReceiver_Accept(TestSignal)_signal_);
					Model_TestSignalReceiver_Accept(TestSignal)_signal_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestSignalReceiver_Accept(TestSignal)_signal_);
			Model_TestSignalReceiver_testSignalOut.reset(new Parameter());
			this->addToElementRepository("testSignalOut", Model_TestSignalReceiver_testSignalOut);
				Model_TestSignalReceiver_testSignalOut_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSignalReceiver_testSignalOut_);
				Model_TestSignalReceiver_testSignalOut_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSignalReceiver_testSignalOut_);
			Model_TestSignalReceiver_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSignalReceiver_);
				Model_TestSignalReceiver__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSignalReceiver__);
			Model_TestSignalReceiver_signal.reset(new Property());
			this->addToElementRepository("signal", Model_TestSignalReceiver_signal);
				Model_TestSignalReceiver_signal_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestSignalReceiver_signal_);
				Model_TestSignalReceiver_signal_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSignalReceiver_signal_);
			Model_TestSignalReceiver_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestSignalReceiver_);
				Model_TestSignalReceiver__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSignalReceiver__);
			Model_TestSignalReceiver_Write(signal).reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Write(signal)", Model_TestSignalReceiver_Write(signal));
				Model_TestSignalReceiver_Write(signal)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestSignalReceiver_Write(signal)_object);
				Model_TestSignalReceiver_Write(signal)_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestSignalReceiver_Write(signal)_value);
			Model_TestSignalReceiver_ReadSelf.reset(new ReadSelfAction());
			this->addToElementRepository("ReadSelf", Model_TestSignalReceiver_ReadSelf);
				Model_TestSignalReceiver_ReadSelf_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestSignalReceiver_ReadSelf_result);
			Model_TestSignalReceiver_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestSignalReceiver_);
				Model_TestSignalReceiver__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestSignalReceiver__);
		Model_SpecializedSignal.reset(new Signal());
		this->addToElementRepository("SpecializedSignal", Model_SpecializedSignal);
			Model_SpecializedSignal_Generalization1.reset(new Generalization());
			this->addToElementRepository("Generalization1", Model_SpecializedSignal_Generalization1);
		Model_GenerateBooleanTestData.reset(new Activity());
		this->addToElementRepository("GenerateBooleanTestData", Model_GenerateBooleanTestData);
			Model_GenerateBooleanTestData_.reset(new ControlFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_argumentData1.reset(new Parameter());
			this->addToElementRepository("argumentData1", Model_GenerateBooleanTestData_argumentData1);
				Model_GenerateBooleanTestData_argumentData1_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData_argumentData1_);
				Model_GenerateBooleanTestData_argumentData1_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_GenerateBooleanTestData_argumentData1_);
			Model_GenerateBooleanTestData_.reset(new ControlFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_Value(false)-2.reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(false)-2", Model_GenerateBooleanTestData_Value(false)-2);
				Model_GenerateBooleanTestData_Value(false)-2_.reset(new LiteralBoolean());
				this->addToElementRepository("", Model_GenerateBooleanTestData_Value(false)-2_);
				Model_GenerateBooleanTestData_Value(false)-2_Value(false)-2.result.reset(new OutputPin());
				this->addToElementRepository("Value(false)-2.result", Model_GenerateBooleanTestData_Value(false)-2_Value(false)-2.result);
			Model_GenerateBooleanTestData_Value(false)-3.reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(false)-3", Model_GenerateBooleanTestData_Value(false)-3);
				Model_GenerateBooleanTestData_Value(false)-3_Value(false)-3.result.reset(new OutputPin());
				this->addToElementRepository("Value(false)-3.result", Model_GenerateBooleanTestData_Value(false)-3_Value(false)-3.result);
				Model_GenerateBooleanTestData_Value(false)-3_.reset(new LiteralBoolean());
				this->addToElementRepository("", Model_GenerateBooleanTestData_Value(false)-3_);
			Model_GenerateBooleanTestData_.reset(new ControlFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_argumentData2.reset(new Parameter());
			this->addToElementRepository("argumentData2", Model_GenerateBooleanTestData_argumentData2);
				Model_GenerateBooleanTestData_argumentData2_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData_argumentData2_);
				Model_GenerateBooleanTestData_argumentData2_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_GenerateBooleanTestData_argumentData2_);
			Model_GenerateBooleanTestData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_.reset(new ControlFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_Value(true)-1.reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(true)-1", Model_GenerateBooleanTestData_Value(true)-1);
				Model_GenerateBooleanTestData_Value(true)-1_Value(true)-1.result.reset(new OutputPin());
				this->addToElementRepository("Value(true)-1.result", Model_GenerateBooleanTestData_Value(true)-1_Value(true)-1.result);
				Model_GenerateBooleanTestData_Value(true)-1_.reset(new LiteralBoolean());
				this->addToElementRepository("", Model_GenerateBooleanTestData_Value(true)-1_);
			Model_GenerateBooleanTestData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_Value(false)-1.reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(false)-1", Model_GenerateBooleanTestData_Value(false)-1);
				Model_GenerateBooleanTestData_Value(false)-1_Value(false)-1.result.reset(new OutputPin());
				this->addToElementRepository("Value(false)-1.result", Model_GenerateBooleanTestData_Value(false)-1_Value(false)-1.result);
				Model_GenerateBooleanTestData_Value(false)-1_.reset(new LiteralBoolean());
				this->addToElementRepository("", Model_GenerateBooleanTestData_Value(false)-1_);
			Model_GenerateBooleanTestData_Value(true)-3.reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(true)-3", Model_GenerateBooleanTestData_Value(true)-3);
				Model_GenerateBooleanTestData_Value(true)-3_.reset(new LiteralBoolean());
				this->addToElementRepository("", Model_GenerateBooleanTestData_Value(true)-3_);
				Model_GenerateBooleanTestData_Value(true)-3_Value(true)-3.result.reset(new OutputPin());
				this->addToElementRepository("Value(true)-3.result", Model_GenerateBooleanTestData_Value(true)-3_Value(true)-3.result);
			Model_GenerateBooleanTestData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_Value(true)-2.reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(true)-2", Model_GenerateBooleanTestData_Value(true)-2);
				Model_GenerateBooleanTestData_Value(true)-2_.reset(new LiteralBoolean());
				this->addToElementRepository("", Model_GenerateBooleanTestData_Value(true)-2_);
				Model_GenerateBooleanTestData_Value(true)-2_Value(true)-2.result.reset(new OutputPin());
				this->addToElementRepository("Value(true)-2.result", Model_GenerateBooleanTestData_Value(true)-2_Value(true)-2.result);
			Model_GenerateBooleanTestData_Value(false)-4.reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(false)-4", Model_GenerateBooleanTestData_Value(false)-4);
				Model_GenerateBooleanTestData_Value(false)-4_.reset(new LiteralBoolean());
				this->addToElementRepository("", Model_GenerateBooleanTestData_Value(false)-4_);
				Model_GenerateBooleanTestData_Value(false)-4_Value(false)-4.result.reset(new OutputPin());
				this->addToElementRepository("Value(false)-4.result", Model_GenerateBooleanTestData_Value(false)-4_Value(false)-4.result);
			Model_GenerateBooleanTestData_.reset(new ControlFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_Param(argumentData1).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(argumentData1)", Model_GenerateBooleanTestData_Param(argumentData1));
			Model_GenerateBooleanTestData_.reset(new ControlFlow());
			this->addToElementRepository("", Model_GenerateBooleanTestData_);
				Model_GenerateBooleanTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateBooleanTestData__);
			Model_GenerateBooleanTestData_Value(true)-4.reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(true)-4", Model_GenerateBooleanTestData_Value(true)-4);
				Model_GenerateBooleanTestData_Value(true)-4_.reset(new LiteralBoolean());
				this->addToElementRepository("", Model_GenerateBooleanTestData_Value(true)-4_);
				Model_GenerateBooleanTestData_Value(true)-4_Value(true)-4.result.reset(new OutputPin());
				this->addToElementRepository("Value(true)-4.result", Model_GenerateBooleanTestData_Value(true)-4_Value(true)-4.result);
			Model_GenerateBooleanTestData_Param(argumentData2).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(argumentData2)", Model_GenerateBooleanTestData_Param(argumentData2));
		Model_TestClassExtentReader.reset(new Activity());
		this->addToElementRepository("TestClassExtentReader", Model_TestClassExtentReader);
			Model_TestClassExtentReader_object.reset(new Parameter());
			this->addToElementRepository("object", Model_TestClassExtentReader_object);
				Model_TestClassExtentReader_object_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassExtentReader_object_);
				Model_TestClassExtentReader_object_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassExtentReader_object_);
			Model_TestClassExtentReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassExtentReader_);
				Model_TestClassExtentReader__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassExtentReader__);
			Model_TestClassExtentReader_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestClassExtentReader_);
				Model_TestClassExtentReader__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassExtentReader__);
			Model_TestClassExtentReader_Create(TestClass).reset(new CreateObjectAction());
			this->addToElementRepository("Create(TestClass)", Model_TestClassExtentReader_Create(TestClass));
				Model_TestClassExtentReader_Create(TestClass)_Create.result.reset(new OutputPin());
				this->addToElementRepository("Create.result", Model_TestClassExtentReader_Create(TestClass)_Create.result);
					Model_TestClassExtentReader_Create(TestClass)_Create.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassExtentReader_Create(TestClass)_Create.result_);
					Model_TestClassExtentReader_Create(TestClass)_Create.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassExtentReader_Create(TestClass)_Create.result_);
			Model_TestClassExtentReader_extent.reset(new Parameter());
			this->addToElementRepository("extent", Model_TestClassExtentReader_extent);
				Model_TestClassExtentReader_extent_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassExtentReader_extent_);
				Model_TestClassExtentReader_extent_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassExtentReader_extent_);
			Model_TestClassExtentReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassExtentReader_);
				Model_TestClassExtentReader__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassExtentReader__);
			Model_TestClassExtentReader_Param(extent).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(extent)", Model_TestClassExtentReader_Param(extent));
			Model_TestClassExtentReader_ReadExtent(TestClass).reset(new ReadExtentAction());
			this->addToElementRepository("ReadExtent(TestClass)", Model_TestClassExtentReader_ReadExtent(TestClass));
				Model_TestClassExtentReader_ReadExtent(TestClass)_ReadExtent.result.reset(new OutputPin());
				this->addToElementRepository("ReadExtent.result", Model_TestClassExtentReader_ReadExtent(TestClass)_ReadExtent.result);
					Model_TestClassExtentReader_ReadExtent(TestClass)_ReadExtent.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassExtentReader_ReadExtent(TestClass)_ReadExtent.result_);
					Model_TestClassExtentReader_ReadExtent(TestClass)_ReadExtent.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassExtentReader_ReadExtent(TestClass)_ReadExtent.result_);
			Model_TestClassExtentReader_Param(object).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(object)", Model_TestClassExtentReader_Param(object));
		Model_TestStringFunctions.reset(new Activity());
		this->addToElementRepository("TestStringFunctions", Model_TestStringFunctions);
			Model_TestStringFunctions_SizeResult.reset(new Parameter());
			this->addToElementRepository("SizeResult", Model_TestStringFunctions_SizeResult);
				Model_TestStringFunctions_SizeResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestStringFunctions_SizeResult_);
				Model_TestStringFunctions_SizeResult_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions_SizeResult_);
			Model_TestStringFunctions_Call(Size).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Size)", Model_TestStringFunctions_Call(Size));
				Model_TestStringFunctions_Call(Size)_Size.x.reset(new InputPin());
				this->addToElementRepository("Size.x", Model_TestStringFunctions_Call(Size)_Size.x);
					Model_TestStringFunctions_Call(Size)_Size.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Size)_Size.x_);
					Model_TestStringFunctions_Call(Size)_Size.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Size)_Size.x_);
				Model_TestStringFunctions_Call(Size)_Size.result.reset(new OutputPin());
				this->addToElementRepository("Size.result", Model_TestStringFunctions_Call(Size)_Size.result);
					Model_TestStringFunctions_Call(Size)_Size.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Size)_Size.result_);
					Model_TestStringFunctions_Call(Size)_Size.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Size)_Size.result_);
			Model_TestStringFunctions_Value(1).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(1)", Model_TestStringFunctions_Value(1));
				Model_TestStringFunctions_Value(1)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions_Value(1)_);
				Model_TestStringFunctions_Value(1)_Value(1).result.reset(new OutputPin());
				this->addToElementRepository("Value(1).result", Model_TestStringFunctions_Value(1)_Value(1).result);
					Model_TestStringFunctions_Value(1)_Value(1).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Value(1)_Value(1).result_);
					Model_TestStringFunctions_Value(1)_Value(1).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Value(1)_Value(1).result_);
			Model_TestStringFunctions_Param(ConcatResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(ConcatResult)", Model_TestStringFunctions_Param(ConcatResult));
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_Call(Substring)-1.reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Substring)-1", Model_TestStringFunctions_Call(Substring)-1);
				Model_TestStringFunctions_Call(Substring)-1_lower.reset(new InputPin());
				this->addToElementRepository("lower", Model_TestStringFunctions_Call(Substring)-1_lower);
					Model_TestStringFunctions_Call(Substring)-1_lower_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-1_lower_);
					Model_TestStringFunctions_Call(Substring)-1_lower_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-1_lower_);
				Model_TestStringFunctions_Call(Substring)-1_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestStringFunctions_Call(Substring)-1_result);
					Model_TestStringFunctions_Call(Substring)-1_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-1_result_);
					Model_TestStringFunctions_Call(Substring)-1_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-1_result_);
				Model_TestStringFunctions_Call(Substring)-1_upper.reset(new InputPin());
				this->addToElementRepository("upper", Model_TestStringFunctions_Call(Substring)-1_upper);
					Model_TestStringFunctions_Call(Substring)-1_upper_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-1_upper_);
					Model_TestStringFunctions_Call(Substring)-1_upper_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-1_upper_);
				Model_TestStringFunctions_Call(Substring)-1_x.reset(new InputPin());
				this->addToElementRepository("x", Model_TestStringFunctions_Call(Substring)-1_x);
					Model_TestStringFunctions_Call(Substring)-1_x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-1_x_);
					Model_TestStringFunctions_Call(Substring)-1_x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-1_x_);
			Model_TestStringFunctions_Value("123456789").reset(new ValueSpecificationAction());
			this->addToElementRepository("Value("123456789")", Model_TestStringFunctions_Value("123456789"));
				Model_TestStringFunctions_Value("123456789")_Value.result.reset(new OutputPin());
				this->addToElementRepository("Value.result", Model_TestStringFunctions_Value("123456789")_Value.result);
					Model_TestStringFunctions_Value("123456789")_Value.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Value("123456789")_Value.result_);
					Model_TestStringFunctions_Value("123456789")_Value.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Value("123456789")_Value.result_);
				Model_TestStringFunctions_Value("123456789")_.reset(new LiteralString());
				this->addToElementRepository("", Model_TestStringFunctions_Value("123456789")_);
			Model_TestStringFunctions_Param(Substring2Result).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(Substring2Result)", Model_TestStringFunctions_Param(Substring2Result));
			Model_TestStringFunctions_Call(Concat).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Concat)", Model_TestStringFunctions_Call(Concat));
				Model_TestStringFunctions_Call(Concat)_Concat.y.reset(new InputPin());
				this->addToElementRepository("Concat.y", Model_TestStringFunctions_Call(Concat)_Concat.y);
					Model_TestStringFunctions_Call(Concat)_Concat.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Concat)_Concat.y_);
					Model_TestStringFunctions_Call(Concat)_Concat.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Concat)_Concat.y_);
				Model_TestStringFunctions_Call(Concat)_Concat.x.reset(new InputPin());
				this->addToElementRepository("Concat.x", Model_TestStringFunctions_Call(Concat)_Concat.x);
					Model_TestStringFunctions_Call(Concat)_Concat.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Concat)_Concat.x_);
					Model_TestStringFunctions_Call(Concat)_Concat.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Concat)_Concat.x_);
				Model_TestStringFunctions_Call(Concat)_Concat.result.reset(new OutputPin());
				this->addToElementRepository("Concat.result", Model_TestStringFunctions_Call(Concat)_Concat.result);
					Model_TestStringFunctions_Call(Concat)_Concat.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Concat)_Concat.result_);
					Model_TestStringFunctions_Call(Concat)_Concat.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Concat)_Concat.result_);
			Model_TestStringFunctions_Fork(Substring-2).reset(new ForkNode());
			this->addToElementRepository("Fork(Substring-2)", Model_TestStringFunctions_Fork(Substring-2));
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_Fork(Value).reset(new ForkNode());
			this->addToElementRepository("Fork(Value)", Model_TestStringFunctions_Fork(Value));
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_Param(SizeResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(SizeResult)", Model_TestStringFunctions_Param(SizeResult));
			Model_TestStringFunctions_Substring1Result.reset(new Parameter());
			this->addToElementRepository("Substring1Result", Model_TestStringFunctions_Substring1Result);
				Model_TestStringFunctions_Substring1Result_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions_Substring1Result_);
				Model_TestStringFunctions_Substring1Result_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestStringFunctions_Substring1Result_);
			Model_TestStringFunctions_Value(9).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(9)", Model_TestStringFunctions_Value(9));
				Model_TestStringFunctions_Value(9)_Value(9).result.reset(new OutputPin());
				this->addToElementRepository("Value(9).result", Model_TestStringFunctions_Value(9)_Value(9).result);
					Model_TestStringFunctions_Value(9)_Value(9).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Value(9)_Value(9).result_);
					Model_TestStringFunctions_Value(9)_Value(9).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Value(9)_Value(9).result_);
				Model_TestStringFunctions_Value(9)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions_Value(9)_);
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_Call(Substring)-2.reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Substring)-2", Model_TestStringFunctions_Call(Substring)-2);
				Model_TestStringFunctions_Call(Substring)-2_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestStringFunctions_Call(Substring)-2_result);
					Model_TestStringFunctions_Call(Substring)-2_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-2_result_);
					Model_TestStringFunctions_Call(Substring)-2_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-2_result_);
				Model_TestStringFunctions_Call(Substring)-2_lower.reset(new InputPin());
				this->addToElementRepository("lower", Model_TestStringFunctions_Call(Substring)-2_lower);
					Model_TestStringFunctions_Call(Substring)-2_lower_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-2_lower_);
					Model_TestStringFunctions_Call(Substring)-2_lower_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-2_lower_);
				Model_TestStringFunctions_Call(Substring)-2_x.reset(new InputPin());
				this->addToElementRepository("x", Model_TestStringFunctions_Call(Substring)-2_x);
					Model_TestStringFunctions_Call(Substring)-2_x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-2_x_);
					Model_TestStringFunctions_Call(Substring)-2_x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-2_x_);
				Model_TestStringFunctions_Call(Substring)-2_upper.reset(new InputPin());
				this->addToElementRepository("upper", Model_TestStringFunctions_Call(Substring)-2_upper);
					Model_TestStringFunctions_Call(Substring)-2_upper_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-2_upper_);
					Model_TestStringFunctions_Call(Substring)-2_upper_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Call(Substring)-2_upper_);
			Model_TestStringFunctions_Value(5).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(5)", Model_TestStringFunctions_Value(5));
				Model_TestStringFunctions_Value(5)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions_Value(5)_);
				Model_TestStringFunctions_Value(5)_Value(5).result.reset(new OutputPin());
				this->addToElementRepository("Value(5).result", Model_TestStringFunctions_Value(5)_Value(5).result);
					Model_TestStringFunctions_Value(5)_Value(5).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Value(5)_Value(5).result_);
					Model_TestStringFunctions_Value(5)_Value(5).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Value(5)_Value(5).result_);
			Model_TestStringFunctions_ConcatResult.reset(new Parameter());
			this->addToElementRepository("ConcatResult", Model_TestStringFunctions_ConcatResult);
				Model_TestStringFunctions_ConcatResult_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions_ConcatResult_);
				Model_TestStringFunctions_ConcatResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestStringFunctions_ConcatResult_);
			Model_TestStringFunctions_Value(6).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(6)", Model_TestStringFunctions_Value(6));
				Model_TestStringFunctions_Value(6)_Value(6).result.reset(new OutputPin());
				this->addToElementRepository("Value(6).result", Model_TestStringFunctions_Value(6)_Value(6).result);
					Model_TestStringFunctions_Value(6)_Value(6).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestStringFunctions_Value(6)_Value(6).result_);
					Model_TestStringFunctions_Value(6)_Value(6).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestStringFunctions_Value(6)_Value(6).result_);
				Model_TestStringFunctions_Value(6)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions_Value(6)_);
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_Param(Substring1Result).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(Substring1Result)", Model_TestStringFunctions_Param(Substring1Result));
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_Fork(Substring-1).reset(new ForkNode());
			this->addToElementRepository("Fork(Substring-1)", Model_TestStringFunctions_Fork(Substring-1));
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
			Model_TestStringFunctions_Substring2Result.reset(new Parameter());
			this->addToElementRepository("Substring2Result", Model_TestStringFunctions_Substring2Result);
				Model_TestStringFunctions_Substring2Result_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions_Substring2Result_);
				Model_TestStringFunctions_Substring2Result_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestStringFunctions_Substring2Result_);
			Model_TestStringFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestStringFunctions_);
				Model_TestStringFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestStringFunctions__);
		Model_TestClassAttributeValueRemover.reset(new Activity());
		this->addToElementRepository("TestClassAttributeValueRemover", Model_TestClassAttributeValueRemover);
			Model_TestClassAttributeValueRemover_objectIn.reset(new ActivityParameterNode());
			this->addToElementRepository("objectIn", Model_TestClassAttributeValueRemover_objectIn);
			Model_TestClassAttributeValueRemover_.reset(new ForkNode());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
			Model_TestClassAttributeValueRemover_Value(1).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(1)", Model_TestClassAttributeValueRemover_Value(1));
				Model_TestClassAttributeValueRemover_Value(1)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover_Value(1)_);
				Model_TestClassAttributeValueRemover_Value(1)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassAttributeValueRemover_Value(1)_result);
					Model_TestClassAttributeValueRemover_Value(1)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Value(1)_result_);
					Model_TestClassAttributeValueRemover_Value(1)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Value(1)_result_);
			Model_TestClassAttributeValueRemover_Add(y)-2.reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Add(y)-2", Model_TestClassAttributeValueRemover_Add(y)-2);
				Model_TestClassAttributeValueRemover_Add(y)-2_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestClassAttributeValueRemover_Add(y)-2_value);
					Model_TestClassAttributeValueRemover_Add(y)-2_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-2_value_);
					Model_TestClassAttributeValueRemover_Add(y)-2_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-2_value_);
				Model_TestClassAttributeValueRemover_Add(y)-2_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassAttributeValueRemover_Add(y)-2_object);
					Model_TestClassAttributeValueRemover_Add(y)-2_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-2_object_);
					Model_TestClassAttributeValueRemover_Add(y)-2_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-2_object_);
				Model_TestClassAttributeValueRemover_Add(y)-2_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassAttributeValueRemover_Add(y)-2_result);
					Model_TestClassAttributeValueRemover_Add(y)-2_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-2_result_);
					Model_TestClassAttributeValueRemover_Add(y)-2_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-2_result_);
			Model_TestClassAttributeValueRemover_Add(y)-4.reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Add(y)-4", Model_TestClassAttributeValueRemover_Add(y)-4);
				Model_TestClassAttributeValueRemover_Add(y)-4_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestClassAttributeValueRemover_Add(y)-4_value);
					Model_TestClassAttributeValueRemover_Add(y)-4_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-4_value_);
					Model_TestClassAttributeValueRemover_Add(y)-4_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-4_value_);
				Model_TestClassAttributeValueRemover_Add(y)-4_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassAttributeValueRemover_Add(y)-4_result);
					Model_TestClassAttributeValueRemover_Add(y)-4_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-4_result_);
					Model_TestClassAttributeValueRemover_Add(y)-4_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-4_result_);
				Model_TestClassAttributeValueRemover_Add(y)-4_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassAttributeValueRemover_Add(y)-4_object);
					Model_TestClassAttributeValueRemover_Add(y)-4_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-4_object_);
					Model_TestClassAttributeValueRemover_Add(y)-4_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-4_object_);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
			Model_TestClassAttributeValueRemover_objectOut.reset(new ActivityParameterNode());
			this->addToElementRepository("objectOut", Model_TestClassAttributeValueRemover_objectOut);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
			Model_TestClassAttributeValueRemover_objectOut.reset(new Parameter());
			this->addToElementRepository("objectOut", Model_TestClassAttributeValueRemover_objectOut);
				Model_TestClassAttributeValueRemover_objectOut_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover_objectOut_);
				Model_TestClassAttributeValueRemover_objectOut_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover_objectOut_);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
			Model_TestClassAttributeValueRemover_Value(2).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(2)", Model_TestClassAttributeValueRemover_Value(2));
				Model_TestClassAttributeValueRemover_Value(2)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover_Value(2)_);
				Model_TestClassAttributeValueRemover_Value(2)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassAttributeValueRemover_Value(2)_result);
					Model_TestClassAttributeValueRemover_Value(2)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Value(2)_result_);
					Model_TestClassAttributeValueRemover_Value(2)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Value(2)_result_);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
			Model_TestClassAttributeValueRemover_Add(y)-1.reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Add(y)-1", Model_TestClassAttributeValueRemover_Add(y)-1);
				Model_TestClassAttributeValueRemover_Add(y)-1_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassAttributeValueRemover_Add(y)-1_object);
					Model_TestClassAttributeValueRemover_Add(y)-1_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-1_object_);
					Model_TestClassAttributeValueRemover_Add(y)-1_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-1_object_);
				Model_TestClassAttributeValueRemover_Add(y)-1_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestClassAttributeValueRemover_Add(y)-1_value);
					Model_TestClassAttributeValueRemover_Add(y)-1_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-1_value_);
					Model_TestClassAttributeValueRemover_Add(y)-1_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-1_value_);
				Model_TestClassAttributeValueRemover_Add(y)-1_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassAttributeValueRemover_Add(y)-1_result);
					Model_TestClassAttributeValueRemover_Add(y)-1_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-1_result_);
					Model_TestClassAttributeValueRemover_Add(y)-1_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-1_result_);
			Model_TestClassAttributeValueRemover_RemoveOne(y).reset(new RemoveStructuralFeatureValueAction());
			this->addToElementRepository("RemoveOne(y)", Model_TestClassAttributeValueRemover_RemoveOne(y));
				Model_TestClassAttributeValueRemover_RemoveOne(y)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassAttributeValueRemover_RemoveOne(y)_object);
					Model_TestClassAttributeValueRemover_RemoveOne(y)_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_RemoveOne(y)_object_);
					Model_TestClassAttributeValueRemover_RemoveOne(y)_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_RemoveOne(y)_object_);
				Model_TestClassAttributeValueRemover_RemoveOne(y)_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestClassAttributeValueRemover_RemoveOne(y)_value);
					Model_TestClassAttributeValueRemover_RemoveOne(y)_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_RemoveOne(y)_value_);
					Model_TestClassAttributeValueRemover_RemoveOne(y)_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_RemoveOne(y)_value_);
				Model_TestClassAttributeValueRemover_RemoveOne(y)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassAttributeValueRemover_RemoveOne(y)_result);
					Model_TestClassAttributeValueRemover_RemoveOne(y)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_RemoveOne(y)_result_);
					Model_TestClassAttributeValueRemover_RemoveOne(y)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_RemoveOne(y)_result_);
			Model_TestClassAttributeValueRemover_objectIn.reset(new Parameter());
			this->addToElementRepository("objectIn", Model_TestClassAttributeValueRemover_objectIn);
				Model_TestClassAttributeValueRemover_objectIn_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover_objectIn_);
				Model_TestClassAttributeValueRemover_objectIn_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover_objectIn_);
			Model_TestClassAttributeValueRemover_Add(y)-3.reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Add(y)-3", Model_TestClassAttributeValueRemover_Add(y)-3);
				Model_TestClassAttributeValueRemover_Add(y)-3_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassAttributeValueRemover_Add(y)-3_result);
					Model_TestClassAttributeValueRemover_Add(y)-3_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-3_result_);
					Model_TestClassAttributeValueRemover_Add(y)-3_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-3_result_);
				Model_TestClassAttributeValueRemover_Add(y)-3_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestClassAttributeValueRemover_Add(y)-3_value);
					Model_TestClassAttributeValueRemover_Add(y)-3_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-3_value_);
					Model_TestClassAttributeValueRemover_Add(y)-3_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-3_value_);
				Model_TestClassAttributeValueRemover_Add(y)-3_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassAttributeValueRemover_Add(y)-3_object);
					Model_TestClassAttributeValueRemover_Add(y)-3_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-3_object_);
					Model_TestClassAttributeValueRemover_Add(y)-3_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_Add(y)-3_object_);
			Model_TestClassAttributeValueRemover_RemoveAll(y).reset(new RemoveStructuralFeatureValueAction());
			this->addToElementRepository("RemoveAll(y)", Model_TestClassAttributeValueRemover_RemoveAll(y));
				Model_TestClassAttributeValueRemover_RemoveAll(y)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassAttributeValueRemover_RemoveAll(y)_object);
					Model_TestClassAttributeValueRemover_RemoveAll(y)_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_RemoveAll(y)_object_);
					Model_TestClassAttributeValueRemover_RemoveAll(y)_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_RemoveAll(y)_object_);
				Model_TestClassAttributeValueRemover_RemoveAll(y)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassAttributeValueRemover_RemoveAll(y)_result);
				Model_TestClassAttributeValueRemover_RemoveAll(y)_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestClassAttributeValueRemover_RemoveAll(y)_value);
					Model_TestClassAttributeValueRemover_RemoveAll(y)_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_RemoveAll(y)_value_);
					Model_TestClassAttributeValueRemover_RemoveAll(y)_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeValueRemover_RemoveAll(y)_value_);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
			Model_TestClassAttributeValueRemover_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeValueRemover_);
				Model_TestClassAttributeValueRemover__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeValueRemover__);
		Model_TestCallSender.reset(new Activity());
		this->addToElementRepository("TestCallSender", Model_TestCallSender);
			Model_TestCallSender_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCallSender_);
				Model_TestCallSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallSender__);
			Model_TestCallSender_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCallSender_);
				Model_TestCallSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallSender__);
			Model_TestCallSender_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCallSender_);
				Model_TestCallSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallSender__);
			Model_TestCallSender_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCallSender_);
				Model_TestCallSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallSender__);
			Model_TestCallSender_Call(test).reset(new CallOperationAction());
			this->addToElementRepository("Call(test)", Model_TestCallSender_Call(test));
				Model_TestCallSender_Call(test)_Call(test).input.reset(new InputPin());
				this->addToElementRepository("Call(test).input", Model_TestCallSender_Call(test)_Call(test).input);
				Model_TestCallSender_Call(test)_Call(test).target.reset(new InputPin());
				this->addToElementRepository("Call(test).target", Model_TestCallSender_Call(test)_Call(test).target);
				Model_TestCallSender_Call(test)_Call(test).output.reset(new OutputPin());
				this->addToElementRepository("Call(test).output", Model_TestCallSender_Call(test)_Call(test).output);
			Model_TestCallSender_.reset(new ActivityFinalNode());
			this->addToElementRepository("", Model_TestCallSender_);
			Model_TestCallSender_ForkNode.reset(new ForkNode());
			this->addToElementRepository("ForkNode", Model_TestCallSender_ForkNode);
			Model_TestCallSender_Start(TestCallAccepter).reset(new StartObjectBehaviorAction());
			this->addToElementRepository("Start(TestCallAccepter)", Model_TestCallSender_Start(TestCallAccepter));
				Model_TestCallSender_Start(TestCallAccepter)_Start(TestCallAccepter).object.reset(new InputPin());
				this->addToElementRepository("Start(TestCallAccepter).object", Model_TestCallSender_Start(TestCallAccepter)_Start(TestCallAccepter).object);
			Model_TestCallSender_Create(TestCallAccepter).reset(new CreateObjectAction());
			this->addToElementRepository("Create(TestCallAccepter)", Model_TestCallSender_Create(TestCallAccepter));
				Model_TestCallSender_Create(TestCallAccepter)_Create(TestCallAccepter).result.reset(new OutputPin());
				this->addToElementRepository("Create(TestCallAccepter).result", Model_TestCallSender_Create(TestCallAccepter)_Create(TestCallAccepter).result);
			Model_TestCallSender_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCallSender_);
				Model_TestCallSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallSender__);
			Model_TestCallSender_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestCallSender_);
				Model_TestCallSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallSender__);
			Model_TestCallSender_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCallSender_);
				Model_TestCallSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallSender__);
			Model_TestCallSender_Write(value).reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Write(value)", Model_TestCallSender_Write(value));
				Model_TestCallSender_Write(value)_Write(value).object.reset(new InputPin());
				this->addToElementRepository("Write(value).object", Model_TestCallSender_Write(value)_Write(value).object);
				Model_TestCallSender_Write(value)_Write(value).value.reset(new InputPin());
				this->addToElementRepository("Write(value).value", Model_TestCallSender_Write(value)_Write(value).value);
			Model_TestCallSender_Value(0).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(0)", Model_TestCallSender_Value(0));
				Model_TestCallSender_Value(0)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestCallSender_Value(0)_);
				Model_TestCallSender_Value(0)_Value(0).result.reset(new OutputPin());
				this->addToElementRepository("Value(0).result", Model_TestCallSender_Value(0)_Value(0).result);
			Model_TestCallSender_ReadSelf.reset(new ReadSelfAction());
			this->addToElementRepository("ReadSelf", Model_TestCallSender_ReadSelf);
				Model_TestCallSender_ReadSelf_ReadSelf.result.reset(new OutputPin());
				this->addToElementRepository("ReadSelf.result", Model_TestCallSender_ReadSelf_ReadSelf.result);
			Model_TestCallSender_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestCallSender_);
				Model_TestCallSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallSender__);
			Model_TestCallSender_Accept(TestSignal).reset(new AcceptEventAction());
			this->addToElementRepository("Accept(TestSignal)", Model_TestCallSender_Accept(TestSignal));
				Model_TestCallSender_Accept(TestSignal)_.reset(new Trigger());
				this->addToElementRepository("", Model_TestCallSender_Accept(TestSignal)_);
			Model_TestCallSender_value.reset(new Property());
			this->addToElementRepository("value", Model_TestCallSender_value);
		Model_NodeEnabler.reset(new Activity());
		this->addToElementRepository("NodeEnabler", Model_NodeEnabler);
			Model_NodeEnabler_Output(output).reset(new ActivityParameterNode());
			this->addToElementRepository("Output(output)", Model_NodeEnabler_Output(output));
			Model_NodeEnabler_Input(input).reset(new ActivityParameterNode());
			this->addToElementRepository("Input(input)", Model_NodeEnabler_Input(input));
			Model_NodeEnabler_output.reset(new Parameter());
			this->addToElementRepository("output", Model_NodeEnabler_output);
				Model_NodeEnabler_output_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_NodeEnabler_output_);
				Model_NodeEnabler_output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_NodeEnabler_output_);
			Model_NodeEnabler_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_NodeEnabler_);
				Model_NodeEnabler__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_NodeEnabler__);
			Model_NodeEnabler_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_NodeEnabler_);
				Model_NodeEnabler__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_NodeEnabler__);
			Model_NodeEnabler_FinalNode.reset(new ActivityFinalNode());
			this->addToElementRepository("FinalNode", Model_NodeEnabler_FinalNode);
			Model_NodeEnabler_input.reset(new Parameter());
			this->addToElementRepository("input", Model_NodeEnabler_input);
				Model_NodeEnabler_input_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_NodeEnabler_input_);
				Model_NodeEnabler_input_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_NodeEnabler_input_);
			Model_NodeEnabler_.reset(new ControlFlow());
			this->addToElementRepository("", Model_NodeEnabler_);
				Model_NodeEnabler__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_NodeEnabler__);
			Model_NodeEnabler_StructuredNode.reset(new StructuredActivityNode());
			this->addToElementRepository("StructuredNode", Model_NodeEnabler_StructuredNode);
				Model_NodeEnabler_StructuredNode_Call(Copier).reset(new CallBehaviorAction());
				this->addToElementRepository("Call(Copier)", Model_NodeEnabler_StructuredNode_Call(Copier));
					Model_NodeEnabler_StructuredNode_Call(Copier)_Call(Copier).input.reset(new InputPin());
					this->addToElementRepository("Call(Copier).input", Model_NodeEnabler_StructuredNode_Call(Copier)_Call(Copier).input);
						Model_NodeEnabler_StructuredNode_Call(Copier)_Call(Copier).input_.reset(new LiteralUnlimitedNatural());
						this->addToElementRepository("", Model_NodeEnabler_StructuredNode_Call(Copier)_Call(Copier).input_);
						Model_NodeEnabler_StructuredNode_Call(Copier)_Call(Copier).input_.reset(new LiteralInteger());
						this->addToElementRepository("", Model_NodeEnabler_StructuredNode_Call(Copier)_Call(Copier).input_);
					Model_NodeEnabler_StructuredNode_Call(Copier)_Call(Copier).output.reset(new OutputPin());
					this->addToElementRepository("Call(Copier).output", Model_NodeEnabler_StructuredNode_Call(Copier)_Call(Copier).output);
						Model_NodeEnabler_StructuredNode_Call(Copier)_Call(Copier).output_.reset(new LiteralUnlimitedNatural());
						this->addToElementRepository("", Model_NodeEnabler_StructuredNode_Call(Copier)_Call(Copier).output_);
						Model_NodeEnabler_StructuredNode_Call(Copier)_Call(Copier).output_.reset(new LiteralInteger());
						this->addToElementRepository("", Model_NodeEnabler_StructuredNode_Call(Copier)_Call(Copier).output_);
		Model_GenerateListTestData.reset(new Activity());
		this->addToElementRepository("GenerateListTestData", Model_GenerateListTestData);
			Model_GenerateListTestData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_GenerateListTestData_);
				Model_GenerateListTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateListTestData__);
			Model_GenerateListTestData_Value(1).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(1)", Model_GenerateListTestData_Value(1));
				Model_GenerateListTestData_Value(1)_Value(1).result.reset(new OutputPin());
				this->addToElementRepository("Value(1).result", Model_GenerateListTestData_Value(1)_Value(1).result);
					Model_GenerateListTestData_Value(1)_Value(1).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_GenerateListTestData_Value(1)_Value(1).result_);
					Model_GenerateListTestData_Value(1)_Value(1).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_GenerateListTestData_Value(1)_Value(1).result_);
				Model_GenerateListTestData_Value(1)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateListTestData_Value(1)_);
			Model_GenerateListTestData_.reset(new ControlFlow());
			this->addToElementRepository("", Model_GenerateListTestData_);
				Model_GenerateListTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateListTestData__);
			Model_GenerateListTestData_.reset(new ControlFlow());
			this->addToElementRepository("", Model_GenerateListTestData_);
				Model_GenerateListTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateListTestData__);
			Model_GenerateListTestData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_GenerateListTestData_);
				Model_GenerateListTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateListTestData__);
			Model_GenerateListTestData_Param(list).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(list)", Model_GenerateListTestData_Param(list));
			Model_GenerateListTestData_Value(3).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(3)", Model_GenerateListTestData_Value(3));
				Model_GenerateListTestData_Value(3)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateListTestData_Value(3)_);
				Model_GenerateListTestData_Value(3)_Value(3).result.reset(new OutputPin());
				this->addToElementRepository("Value(3).result", Model_GenerateListTestData_Value(3)_Value(3).result);
					Model_GenerateListTestData_Value(3)_Value(3).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_GenerateListTestData_Value(3)_Value(3).result_);
					Model_GenerateListTestData_Value(3)_Value(3).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_GenerateListTestData_Value(3)_Value(3).result_);
			Model_GenerateListTestData_list.reset(new Parameter());
			this->addToElementRepository("list", Model_GenerateListTestData_list);
				Model_GenerateListTestData_list_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_GenerateListTestData_list_);
				Model_GenerateListTestData_list_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_GenerateListTestData_list_);
			Model_GenerateListTestData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_GenerateListTestData_);
				Model_GenerateListTestData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateListTestData__);
			Model_GenerateListTestData_Value(2).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(2)", Model_GenerateListTestData_Value(2));
				Model_GenerateListTestData_Value(2)_Value(2).result.reset(new OutputPin());
				this->addToElementRepository("Value(2).result", Model_GenerateListTestData_Value(2)_Value(2).result);
					Model_GenerateListTestData_Value(2)_Value(2).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_GenerateListTestData_Value(2)_Value(2).result_);
					Model_GenerateListTestData_Value(2)_Value(2).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_GenerateListTestData_Value(2)_Value(2).result_);
				Model_GenerateListTestData_Value(2)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_GenerateListTestData_Value(2)_);
		Model_HelloWorld.reset(new Activity());
		this->addToElementRepository("HelloWorld", Model_HelloWorld);
			Model_HelloWorld_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_HelloWorld_);
				Model_HelloWorld__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_HelloWorld__);
			Model_HelloWorld_WriteLine.reset(new CallBehaviorAction());
			this->addToElementRepository("WriteLine", Model_HelloWorld_WriteLine);
				Model_HelloWorld_WriteLine_WriteLine.value.reset(new InputPin());
				this->addToElementRepository("WriteLine.value", Model_HelloWorld_WriteLine_WriteLine.value);
				Model_HelloWorld_WriteLine_WriteLine.errorStatus.reset(new OutputPin());
				this->addToElementRepository("WriteLine.errorStatus", Model_HelloWorld_WriteLine_WriteLine.errorStatus);
			Model_HelloWorld_Value("Hello World!").reset(new ValueSpecificationAction());
			this->addToElementRepository("Value("Hello World!")", Model_HelloWorld_Value("Hello World!"));
				Model_HelloWorld_Value("Hello World!")_Value.result.reset(new OutputPin());
				this->addToElementRepository("Value.result", Model_HelloWorld_Value("Hello World!")_Value.result);
				Model_HelloWorld_Value("Hello World!")_.reset(new LiteralString());
				this->addToElementRepository("", Model_HelloWorld_Value("Hello World!")_);
		Model_TestAssociationEndWriterReader.reset(new Activity());
		this->addToElementRepository("TestAssociationEndWriterReader", Model_TestAssociationEndWriterReader);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_expected.reset(new ActivityParameterNode());
			this->addToElementRepository("expected", Model_TestAssociationEndWriterReader_expected);
			Model_TestAssociationEndWriterReader_object1.reset(new Parameter());
			this->addToElementRepository("object1", Model_TestAssociationEndWriterReader_object1);
			Model_TestAssociationEndWriterReader_Add(end2)-2.reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Add(end2)-2", Model_TestAssociationEndWriterReader_Add(end2)-2);
				Model_TestAssociationEndWriterReader_Add(end2)-2_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestAssociationEndWriterReader_Add(end2)-2_value);
					Model_TestAssociationEndWriterReader_Add(end2)-2_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-2_value_);
					Model_TestAssociationEndWriterReader_Add(end2)-2_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-2_value_);
				Model_TestAssociationEndWriterReader_Add(end2)-2_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestAssociationEndWriterReader_Add(end2)-2_object);
					Model_TestAssociationEndWriterReader_Add(end2)-2_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-2_object_);
					Model_TestAssociationEndWriterReader_Add(end2)-2_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-2_object_);
				Model_TestAssociationEndWriterReader_Add(end2)-2_insertAt.reset(new InputPin());
				this->addToElementRepository("insertAt", Model_TestAssociationEndWriterReader_Add(end2)-2_insertAt);
					Model_TestAssociationEndWriterReader_Add(end2)-2_insertAt_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-2_insertAt_);
					Model_TestAssociationEndWriterReader_Add(end2)-2_insertAt_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-2_insertAt_);
				Model_TestAssociationEndWriterReader_Add(end2)-2_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestAssociationEndWriterReader_Add(end2)-2_result);
					Model_TestAssociationEndWriterReader_Add(end2)-2_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-2_result_);
					Model_TestAssociationEndWriterReader_Add(end2)-2_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-2_result_);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_Read(end2)-1.reset(new ReadStructuralFeatureAction());
			this->addToElementRepository("Read(end2)-1", Model_TestAssociationEndWriterReader_Read(end2)-1);
				Model_TestAssociationEndWriterReader_Read(end2)-1_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestAssociationEndWriterReader_Read(end2)-1_result);
					Model_TestAssociationEndWriterReader_Read(end2)-1_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Read(end2)-1_result_);
					Model_TestAssociationEndWriterReader_Read(end2)-1_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Read(end2)-1_result_);
				Model_TestAssociationEndWriterReader_Read(end2)-1_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestAssociationEndWriterReader_Read(end2)-1_object);
					Model_TestAssociationEndWriterReader_Read(end2)-1_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Read(end2)-1_object_);
					Model_TestAssociationEndWriterReader_Read(end2)-1_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Read(end2)-1_object_);
			Model_TestAssociationEndWriterReader_RemoveAt(end2).reset(new RemoveStructuralFeatureValueAction());
			this->addToElementRepository("RemoveAt(end2)", Model_TestAssociationEndWriterReader_RemoveAt(end2));
				Model_TestAssociationEndWriterReader_RemoveAt(end2)_removeAt.reset(new InputPin());
				this->addToElementRepository("removeAt", Model_TestAssociationEndWriterReader_RemoveAt(end2)_removeAt);
					Model_TestAssociationEndWriterReader_RemoveAt(end2)_removeAt_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_RemoveAt(end2)_removeAt_);
					Model_TestAssociationEndWriterReader_RemoveAt(end2)_removeAt_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_RemoveAt(end2)_removeAt_);
				Model_TestAssociationEndWriterReader_RemoveAt(end2)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestAssociationEndWriterReader_RemoveAt(end2)_object);
					Model_TestAssociationEndWriterReader_RemoveAt(end2)_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_RemoveAt(end2)_object_);
					Model_TestAssociationEndWriterReader_RemoveAt(end2)_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_RemoveAt(end2)_object_);
				Model_TestAssociationEndWriterReader_RemoveAt(end2)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestAssociationEndWriterReader_RemoveAt(end2)_result);
					Model_TestAssociationEndWriterReader_RemoveAt(end2)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_RemoveAt(end2)_result_);
					Model_TestAssociationEndWriterReader_RemoveAt(end2)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_RemoveAt(end2)_result_);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_object1.reset(new ActivityParameterNode());
			this->addToElementRepository("object1", Model_TestAssociationEndWriterReader_object1);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_Read(end2)-2.reset(new ReadStructuralFeatureAction());
			this->addToElementRepository("Read(end2)-2", Model_TestAssociationEndWriterReader_Read(end2)-2);
				Model_TestAssociationEndWriterReader_Read(end2)-2_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestAssociationEndWriterReader_Read(end2)-2_result);
					Model_TestAssociationEndWriterReader_Read(end2)-2_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Read(end2)-2_result_);
					Model_TestAssociationEndWriterReader_Read(end2)-2_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Read(end2)-2_result_);
				Model_TestAssociationEndWriterReader_Read(end2)-2_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestAssociationEndWriterReader_Read(end2)-2_object);
					Model_TestAssociationEndWriterReader_Read(end2)-2_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Read(end2)-2_object_);
					Model_TestAssociationEndWriterReader_Read(end2)-2_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Read(end2)-2_object_);
			Model_TestAssociationEndWriterReader_.reset(new ForkNode());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_object2.reset(new ActivityParameterNode());
			this->addToElementRepository("object2", Model_TestAssociationEndWriterReader_object2);
			Model_TestAssociationEndWriterReader_output2.reset(new Parameter());
			this->addToElementRepository("output2", Model_TestAssociationEndWriterReader_output2);
				Model_TestAssociationEndWriterReader_output2_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader_output2_);
				Model_TestAssociationEndWriterReader_output2_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader_output2_);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_.reset(new ForkNode());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_object3.reset(new Parameter());
			this->addToElementRepository("object3", Model_TestAssociationEndWriterReader_object3);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_.reset(new ForkNode());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_object2.reset(new Parameter());
			this->addToElementRepository("object2", Model_TestAssociationEndWriterReader_object2);
			Model_TestAssociationEndWriterReader_Add(end2)-1.reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Add(end2)-1", Model_TestAssociationEndWriterReader_Add(end2)-1);
				Model_TestAssociationEndWriterReader_Add(end2)-1_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestAssociationEndWriterReader_Add(end2)-1_value);
					Model_TestAssociationEndWriterReader_Add(end2)-1_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-1_value_);
					Model_TestAssociationEndWriterReader_Add(end2)-1_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-1_value_);
				Model_TestAssociationEndWriterReader_Add(end2)-1_insertAt.reset(new InputPin());
				this->addToElementRepository("insertAt", Model_TestAssociationEndWriterReader_Add(end2)-1_insertAt);
					Model_TestAssociationEndWriterReader_Add(end2)-1_insertAt_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-1_insertAt_);
					Model_TestAssociationEndWriterReader_Add(end2)-1_insertAt_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-1_insertAt_);
				Model_TestAssociationEndWriterReader_Add(end2)-1_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestAssociationEndWriterReader_Add(end2)-1_object);
					Model_TestAssociationEndWriterReader_Add(end2)-1_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-1_object_);
					Model_TestAssociationEndWriterReader_Add(end2)-1_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-1_object_);
				Model_TestAssociationEndWriterReader_Add(end2)-1_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestAssociationEndWriterReader_Add(end2)-1_result);
					Model_TestAssociationEndWriterReader_Add(end2)-1_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-1_result_);
					Model_TestAssociationEndWriterReader_Add(end2)-1_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-1_result_);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_output2.reset(new ActivityParameterNode());
			this->addToElementRepository("output2", Model_TestAssociationEndWriterReader_output2);
			Model_TestAssociationEndWriterReader_Add(end2)-3.reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Add(end2)-3", Model_TestAssociationEndWriterReader_Add(end2)-3);
				Model_TestAssociationEndWriterReader_Add(end2)-3_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestAssociationEndWriterReader_Add(end2)-3_result);
					Model_TestAssociationEndWriterReader_Add(end2)-3_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-3_result_);
					Model_TestAssociationEndWriterReader_Add(end2)-3_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-3_result_);
				Model_TestAssociationEndWriterReader_Add(end2)-3_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestAssociationEndWriterReader_Add(end2)-3_object);
					Model_TestAssociationEndWriterReader_Add(end2)-3_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-3_object_);
					Model_TestAssociationEndWriterReader_Add(end2)-3_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-3_object_);
				Model_TestAssociationEndWriterReader_Add(end2)-3_insertAt.reset(new InputPin());
				this->addToElementRepository("insertAt", Model_TestAssociationEndWriterReader_Add(end2)-3_insertAt);
					Model_TestAssociationEndWriterReader_Add(end2)-3_insertAt_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-3_insertAt_);
					Model_TestAssociationEndWriterReader_Add(end2)-3_insertAt_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-3_insertAt_);
				Model_TestAssociationEndWriterReader_Add(end2)-3_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestAssociationEndWriterReader_Add(end2)-3_value);
					Model_TestAssociationEndWriterReader_Add(end2)-3_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-3_value_);
					Model_TestAssociationEndWriterReader_Add(end2)-3_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Add(end2)-3_value_);
			Model_TestAssociationEndWriterReader_.reset(new ForkNode());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
			Model_TestAssociationEndWriterReader_object3.reset(new ActivityParameterNode());
			this->addToElementRepository("object3", Model_TestAssociationEndWriterReader_object3);
			Model_TestAssociationEndWriterReader_expected.reset(new Parameter());
			this->addToElementRepository("expected", Model_TestAssociationEndWriterReader_expected);
				Model_TestAssociationEndWriterReader_expected_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader_expected_);
				Model_TestAssociationEndWriterReader_expected_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader_expected_);
			Model_TestAssociationEndWriterReader_Value(2).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(2)", Model_TestAssociationEndWriterReader_Value(2));
				Model_TestAssociationEndWriterReader_Value(2)_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader_Value(2)_);
				Model_TestAssociationEndWriterReader_Value(2)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestAssociationEndWriterReader_Value(2)_result);
					Model_TestAssociationEndWriterReader_Value(2)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Value(2)_result_);
					Model_TestAssociationEndWriterReader_Value(2)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_Value(2)_result_);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_RemoveAll(end2).reset(new RemoveStructuralFeatureValueAction());
			this->addToElementRepository("RemoveAll(end2)", Model_TestAssociationEndWriterReader_RemoveAll(end2));
				Model_TestAssociationEndWriterReader_RemoveAll(end2)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestAssociationEndWriterReader_RemoveAll(end2)_object);
					Model_TestAssociationEndWriterReader_RemoveAll(end2)_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_RemoveAll(end2)_object_);
					Model_TestAssociationEndWriterReader_RemoveAll(end2)_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_RemoveAll(end2)_object_);
				Model_TestAssociationEndWriterReader_RemoveAll(end2)_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestAssociationEndWriterReader_RemoveAll(end2)_value);
					Model_TestAssociationEndWriterReader_RemoveAll(end2)_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_RemoveAll(end2)_value_);
					Model_TestAssociationEndWriterReader_RemoveAll(end2)_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_RemoveAll(end2)_value_);
				Model_TestAssociationEndWriterReader_RemoveAll(end2)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestAssociationEndWriterReader_RemoveAll(end2)_result);
					Model_TestAssociationEndWriterReader_RemoveAll(end2)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_RemoveAll(end2)_result_);
					Model_TestAssociationEndWriterReader_RemoveAll(end2)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestAssociationEndWriterReader_RemoveAll(end2)_result_);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestAssociationEndWriterReader_);
				Model_TestAssociationEndWriterReader__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader__);
			Model_TestAssociationEndWriterReader_Value(*).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(*)", Model_TestAssociationEndWriterReader_Value(*));
				Model_TestAssociationEndWriterReader_Value(*)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestAssociationEndWriterReader_Value(*)_result);
				Model_TestAssociationEndWriterReader_Value(*)_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader_Value(*)_);
			Model_TestAssociationEndWriterReader_output1.reset(new Parameter());
			this->addToElementRepository("output1", Model_TestAssociationEndWriterReader_output1);
				Model_TestAssociationEndWriterReader_output1_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader_output1_);
				Model_TestAssociationEndWriterReader_output1_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestAssociationEndWriterReader_output1_);
			Model_TestAssociationEndWriterReader_output1.reset(new ActivityParameterNode());
			this->addToElementRepository("output1", Model_TestAssociationEndWriterReader_output1);
		Model_ActiveClassBehaviorSender.reset(new Activity());
		this->addToElementRepository("ActiveClassBehaviorSender", Model_ActiveClassBehaviorSender);
			Model_ActiveClassBehaviorSender_Send(OtherSignal).reset(new SendSignalAction());
			this->addToElementRepository("Send(OtherSignal)", Model_ActiveClassBehaviorSender_Send(OtherSignal));
				Model_ActiveClassBehaviorSender_Send(OtherSignal)_target.reset(new InputPin());
				this->addToElementRepository("target", Model_ActiveClassBehaviorSender_Send(OtherSignal)_target);
					Model_ActiveClassBehaviorSender_Send(OtherSignal)_target_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_ActiveClassBehaviorSender_Send(OtherSignal)_target_);
					Model_ActiveClassBehaviorSender_Send(OtherSignal)_target_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_ActiveClassBehaviorSender_Send(OtherSignal)_target_);
			Model_ActiveClassBehaviorSender_Create(ActiveClass).reset(new CreateObjectAction());
			this->addToElementRepository("Create(ActiveClass)", Model_ActiveClassBehaviorSender_Create(ActiveClass));
				Model_ActiveClassBehaviorSender_Create(ActiveClass)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_ActiveClassBehaviorSender_Create(ActiveClass)_result);
					Model_ActiveClassBehaviorSender_Create(ActiveClass)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_ActiveClassBehaviorSender_Create(ActiveClass)_result_);
					Model_ActiveClassBehaviorSender_Create(ActiveClass)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_ActiveClassBehaviorSender_Create(ActiveClass)_result_);
			Model_ActiveClassBehaviorSender_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_ActiveClassBehaviorSender_);
				Model_ActiveClassBehaviorSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_ActiveClassBehaviorSender__);
			Model_ActiveClassBehaviorSender_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_ActiveClassBehaviorSender_);
				Model_ActiveClassBehaviorSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_ActiveClassBehaviorSender__);
			Model_ActiveClassBehaviorSender_Start(ActiveClass).reset(new StartObjectBehaviorAction());
			this->addToElementRepository("Start(ActiveClass)", Model_ActiveClassBehaviorSender_Start(ActiveClass));
				Model_ActiveClassBehaviorSender_Start(ActiveClass)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_ActiveClassBehaviorSender_Start(ActiveClass)_object);
					Model_ActiveClassBehaviorSender_Start(ActiveClass)_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_ActiveClassBehaviorSender_Start(ActiveClass)_object_);
					Model_ActiveClassBehaviorSender_Start(ActiveClass)_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_ActiveClassBehaviorSender_Start(ActiveClass)_object_);
			Model_ActiveClassBehaviorSender_.reset(new ForkNode());
			this->addToElementRepository("", Model_ActiveClassBehaviorSender_);
			Model_ActiveClassBehaviorSender_.reset(new ControlFlow());
			this->addToElementRepository("", Model_ActiveClassBehaviorSender_);
				Model_ActiveClassBehaviorSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_ActiveClassBehaviorSender__);
			Model_ActiveClassBehaviorSender_Send(TestSignal).reset(new SendSignalAction());
			this->addToElementRepository("Send(TestSignal)", Model_ActiveClassBehaviorSender_Send(TestSignal));
				Model_ActiveClassBehaviorSender_Send(TestSignal)_target.reset(new InputPin());
				this->addToElementRepository("target", Model_ActiveClassBehaviorSender_Send(TestSignal)_target);
					Model_ActiveClassBehaviorSender_Send(TestSignal)_target_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_ActiveClassBehaviorSender_Send(TestSignal)_target_);
					Model_ActiveClassBehaviorSender_Send(TestSignal)_target_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_ActiveClassBehaviorSender_Send(TestSignal)_target_);
			Model_ActiveClassBehaviorSender_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_ActiveClassBehaviorSender_);
				Model_ActiveClassBehaviorSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_ActiveClassBehaviorSender__);
			Model_ActiveClassBehaviorSender_.reset(new ControlFlow());
			this->addToElementRepository("", Model_ActiveClassBehaviorSender_);
				Model_ActiveClassBehaviorSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_ActiveClassBehaviorSender__);
			Model_ActiveClassBehaviorSender_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_ActiveClassBehaviorSender_);
				Model_ActiveClassBehaviorSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_ActiveClassBehaviorSender__);
			Model_ActiveClassBehaviorSender_.reset(new InitialNode());
			this->addToElementRepository("", Model_ActiveClassBehaviorSender_);
			Model_ActiveClassBehaviorSender_.reset(new ControlFlow());
			this->addToElementRepository("", Model_ActiveClassBehaviorSender_);
				Model_ActiveClassBehaviorSender__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_ActiveClassBehaviorSender__);
		Model_TestUnlimitedNaturalFunctions.reset(new Activity());
		this->addToElementRepository("TestUnlimitedNaturalFunctions", Model_TestUnlimitedNaturalFunctions);
			Model_TestUnlimitedNaturalFunctions_LEResult*.reset(new Parameter());
			this->addToElementRepository("LEResult*", Model_TestUnlimitedNaturalFunctions_LEResult*);
			Model_TestUnlimitedNaturalFunctions_Call(Min).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Min)", Model_TestUnlimitedNaturalFunctions_Call(Min));
				Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.result.reset(new OutputPin());
				this->addToElementRepository("Min.result", Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.result);
					Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.result_);
					Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.result_);
				Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.y.reset(new InputPin());
				this->addToElementRepository("Min.y", Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.y);
					Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.y_);
					Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.y_);
				Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.x.reset(new InputPin());
				this->addToElementRepository("Min.x", Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.x);
					Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.x_);
					Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(Min)_Min.x_);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_Call(LE).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(LE)", Model_TestUnlimitedNaturalFunctions_Call(LE));
				Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.x.reset(new InputPin());
				this->addToElementRepository("LE.x", Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.x);
					Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.x_);
					Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.x_);
				Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.y.reset(new InputPin());
				this->addToElementRepository("LE.y", Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.y);
					Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.y_);
					Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.y_);
				Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.result.reset(new OutputPin());
				this->addToElementRepository("LE.result", Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.result);
					Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.result_);
					Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LE)_LE.result_);
			Model_TestUnlimitedNaturalFunctions_Param(GEResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(GEResult)", Model_TestUnlimitedNaturalFunctions_Param(GEResult));
			Model_TestUnlimitedNaturalFunctions_MinResult.reset(new Parameter());
			this->addToElementRepository("MinResult", Model_TestUnlimitedNaturalFunctions_MinResult);
			Model_TestUnlimitedNaturalFunctions_GTResult*.reset(new Parameter());
			this->addToElementRepository("GTResult*", Model_TestUnlimitedNaturalFunctions_GTResult*);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_Value(3).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(3)", Model_TestUnlimitedNaturalFunctions_Value(3));
				Model_TestUnlimitedNaturalFunctions_Value(3)_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Value(3)_);
				Model_TestUnlimitedNaturalFunctions_Value(3)_Value(3).result.reset(new OutputPin());
				this->addToElementRepository("Value(3).result", Model_TestUnlimitedNaturalFunctions_Value(3)_Value(3).result);
					Model_TestUnlimitedNaturalFunctions_Value(3)_Value(3).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Value(3)_Value(3).result_);
					Model_TestUnlimitedNaturalFunctions_Value(3)_Value(3).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Value(3)_Value(3).result_);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_Param(GTResult*).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(GTResult*)", Model_TestUnlimitedNaturalFunctions_Param(GTResult*));
			Model_TestUnlimitedNaturalFunctions_Call(LT)*.reset(new CallBehaviorAction());
			this->addToElementRepository("Call(LT)*", Model_TestUnlimitedNaturalFunctions_Call(LT)*);
				Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.x.reset(new InputPin());
				this->addToElementRepository("LT.x", Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.x);
					Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.x_);
					Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.x_);
				Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.y.reset(new InputPin());
				this->addToElementRepository("LT.y", Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.y);
					Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.y_);
					Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.y_);
				Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.result.reset(new OutputPin());
				this->addToElementRepository("LT.result", Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.result);
					Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.result_);
					Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LT)*_LT.result_);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_Param(MinResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(MinResult)", Model_TestUnlimitedNaturalFunctions_Param(MinResult));
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_LTResult*.reset(new Parameter());
			this->addToElementRepository("LTResult*", Model_TestUnlimitedNaturalFunctions_LTResult*);
			Model_TestUnlimitedNaturalFunctions_Value(*).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(*)", Model_TestUnlimitedNaturalFunctions_Value(*));
				Model_TestUnlimitedNaturalFunctions_Value(*)_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Value(*)_);
				Model_TestUnlimitedNaturalFunctions_Value(*)_Value(*).result.reset(new OutputPin());
				this->addToElementRepository("Value(*).result", Model_TestUnlimitedNaturalFunctions_Value(*)_Value(*).result);
					Model_TestUnlimitedNaturalFunctions_Value(*)_Value(*).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Value(*)_Value(*).result_);
					Model_TestUnlimitedNaturalFunctions_Value(*)_Value(*).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Value(*)_Value(*).result_);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_Call(GT)*.reset(new CallBehaviorAction());
			this->addToElementRepository("Call(GT)*", Model_TestUnlimitedNaturalFunctions_Call(GT)*);
				Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.y.reset(new InputPin());
				this->addToElementRepository("GT.y", Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.y);
					Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.y_);
					Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.y_);
				Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.x.reset(new InputPin());
				this->addToElementRepository("GT.x", Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.x);
					Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.x_);
					Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.x_);
				Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.result.reset(new OutputPin());
				this->addToElementRepository("GT.result", Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.result);
					Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.result_);
					Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GT)*_GT.result_);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_Call(LE)*.reset(new CallBehaviorAction());
			this->addToElementRepository("Call(LE)*", Model_TestUnlimitedNaturalFunctions_Call(LE)*);
				Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.x.reset(new InputPin());
				this->addToElementRepository("LE.x", Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.x);
					Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.x_);
					Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.x_);
				Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.result.reset(new OutputPin());
				this->addToElementRepository("LE.result", Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.result);
					Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.result_);
					Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.result_);
				Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.y.reset(new InputPin());
				this->addToElementRepository("LE.y", Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.y);
					Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.y_);
					Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LE)*_LE.y_);
			Model_TestUnlimitedNaturalFunctions_GEResult*.reset(new Parameter());
			this->addToElementRepository("GEResult*", Model_TestUnlimitedNaturalFunctions_GEResult*);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_Call(GT).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(GT)", Model_TestUnlimitedNaturalFunctions_Call(GT));
				Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.y.reset(new InputPin());
				this->addToElementRepository("GT.y", Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.y);
					Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.y_);
					Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.y_);
				Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.result.reset(new OutputPin());
				this->addToElementRepository("GT.result", Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.result);
					Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.result_);
					Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.result_);
				Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.x.reset(new InputPin());
				this->addToElementRepository("GT.x", Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.x);
					Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.x_);
					Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GT)_GT.x_);
			Model_TestUnlimitedNaturalFunctions_Fork(*).reset(new ForkNode());
			this->addToElementRepository("Fork(*)", Model_TestUnlimitedNaturalFunctions_Fork(*));
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_Call(GE)*.reset(new CallBehaviorAction());
			this->addToElementRepository("Call(GE)*", Model_TestUnlimitedNaturalFunctions_Call(GE)*);
				Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.y.reset(new InputPin());
				this->addToElementRepository("GE.y", Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.y);
					Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.y_);
					Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.y_);
				Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.result.reset(new OutputPin());
				this->addToElementRepository("GE.result", Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.result);
					Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.result_);
					Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.result_);
				Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.x.reset(new InputPin());
				this->addToElementRepository("GE.x", Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.x);
					Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.x_);
					Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GE)*_GE.x_);
			Model_TestUnlimitedNaturalFunctions_Param(LEResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(LEResult)", Model_TestUnlimitedNaturalFunctions_Param(LEResult));
			Model_TestUnlimitedNaturalFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_Param(LTResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(LTResult)", Model_TestUnlimitedNaturalFunctions_Param(LTResult));
			Model_TestUnlimitedNaturalFunctions_GTResult.reset(new Parameter());
			this->addToElementRepository("GTResult", Model_TestUnlimitedNaturalFunctions_GTResult);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_Fork(2).reset(new ForkNode());
			this->addToElementRepository("Fork(2)", Model_TestUnlimitedNaturalFunctions_Fork(2));
			Model_TestUnlimitedNaturalFunctions_Param(GEResult*).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(GEResult*)", Model_TestUnlimitedNaturalFunctions_Param(GEResult*));
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_MaxResult.reset(new Parameter());
			this->addToElementRepository("MaxResult", Model_TestUnlimitedNaturalFunctions_MaxResult);
			Model_TestUnlimitedNaturalFunctions_Param(MaxResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(MaxResult)", Model_TestUnlimitedNaturalFunctions_Param(MaxResult));
			Model_TestUnlimitedNaturalFunctions_Value(2).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(2)", Model_TestUnlimitedNaturalFunctions_Value(2));
				Model_TestUnlimitedNaturalFunctions_Value(2)_Value(2).result.reset(new OutputPin());
				this->addToElementRepository("Value(2).result", Model_TestUnlimitedNaturalFunctions_Value(2)_Value(2).result);
					Model_TestUnlimitedNaturalFunctions_Value(2)_Value(2).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Value(2)_Value(2).result_);
					Model_TestUnlimitedNaturalFunctions_Value(2)_Value(2).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Value(2)_Value(2).result_);
				Model_TestUnlimitedNaturalFunctions_Value(2)_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Value(2)_);
			Model_TestUnlimitedNaturalFunctions_Call(LT).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(LT)", Model_TestUnlimitedNaturalFunctions_Call(LT));
				Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.y.reset(new InputPin());
				this->addToElementRepository("LT.y", Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.y);
					Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.y_);
					Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.y_);
				Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.result.reset(new OutputPin());
				this->addToElementRepository("LT.result", Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.result);
					Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.result_);
					Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.result_);
				Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.x.reset(new InputPin());
				this->addToElementRepository("LT.x", Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.x);
					Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.x_);
					Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(LT)_LT.x_);
			Model_TestUnlimitedNaturalFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_LTResult.reset(new Parameter());
			this->addToElementRepository("LTResult", Model_TestUnlimitedNaturalFunctions_LTResult);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_Call(Max).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Max)", Model_TestUnlimitedNaturalFunctions_Call(Max));
				Model_TestUnlimitedNaturalFunctions_Call(Max)_Max.result.reset(new OutputPin());
				this->addToElementRepository("Max.result", Model_TestUnlimitedNaturalFunctions_Call(Max)_Max.result);
					Model_TestUnlimitedNaturalFunctions_Call(Max)_Max.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(Max)_Max.result_);
					Model_TestUnlimitedNaturalFunctions_Call(Max)_Max.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(Max)_Max.result_);
				Model_TestUnlimitedNaturalFunctions_Call(Max)_Max.x.reset(new InputPin());
				this->addToElementRepository("Max.x", Model_TestUnlimitedNaturalFunctions_Call(Max)_Max.x);
					Model_TestUnlimitedNaturalFunctions_Call(Max)_Max.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(Max)_Max.x_);
					Model_TestUnlimitedNaturalFunctions_Call(Max)_Max.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(Max)_Max.x_);
				Model_TestUnlimitedNaturalFunctions_Call(Max)_Min.y.reset(new InputPin());
				this->addToElementRepository("Min.y", Model_TestUnlimitedNaturalFunctions_Call(Max)_Min.y);
					Model_TestUnlimitedNaturalFunctions_Call(Max)_Min.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(Max)_Min.y_);
					Model_TestUnlimitedNaturalFunctions_Call(Max)_Min.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(Max)_Min.y_);
			Model_TestUnlimitedNaturalFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_GEResult.reset(new Parameter());
			this->addToElementRepository("GEResult", Model_TestUnlimitedNaturalFunctions_GEResult);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_Param(GTResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(GTResult)", Model_TestUnlimitedNaturalFunctions_Param(GTResult));
			Model_TestUnlimitedNaturalFunctions_Param(LTResult*).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(LTResult*)", Model_TestUnlimitedNaturalFunctions_Param(LTResult*));
			Model_TestUnlimitedNaturalFunctions_LEResult.reset(new Parameter());
			this->addToElementRepository("LEResult", Model_TestUnlimitedNaturalFunctions_LEResult);
			Model_TestUnlimitedNaturalFunctions_Fork(3).reset(new ForkNode());
			this->addToElementRepository("Fork(3)", Model_TestUnlimitedNaturalFunctions_Fork(3));
			Model_TestUnlimitedNaturalFunctions_Call(GE).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(GE)", Model_TestUnlimitedNaturalFunctions_Call(GE));
				Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.x.reset(new InputPin());
				this->addToElementRepository("GE.x", Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.x);
					Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.x_);
					Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.x_);
				Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.result.reset(new OutputPin());
				this->addToElementRepository("GE.result", Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.result);
					Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.result_);
					Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.result_);
				Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.y.reset(new InputPin());
				this->addToElementRepository("GE.y", Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.y);
					Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.y_);
					Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_Call(GE)_GE.y_);
			Model_TestUnlimitedNaturalFunctions_Param(LEResult*).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(LEResult*)", Model_TestUnlimitedNaturalFunctions_Param(LEResult*));
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
			Model_TestUnlimitedNaturalFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions_);
				Model_TestUnlimitedNaturalFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestUnlimitedNaturalFunctions__);
		Model_TestClassAttributeWriter.reset(new Activity());
		this->addToElementRepository("TestClassAttributeWriter", Model_TestClassAttributeWriter);
			Model_TestClassAttributeWriter_objectOut.reset(new Parameter());
			this->addToElementRepository("objectOut", Model_TestClassAttributeWriter_objectOut);
				Model_TestClassAttributeWriter_objectOut_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassAttributeWriter_objectOut_);
				Model_TestClassAttributeWriter_objectOut_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeWriter_objectOut_);
			Model_TestClassAttributeWriter_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeWriter_);
				Model_TestClassAttributeWriter__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassAttributeWriter__);
			Model_TestClassAttributeWriter_Parameter(objectOut).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(objectOut)", Model_TestClassAttributeWriter_Parameter(objectOut));
			Model_TestClassAttributeWriter_value.reset(new Parameter());
			this->addToElementRepository("value", Model_TestClassAttributeWriter_value);
				Model_TestClassAttributeWriter_value_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassAttributeWriter_value_);
				Model_TestClassAttributeWriter_value_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeWriter_value_);
			Model_TestClassAttributeWriter_Parameter(objectIn).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(objectIn)", Model_TestClassAttributeWriter_Parameter(objectIn));
			Model_TestClassAttributeWriter_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeWriter_);
				Model_TestClassAttributeWriter__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassAttributeWriter__);
			Model_TestClassAttributeWriter_Value(*).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(*)", Model_TestClassAttributeWriter_Value(*));
				Model_TestClassAttributeWriter_Value(*)_Value(*).result.reset(new OutputPin());
				this->addToElementRepository("Value(*).result", Model_TestClassAttributeWriter_Value(*)_Value(*).result);
					Model_TestClassAttributeWriter_Value(*)_Value(*).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeWriter_Value(*)_Value(*).result_);
					Model_TestClassAttributeWriter_Value(*)_Value(*).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeWriter_Value(*)_Value(*).result_);
				Model_TestClassAttributeWriter_Value(*)_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeWriter_Value(*)_);
			Model_TestClassAttributeWriter_Parameter(value).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(value)", Model_TestClassAttributeWriter_Parameter(value));
			Model_TestClassAttributeWriter_Add(y).reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Add(y)", Model_TestClassAttributeWriter_Add(y));
				Model_TestClassAttributeWriter_Add(y)_Add(y).insertAt.reset(new InputPin());
				this->addToElementRepository("Add(y).insertAt", Model_TestClassAttributeWriter_Add(y)_Add(y).insertAt);
					Model_TestClassAttributeWriter_Add(y)_Add(y).insertAt_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeWriter_Add(y)_Add(y).insertAt_);
					Model_TestClassAttributeWriter_Add(y)_Add(y).insertAt_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeWriter_Add(y)_Add(y).insertAt_);
				Model_TestClassAttributeWriter_Add(y)_Add(y).value.reset(new InputPin());
				this->addToElementRepository("Add(y).value", Model_TestClassAttributeWriter_Add(y)_Add(y).value);
					Model_TestClassAttributeWriter_Add(y)_Add(y).value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeWriter_Add(y)_Add(y).value_);
					Model_TestClassAttributeWriter_Add(y)_Add(y).value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeWriter_Add(y)_Add(y).value_);
				Model_TestClassAttributeWriter_Add(y)_Add(y).result.reset(new OutputPin());
				this->addToElementRepository("Add(y).result", Model_TestClassAttributeWriter_Add(y)_Add(y).result);
					Model_TestClassAttributeWriter_Add(y)_Add(y).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeWriter_Add(y)_Add(y).result_);
					Model_TestClassAttributeWriter_Add(y)_Add(y).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeWriter_Add(y)_Add(y).result_);
				Model_TestClassAttributeWriter_Add(y)_Add(x).object.reset(new InputPin());
				this->addToElementRepository("Add(x).object", Model_TestClassAttributeWriter_Add(y)_Add(x).object);
					Model_TestClassAttributeWriter_Add(y)_Add(x).object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassAttributeWriter_Add(y)_Add(x).object_);
					Model_TestClassAttributeWriter_Add(y)_Add(x).object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassAttributeWriter_Add(y)_Add(x).object_);
			Model_TestClassAttributeWriter_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeWriter_);
				Model_TestClassAttributeWriter__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeWriter__);
			Model_TestClassAttributeWriter_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassAttributeWriter_);
				Model_TestClassAttributeWriter__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassAttributeWriter__);
			Model_TestClassAttributeWriter_objectIn.reset(new Parameter());
			this->addToElementRepository("objectIn", Model_TestClassAttributeWriter_objectIn);
				Model_TestClassAttributeWriter_objectIn_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassAttributeWriter_objectIn_);
				Model_TestClassAttributeWriter_objectIn_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassAttributeWriter_objectIn_);
		Model_TestGeneralizationAssembly.reset(new Activity());
		this->addToElementRepository("TestGeneralizationAssembly", Model_TestGeneralizationAssembly);
			Model_TestGeneralizationAssembly_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestGeneralizationAssembly_);
			Model_TestGeneralizationAssembly_ActivityParameterNode.reset(new ActivityParameterNode());
			this->addToElementRepository("ActivityParameterNode", Model_TestGeneralizationAssembly_ActivityParameterNode);
			Model_TestGeneralizationAssembly_Create(Specific).reset(new CreateObjectAction());
			this->addToElementRepository("Create(Specific)", Model_TestGeneralizationAssembly_Create(Specific));
				Model_TestGeneralizationAssembly_Create(Specific)_CreateObjectAction.result.reset(new OutputPin());
				this->addToElementRepository("CreateObjectAction.result", Model_TestGeneralizationAssembly_Create(Specific)_CreateObjectAction.result);
			Model_TestGeneralizationAssembly_result.reset(new Parameter());
			this->addToElementRepository("result", Model_TestGeneralizationAssembly_result);
		Model_Specific.reset(new Class_());
		this->addToElementRepository("Specific", Model_Specific);
			Model_Specific_Generalization2.reset(new Generalization());
			this->addToElementRepository("Generalization2", Model_Specific_Generalization2);
			Model_Specific_x.reset(new Property());
			this->addToElementRepository("x", Model_Specific_x);
		Model_TestClassWriterReader.reset(new Activity());
		this->addToElementRepository("TestClassWriterReader", Model_TestClassWriterReader);
			Model_TestClassWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassWriterReader_);
				Model_TestClassWriterReader__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassWriterReader__);
			Model_TestClassWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassWriterReader_);
				Model_TestClassWriterReader__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassWriterReader__);
			Model_TestClassWriterReader_Read(x).reset(new ReadStructuralFeatureAction());
			this->addToElementRepository("Read(x)", Model_TestClassWriterReader_Read(x));
				Model_TestClassWriterReader_Read(x)_Read(x).object.reset(new InputPin());
				this->addToElementRepository("Read(x).object", Model_TestClassWriterReader_Read(x)_Read(x).object);
					Model_TestClassWriterReader_Read(x)_Read(x).object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassWriterReader_Read(x)_Read(x).object_);
					Model_TestClassWriterReader_Read(x)_Read(x).object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassWriterReader_Read(x)_Read(x).object_);
				Model_TestClassWriterReader_Read(x)_Read(x).result.reset(new OutputPin());
				this->addToElementRepository("Read(x).result", Model_TestClassWriterReader_Read(x)_Read(x).result);
					Model_TestClassWriterReader_Read(x)_Read(x).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassWriterReader_Read(x)_Read(x).result_);
					Model_TestClassWriterReader_Read(x)_Read(x).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassWriterReader_Read(x)_Read(x).result_);
			Model_TestClassWriterReader_Value(999).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(999)", Model_TestClassWriterReader_Value(999));
				Model_TestClassWriterReader_Value(999)_Value(999).result.reset(new OutputPin());
				this->addToElementRepository("Value(999).result", Model_TestClassWriterReader_Value(999)_Value(999).result);
					Model_TestClassWriterReader_Value(999)_Value(999).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassWriterReader_Value(999)_Value(999).result_);
					Model_TestClassWriterReader_Value(999)_Value(999).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassWriterReader_Value(999)_Value(999).result_);
				Model_TestClassWriterReader_Value(999)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassWriterReader_Value(999)_);
			Model_TestClassWriterReader_x.reset(new Parameter());
			this->addToElementRepository("x", Model_TestClassWriterReader_x);
				Model_TestClassWriterReader_x_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassWriterReader_x_);
				Model_TestClassWriterReader_x_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassWriterReader_x_);
			Model_TestClassWriterReader_Write(x).reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Write(x)", Model_TestClassWriterReader_Write(x));
				Model_TestClassWriterReader_Write(x)_Write(x).value.reset(new InputPin());
				this->addToElementRepository("Write(x).value", Model_TestClassWriterReader_Write(x)_Write(x).value);
					Model_TestClassWriterReader_Write(x)_Write(x).value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassWriterReader_Write(x)_Write(x).value_);
					Model_TestClassWriterReader_Write(x)_Write(x).value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassWriterReader_Write(x)_Write(x).value_);
				Model_TestClassWriterReader_Write(x)_Write(x).result.reset(new OutputPin());
				this->addToElementRepository("Write(x).result", Model_TestClassWriterReader_Write(x)_Write(x).result);
					Model_TestClassWriterReader_Write(x)_Write(x).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassWriterReader_Write(x)_Write(x).result_);
					Model_TestClassWriterReader_Write(x)_Write(x).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassWriterReader_Write(x)_Write(x).result_);
				Model_TestClassWriterReader_Write(x)_Write(x).object.reset(new InputPin());
				this->addToElementRepository("Write(x).object", Model_TestClassWriterReader_Write(x)_Write(x).object);
					Model_TestClassWriterReader_Write(x)_Write(x).object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassWriterReader_Write(x)_Write(x).object_);
					Model_TestClassWriterReader_Write(x)_Write(x).object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassWriterReader_Write(x)_Write(x).object_);
			Model_TestClassWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassWriterReader_);
				Model_TestClassWriterReader__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassWriterReader__);
			Model_TestClassWriterReader_Parameter(x).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(x)", Model_TestClassWriterReader_Parameter(x));
			Model_TestClassWriterReader_Create(TestClass).reset(new CreateObjectAction());
			this->addToElementRepository("Create(TestClass)", Model_TestClassWriterReader_Create(TestClass));
				Model_TestClassWriterReader_Create(TestClass)_Create(TestClass).result.reset(new OutputPin());
				this->addToElementRepository("Create(TestClass).result", Model_TestClassWriterReader_Create(TestClass)_Create(TestClass).result);
					Model_TestClassWriterReader_Create(TestClass)_Create(TestClass).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassWriterReader_Create(TestClass)_Create(TestClass).result_);
					Model_TestClassWriterReader_Create(TestClass)_Create(TestClass).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassWriterReader_Create(TestClass)_Create(TestClass).result_);
			Model_TestClassWriterReader_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassWriterReader_);
				Model_TestClassWriterReader__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassWriterReader__);
		Model_TestCentralBuffer.reset(new Activity());
		this->addToElementRepository("TestCentralBuffer", Model_TestCentralBuffer);
			Model_TestCentralBuffer_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestCentralBuffer_);
				Model_TestCentralBuffer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCentralBuffer__);
			Model_TestCentralBuffer_Parameter(input2).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(input2)", Model_TestCentralBuffer_Parameter(input2));
			Model_TestCentralBuffer_Parameter(input1).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(input1)", Model_TestCentralBuffer_Parameter(input1));
			Model_TestCentralBuffer_StructuredActivityNode.reset(new StructuredActivityNode());
			this->addToElementRepository("StructuredActivityNode", Model_TestCentralBuffer_StructuredActivityNode);
				Model_TestCentralBuffer_StructuredActivityNode_CentralBufferNode.reset(new CentralBufferNode());
				this->addToElementRepository("CentralBufferNode", Model_TestCentralBuffer_StructuredActivityNode_CentralBufferNode);
			Model_TestCentralBuffer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCentralBuffer_);
				Model_TestCentralBuffer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCentralBuffer__);
			Model_TestCentralBuffer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCentralBuffer_);
				Model_TestCentralBuffer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCentralBuffer__);
			Model_TestCentralBuffer_output.reset(new Parameter());
			this->addToElementRepository("output", Model_TestCentralBuffer_output);
				Model_TestCentralBuffer_output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCentralBuffer_output_);
				Model_TestCentralBuffer_output_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestCentralBuffer_output_);
			Model_TestCentralBuffer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCentralBuffer_);
				Model_TestCentralBuffer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCentralBuffer__);
			Model_TestCentralBuffer_Parameter(output).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(output)", Model_TestCentralBuffer_Parameter(output));
			Model_TestCentralBuffer_input1.reset(new Parameter());
			this->addToElementRepository("input1", Model_TestCentralBuffer_input1);
			Model_TestCentralBuffer_input2.reset(new Parameter());
			this->addToElementRepository("input2", Model_TestCentralBuffer_input2);
			Model_TestCentralBuffer_InitialNode.reset(new InitialNode());
			this->addToElementRepository("InitialNode", Model_TestCentralBuffer_InitialNode);
		Model_TestBooleanFunctions.reset(new Activity());
		this->addToElementRepository("TestBooleanFunctions", Model_TestBooleanFunctions);
			Model_TestBooleanFunctions_GenData3.reset(new CallBehaviorAction());
			this->addToElementRepository("GenData3", Model_TestBooleanFunctions_GenData3);
				Model_TestBooleanFunctions_GenData3_GenData3.argumentData1.reset(new OutputPin());
				this->addToElementRepository("GenData3.argumentData1", Model_TestBooleanFunctions_GenData3_GenData3.argumentData1);
					Model_TestBooleanFunctions_GenData3_GenData3.argumentData1_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData3_GenData3.argumentData1_);
					Model_TestBooleanFunctions_GenData3_GenData3.argumentData1_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData3_GenData3.argumentData1_);
				Model_TestBooleanFunctions_GenData3_GenData3.argumentData2.reset(new OutputPin());
				this->addToElementRepository("GenData3.argumentData2", Model_TestBooleanFunctions_GenData3_GenData3.argumentData2);
					Model_TestBooleanFunctions_GenData3_GenData3.argumentData2_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData3_GenData3.argumentData2_);
					Model_TestBooleanFunctions_GenData3_GenData3.argumentData2_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData3_GenData3.argumentData2_);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_Call(And).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(And)", Model_TestBooleanFunctions_Call(And));
				Model_TestBooleanFunctions_Call(And)_And.result.reset(new OutputPin());
				this->addToElementRepository("And.result", Model_TestBooleanFunctions_Call(And)_And.result);
					Model_TestBooleanFunctions_Call(And)_And.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(And)_And.result_);
					Model_TestBooleanFunctions_Call(And)_And.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(And)_And.result_);
				Model_TestBooleanFunctions_Call(And)_And.x.reset(new InputPin());
				this->addToElementRepository("And.x", Model_TestBooleanFunctions_Call(And)_And.x);
					Model_TestBooleanFunctions_Call(And)_And.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(And)_And.x_);
					Model_TestBooleanFunctions_Call(And)_And.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(And)_And.x_);
				Model_TestBooleanFunctions_Call(And)_And.y.reset(new InputPin());
				this->addToElementRepository("And.y", Model_TestBooleanFunctions_Call(And)_And.y);
					Model_TestBooleanFunctions_Call(And)_And.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(And)_And.y_);
					Model_TestBooleanFunctions_Call(And)_And.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(And)_And.y_);
			Model_TestBooleanFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_Param(AndResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(AndResult)", Model_TestBooleanFunctions_Param(AndResult));
			Model_TestBooleanFunctions_NotResult.reset(new Parameter());
			this->addToElementRepository("NotResult", Model_TestBooleanFunctions_NotResult);
				Model_TestBooleanFunctions_NotResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestBooleanFunctions_NotResult_);
				Model_TestBooleanFunctions_NotResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestBooleanFunctions_NotResult_);
			Model_TestBooleanFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_Param(ImpliesResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(ImpliesResult)", Model_TestBooleanFunctions_Param(ImpliesResult));
			Model_TestBooleanFunctions_Call(Not).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Not)", Model_TestBooleanFunctions_Call(Not));
				Model_TestBooleanFunctions_Call(Not)_Not.x.reset(new InputPin());
				this->addToElementRepository("Not.x", Model_TestBooleanFunctions_Call(Not)_Not.x);
					Model_TestBooleanFunctions_Call(Not)_Not.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Not)_Not.x_);
					Model_TestBooleanFunctions_Call(Not)_Not.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Not)_Not.x_);
				Model_TestBooleanFunctions_Call(Not)_Not.result.reset(new OutputPin());
				this->addToElementRepository("Not.result", Model_TestBooleanFunctions_Call(Not)_Not.result);
					Model_TestBooleanFunctions_Call(Not)_Not.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Not)_Not.result_);
					Model_TestBooleanFunctions_Call(Not)_Not.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Not)_Not.result_);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_XorResult.reset(new Parameter());
			this->addToElementRepository("XorResult", Model_TestBooleanFunctions_XorResult);
				Model_TestBooleanFunctions_XorResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestBooleanFunctions_XorResult_);
				Model_TestBooleanFunctions_XorResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestBooleanFunctions_XorResult_);
			Model_TestBooleanFunctions_Call(Or).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Or)", Model_TestBooleanFunctions_Call(Or));
				Model_TestBooleanFunctions_Call(Or)_Or.y.reset(new InputPin());
				this->addToElementRepository("Or.y", Model_TestBooleanFunctions_Call(Or)_Or.y);
					Model_TestBooleanFunctions_Call(Or)_Or.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Or)_Or.y_);
					Model_TestBooleanFunctions_Call(Or)_Or.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Or)_Or.y_);
				Model_TestBooleanFunctions_Call(Or)_Or.result.reset(new OutputPin());
				this->addToElementRepository("Or.result", Model_TestBooleanFunctions_Call(Or)_Or.result);
					Model_TestBooleanFunctions_Call(Or)_Or.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Or)_Or.result_);
					Model_TestBooleanFunctions_Call(Or)_Or.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Or)_Or.result_);
				Model_TestBooleanFunctions_Call(Or)_Or.x.reset(new InputPin());
				this->addToElementRepository("Or.x", Model_TestBooleanFunctions_Call(Or)_Or.x);
					Model_TestBooleanFunctions_Call(Or)_Or.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Or)_Or.x_);
					Model_TestBooleanFunctions_Call(Or)_Or.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Or)_Or.x_);
			Model_TestBooleanFunctions_OrResult.reset(new Parameter());
			this->addToElementRepository("OrResult", Model_TestBooleanFunctions_OrResult);
				Model_TestBooleanFunctions_OrResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestBooleanFunctions_OrResult_);
				Model_TestBooleanFunctions_OrResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestBooleanFunctions_OrResult_);
			Model_TestBooleanFunctions_GenData2.reset(new CallBehaviorAction());
			this->addToElementRepository("GenData2", Model_TestBooleanFunctions_GenData2);
				Model_TestBooleanFunctions_GenData2_GenData2.argumentData1.reset(new OutputPin());
				this->addToElementRepository("GenData2.argumentData1", Model_TestBooleanFunctions_GenData2_GenData2.argumentData1);
					Model_TestBooleanFunctions_GenData2_GenData2.argumentData1_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData2_GenData2.argumentData1_);
					Model_TestBooleanFunctions_GenData2_GenData2.argumentData1_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData2_GenData2.argumentData1_);
				Model_TestBooleanFunctions_GenData2_GenData2.argumentData2.reset(new OutputPin());
				this->addToElementRepository("GenData2.argumentData2", Model_TestBooleanFunctions_GenData2_GenData2.argumentData2);
					Model_TestBooleanFunctions_GenData2_GenData2.argumentData2_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData2_GenData2.argumentData2_);
					Model_TestBooleanFunctions_GenData2_GenData2.argumentData2_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData2_GenData2.argumentData2_);
			Model_TestBooleanFunctions_GenData4.reset(new CallBehaviorAction());
			this->addToElementRepository("GenData4", Model_TestBooleanFunctions_GenData4);
				Model_TestBooleanFunctions_GenData4_GenData4.argumentData2.reset(new OutputPin());
				this->addToElementRepository("GenData4.argumentData2", Model_TestBooleanFunctions_GenData4_GenData4.argumentData2);
					Model_TestBooleanFunctions_GenData4_GenData4.argumentData2_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData4_GenData4.argumentData2_);
					Model_TestBooleanFunctions_GenData4_GenData4.argumentData2_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData4_GenData4.argumentData2_);
				Model_TestBooleanFunctions_GenData4_GenData4.argumentData1.reset(new OutputPin());
				this->addToElementRepository("GenData4.argumentData1", Model_TestBooleanFunctions_GenData4_GenData4.argumentData1);
					Model_TestBooleanFunctions_GenData4_GenData4.argumentData1_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData4_GenData4.argumentData1_);
					Model_TestBooleanFunctions_GenData4_GenData4.argumentData1_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData4_GenData4.argumentData1_);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_Value(true).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(true)", Model_TestBooleanFunctions_Value(true));
				Model_TestBooleanFunctions_Value(true)_Value(true).result.reset(new OutputPin());
				this->addToElementRepository("Value(true).result", Model_TestBooleanFunctions_Value(true)_Value(true).result);
					Model_TestBooleanFunctions_Value(true)_Value(true).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Value(true)_Value(true).result_);
					Model_TestBooleanFunctions_Value(true)_Value(true).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Value(true)_Value(true).result_);
				Model_TestBooleanFunctions_Value(true)_.reset(new LiteralBoolean());
				this->addToElementRepository("", Model_TestBooleanFunctions_Value(true)_);
			Model_TestBooleanFunctions_Param(OrResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(OrResult)", Model_TestBooleanFunctions_Param(OrResult));
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_ImpliesResult.reset(new Parameter());
			this->addToElementRepository("ImpliesResult", Model_TestBooleanFunctions_ImpliesResult);
				Model_TestBooleanFunctions_ImpliesResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestBooleanFunctions_ImpliesResult_);
				Model_TestBooleanFunctions_ImpliesResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestBooleanFunctions_ImpliesResult_);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_GenData1.reset(new CallBehaviorAction());
			this->addToElementRepository("GenData1", Model_TestBooleanFunctions_GenData1);
				Model_TestBooleanFunctions_GenData1_GenData1.argumentData2.reset(new OutputPin());
				this->addToElementRepository("GenData1.argumentData2", Model_TestBooleanFunctions_GenData1_GenData1.argumentData2);
					Model_TestBooleanFunctions_GenData1_GenData1.argumentData2_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData1_GenData1.argumentData2_);
					Model_TestBooleanFunctions_GenData1_GenData1.argumentData2_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData1_GenData1.argumentData2_);
				Model_TestBooleanFunctions_GenData1_GenData1.argumentData1.reset(new OutputPin());
				this->addToElementRepository("GenData1.argumentData1", Model_TestBooleanFunctions_GenData1_GenData1.argumentData1);
					Model_TestBooleanFunctions_GenData1_GenData1.argumentData1_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData1_GenData1.argumentData1_);
					Model_TestBooleanFunctions_GenData1_GenData1.argumentData1_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_GenData1_GenData1.argumentData1_);
			Model_TestBooleanFunctions_Param(NotResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(NotResult)", Model_TestBooleanFunctions_Param(NotResult));
			Model_TestBooleanFunctions_Param(XorResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(XorResult)", Model_TestBooleanFunctions_Param(XorResult));
			Model_TestBooleanFunctions_Call(Implies).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Implies)", Model_TestBooleanFunctions_Call(Implies));
				Model_TestBooleanFunctions_Call(Implies)_Implies.y.reset(new InputPin());
				this->addToElementRepository("Implies.y", Model_TestBooleanFunctions_Call(Implies)_Implies.y);
					Model_TestBooleanFunctions_Call(Implies)_Implies.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Implies)_Implies.y_);
					Model_TestBooleanFunctions_Call(Implies)_Implies.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Implies)_Implies.y_);
				Model_TestBooleanFunctions_Call(Implies)_Implies.result.reset(new OutputPin());
				this->addToElementRepository("Implies.result", Model_TestBooleanFunctions_Call(Implies)_Implies.result);
					Model_TestBooleanFunctions_Call(Implies)_Implies.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Implies)_Implies.result_);
					Model_TestBooleanFunctions_Call(Implies)_Implies.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Implies)_Implies.result_);
				Model_TestBooleanFunctions_Call(Implies)_Implies.x.reset(new InputPin());
				this->addToElementRepository("Implies.x", Model_TestBooleanFunctions_Call(Implies)_Implies.x);
					Model_TestBooleanFunctions_Call(Implies)_Implies.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Implies)_Implies.x_);
					Model_TestBooleanFunctions_Call(Implies)_Implies.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Implies)_Implies.x_);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_AndResult.reset(new Parameter());
			this->addToElementRepository("AndResult", Model_TestBooleanFunctions_AndResult);
				Model_TestBooleanFunctions_AndResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestBooleanFunctions_AndResult_);
				Model_TestBooleanFunctions_AndResult_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestBooleanFunctions_AndResult_);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_Call(Xor).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Xor)", Model_TestBooleanFunctions_Call(Xor));
				Model_TestBooleanFunctions_Call(Xor)_Xor.y.reset(new InputPin());
				this->addToElementRepository("Xor.y", Model_TestBooleanFunctions_Call(Xor)_Xor.y);
					Model_TestBooleanFunctions_Call(Xor)_Xor.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Xor)_Xor.y_);
					Model_TestBooleanFunctions_Call(Xor)_Xor.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Xor)_Xor.y_);
				Model_TestBooleanFunctions_Call(Xor)_Xor.result.reset(new OutputPin());
				this->addToElementRepository("Xor.result", Model_TestBooleanFunctions_Call(Xor)_Xor.result);
					Model_TestBooleanFunctions_Call(Xor)_Xor.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Xor)_Xor.result_);
					Model_TestBooleanFunctions_Call(Xor)_Xor.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Xor)_Xor.result_);
				Model_TestBooleanFunctions_Call(Xor)_Xor.x.reset(new InputPin());
				this->addToElementRepository("Xor.x", Model_TestBooleanFunctions_Call(Xor)_Xor.x);
					Model_TestBooleanFunctions_Call(Xor)_Xor.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Xor)_Xor.x_);
					Model_TestBooleanFunctions_Call(Xor)_Xor.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Call(Xor)_Xor.x_);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestBooleanFunctions_);
				Model_TestBooleanFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestBooleanFunctions__);
			Model_TestBooleanFunctions_Value(false).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(false)", Model_TestBooleanFunctions_Value(false));
				Model_TestBooleanFunctions_Value(false)_.reset(new LiteralBoolean());
				this->addToElementRepository("", Model_TestBooleanFunctions_Value(false)_);
				Model_TestBooleanFunctions_Value(false)_Value(false).result.reset(new OutputPin());
				this->addToElementRepository("Value(false).result", Model_TestBooleanFunctions_Value(false)_Value(false).result);
					Model_TestBooleanFunctions_Value(false)_Value(false).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestBooleanFunctions_Value(false)_Value(false).result_);
					Model_TestBooleanFunctions_Value(false)_Value(false).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestBooleanFunctions_Value(false)_Value(false).result_);
		Model_ForkMergeData.reset(new Activity());
		this->addToElementRepository("ForkMergeData", Model_ForkMergeData);
			Model_ForkMergeData_.reset(new ControlFlow());
			this->addToElementRepository("", Model_ForkMergeData_);
				Model_ForkMergeData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkMergeData__);
			Model_ForkMergeData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_ForkMergeData_);
				Model_ForkMergeData__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_ForkMergeData__);
			Model_ForkMergeData_output.reset(new Parameter());
			this->addToElementRepository("output", Model_ForkMergeData_output);
				Model_ForkMergeData_output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_ForkMergeData_output_);
				Model_ForkMergeData_output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_ForkMergeData_output_);
			Model_ForkMergeData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_ForkMergeData_);
				Model_ForkMergeData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkMergeData__);
			Model_ForkMergeData_MergeNode.reset(new MergeNode());
			this->addToElementRepository("MergeNode", Model_ForkMergeData_MergeNode);
			Model_ForkMergeData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_ForkMergeData_);
				Model_ForkMergeData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkMergeData__);
			Model_ForkMergeData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_ForkMergeData_);
				Model_ForkMergeData__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkMergeData__);
			Model_ForkMergeData_Action_B.reset(new CallBehaviorAction());
			this->addToElementRepository("Action_B", Model_ForkMergeData_Action_B);
				Model_ForkMergeData_Action_B_Action_B.input.reset(new InputPin());
				this->addToElementRepository("Action_B.input", Model_ForkMergeData_Action_B_Action_B.input);
					Model_ForkMergeData_Action_B_Action_B.input_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_ForkMergeData_Action_B_Action_B.input_);
					Model_ForkMergeData_Action_B_Action_B.input_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_ForkMergeData_Action_B_Action_B.input_);
				Model_ForkMergeData_Action_B_Action_B.output.reset(new OutputPin());
				this->addToElementRepository("Action_B.output", Model_ForkMergeData_Action_B_Action_B.output);
					Model_ForkMergeData_Action_B_Action_B.output_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_ForkMergeData_Action_B_Action_B.output_);
					Model_ForkMergeData_Action_B_Action_B.output_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_ForkMergeData_Action_B_Action_B.output_);
			Model_ForkMergeData_Parameter(output).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(output)", Model_ForkMergeData_Parameter(output));
			Model_ForkMergeData_InitialNode.reset(new InitialNode());
			this->addToElementRepository("InitialNode", Model_ForkMergeData_InitialNode);
			Model_ForkMergeData_Action_A.reset(new ValueSpecificationAction());
			this->addToElementRepository("Action_A", Model_ForkMergeData_Action_A);
				Model_ForkMergeData_Action_A_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_ForkMergeData_Action_A_);
				Model_ForkMergeData_Action_A_Action_A.result.reset(new OutputPin());
				this->addToElementRepository("Action_A.result", Model_ForkMergeData_Action_A_Action_A.result);
					Model_ForkMergeData_Action_A_Action_A.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_ForkMergeData_Action_A_Action_A.result_);
					Model_ForkMergeData_Action_A_Action_A.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_ForkMergeData_Action_A_Action_A.result_);
			Model_ForkMergeData_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_ForkMergeData_);
				Model_ForkMergeData__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_ForkMergeData__);
			Model_ForkMergeData_ForkNode.reset(new ForkNode());
			this->addToElementRepository("ForkNode", Model_ForkMergeData_ForkNode);
		Model_CopierCaller.reset(new Activity());
		this->addToElementRepository("CopierCaller", Model_CopierCaller);
			Model_CopierCaller_Value(888).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(888)", Model_CopierCaller_Value(888));
				Model_CopierCaller_Value(888)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_CopierCaller_Value(888)_);
				Model_CopierCaller_Value(888)_Value(0).result.reset(new OutputPin());
				this->addToElementRepository("Value(0).result", Model_CopierCaller_Value(888)_Value(0).result);
			Model_CopierCaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_CopierCaller_);
				Model_CopierCaller__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_CopierCaller__);
			Model_CopierCaller_Call(Copier).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(Copier)", Model_CopierCaller_Call(Copier));
				Model_CopierCaller_Call(Copier)_Copier.input.reset(new InputPin());
				this->addToElementRepository("Copier.input", Model_CopierCaller_Call(Copier)_Copier.input);
					Model_CopierCaller_Call(Copier)_Copier.input_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_CopierCaller_Call(Copier)_Copier.input_);
					Model_CopierCaller_Call(Copier)_Copier.input_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_CopierCaller_Call(Copier)_Copier.input_);
				Model_CopierCaller_Call(Copier)_Copier.output.reset(new OutputPin());
				this->addToElementRepository("Copier.output", Model_CopierCaller_Call(Copier)_Copier.output);
					Model_CopierCaller_Call(Copier)_Copier.output_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_CopierCaller_Call(Copier)_Copier.output_);
					Model_CopierCaller_Call(Copier)_Copier.output_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_CopierCaller_Call(Copier)_Copier.output_);
			Model_CopierCaller_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_CopierCaller_);
				Model_CopierCaller__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_CopierCaller__);
			Model_CopierCaller_Parameter(output).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(output)", Model_CopierCaller_Parameter(output));
			Model_CopierCaller_output.reset(new Parameter());
			this->addToElementRepository("output", Model_CopierCaller_output);
				Model_CopierCaller_output_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_CopierCaller_output_);
				Model_CopierCaller_output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_CopierCaller_output_);
		Model_TestClassReclassifier.reset(new Activity());
		this->addToElementRepository("TestClassReclassifier", Model_TestClassReclassifier);
			Model_TestClassReclassifier_Write(x).reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Write(x)", Model_TestClassReclassifier_Write(x));
				Model_TestClassReclassifier_Write(x)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassReclassifier_Write(x)_object);
					Model_TestClassReclassifier_Write(x)_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(x)_object_);
					Model_TestClassReclassifier_Write(x)_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(x)_object_);
				Model_TestClassReclassifier_Write(x)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassReclassifier_Write(x)_result);
					Model_TestClassReclassifier_Write(x)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(x)_result_);
					Model_TestClassReclassifier_Write(x)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(x)_result_);
				Model_TestClassReclassifier_Write(x)_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestClassReclassifier_Write(x)_value);
					Model_TestClassReclassifier_Write(x)_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(x)_value_);
					Model_TestClassReclassifier_Write(x)_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(x)_value_);
			Model_TestClassReclassifier_.reset(new ForkNode());
			this->addToElementRepository("", Model_TestClassReclassifier_);
			Model_TestClassReclassifier_Write(a).reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Write(a)", Model_TestClassReclassifier_Write(a));
				Model_TestClassReclassifier_Write(a)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassReclassifier_Write(a)_object);
					Model_TestClassReclassifier_Write(a)_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(a)_object_);
					Model_TestClassReclassifier_Write(a)_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(a)_object_);
				Model_TestClassReclassifier_Write(a)_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestClassReclassifier_Write(a)_value);
					Model_TestClassReclassifier_Write(a)_value_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(a)_value_);
					Model_TestClassReclassifier_Write(a)_value_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(a)_value_);
				Model_TestClassReclassifier_Write(a)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassReclassifier_Write(a)_result);
					Model_TestClassReclassifier_Write(a)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(a)_result_);
					Model_TestClassReclassifier_Write(a)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(a)_result_);
			Model_TestClassReclassifier_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassReclassifier_);
				Model_TestClassReclassifier__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassReclassifier__);
			Model_TestClassReclassifier_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassReclassifier_);
				Model_TestClassReclassifier__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassReclassifier__);
			Model_TestClassReclassifier_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassReclassifier_);
				Model_TestClassReclassifier__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassReclassifier__);
			Model_TestClassReclassifier_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassReclassifier_);
				Model_TestClassReclassifier__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassReclassifier__);
			Model_TestClassReclassifier_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassReclassifier_);
				Model_TestClassReclassifier__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassReclassifier__);
			Model_TestClassReclassifier_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassReclassifier_);
				Model_TestClassReclassifier__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassReclassifier__);
			Model_TestClassReclassifier_Create(Subclass1).reset(new CreateObjectAction());
			this->addToElementRepository("Create(Subclass1)", Model_TestClassReclassifier_Create(Subclass1));
				Model_TestClassReclassifier_Create(Subclass1)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassReclassifier_Create(Subclass1)_result);
					Model_TestClassReclassifier_Create(Subclass1)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassReclassifier_Create(Subclass1)_result_);
					Model_TestClassReclassifier_Create(Subclass1)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassReclassifier_Create(Subclass1)_result_);
			Model_TestClassReclassifier_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassReclassifier_);
				Model_TestClassReclassifier__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassReclassifier__);
			Model_TestClassReclassifier_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassReclassifier_);
				Model_TestClassReclassifier__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassReclassifier__);
			Model_TestClassReclassifier_result.reset(new ActivityParameterNode());
			this->addToElementRepository("result", Model_TestClassReclassifier_result);
			Model_TestClassReclassifier_Value(true).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(true)", Model_TestClassReclassifier_Value(true));
				Model_TestClassReclassifier_Value(true)_.reset(new LiteralBoolean());
				this->addToElementRepository("", Model_TestClassReclassifier_Value(true)_);
				Model_TestClassReclassifier_Value(true)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassReclassifier_Value(true)_result);
					Model_TestClassReclassifier_Value(true)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassReclassifier_Value(true)_result_);
					Model_TestClassReclassifier_Value(true)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassReclassifier_Value(true)_result_);
			Model_TestClassReclassifier_Reclassify(Subclass2).reset(new ReclassifyObjectAction());
			this->addToElementRepository("Reclassify(Subclass2)", Model_TestClassReclassifier_Reclassify(Subclass2));
				Model_TestClassReclassifier_Reclassify(Subclass2)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassReclassifier_Reclassify(Subclass2)_object);
			Model_TestClassReclassifier_result.reset(new Parameter());
			this->addToElementRepository("result", Model_TestClassReclassifier_result);
				Model_TestClassReclassifier_result_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassReclassifier_result_);
				Model_TestClassReclassifier_result_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassReclassifier_result_);
			Model_TestClassReclassifier_Write(y).reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Write(y)", Model_TestClassReclassifier_Write(y));
				Model_TestClassReclassifier_Write(y)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassReclassifier_Write(y)_result);
					Model_TestClassReclassifier_Write(y)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(y)_result_);
					Model_TestClassReclassifier_Write(y)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(y)_result_);
				Model_TestClassReclassifier_Write(y)_value.reset(new InputPin());
				this->addToElementRepository("value", Model_TestClassReclassifier_Write(y)_value);
				Model_TestClassReclassifier_Write(y)_object.reset(new InputPin());
				this->addToElementRepository("object", Model_TestClassReclassifier_Write(y)_object);
					Model_TestClassReclassifier_Write(y)_object_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(y)_object_);
					Model_TestClassReclassifier_Write(y)_object_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassReclassifier_Write(y)_object_);
			Model_TestClassReclassifier_Value(1).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(1)", Model_TestClassReclassifier_Value(1));
				Model_TestClassReclassifier_Value(1)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassReclassifier_Value(1)_result);
					Model_TestClassReclassifier_Value(1)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassReclassifier_Value(1)_result_);
					Model_TestClassReclassifier_Value(1)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassReclassifier_Value(1)_result_);
				Model_TestClassReclassifier_Value(1)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassReclassifier_Value(1)_);
			Model_TestClassReclassifier_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestClassReclassifier_);
				Model_TestClassReclassifier__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestClassReclassifier__);
			Model_TestClassReclassifier_Value(2).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(2)", Model_TestClassReclassifier_Value(2));
				Model_TestClassReclassifier_Value(2)_result.reset(new OutputPin());
				this->addToElementRepository("result", Model_TestClassReclassifier_Value(2)_result);
					Model_TestClassReclassifier_Value(2)_result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestClassReclassifier_Value(2)_result_);
					Model_TestClassReclassifier_Value(2)_result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestClassReclassifier_Value(2)_result_);
				Model_TestClassReclassifier_Value(2)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestClassReclassifier_Value(2)_);
		Model_Subclass2.reset(new Class_());
		this->addToElementRepository("Subclass2", Model_Subclass2);
			Model_Subclass2_Generalization3.reset(new Generalization());
			this->addToElementRepository("Generalization3", Model_Subclass2_Generalization3);
			Model_Subclass2_b.reset(new Property());
			this->addToElementRepository("b", Model_Subclass2_b);
		Model_TestCompositeObjectDestroyer.reset(new Activity());
		this->addToElementRepository("TestCompositeObjectDestroyer", Model_TestCompositeObjectDestroyer);
			Model_TestCompositeObjectDestroyer_Parameter(assocOut).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(assocOut)", Model_TestCompositeObjectDestroyer_Parameter(assocOut));
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
			Model_TestCompositeObjectDestroyer_Parameter(object1).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(object1)", Model_TestCompositeObjectDestroyer_Parameter(object1));
			Model_TestCompositeObjectDestroyer_object2.reset(new Parameter());
			this->addToElementRepository("object2", Model_TestCompositeObjectDestroyer_object2);
				Model_TestCompositeObjectDestroyer_object2_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_object2_);
				Model_TestCompositeObjectDestroyer_object2_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_object2_);
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
			Model_TestCompositeObjectDestroyer_.reset(new ForkNode());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
			Model_TestCompositeObjectDestroyer_Write(c2).reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Write(c2)", Model_TestCompositeObjectDestroyer_Write(c2));
				Model_TestCompositeObjectDestroyer_Write(c2)_Write(c2).result.reset(new OutputPin());
				this->addToElementRepository("Write(c2).result", Model_TestCompositeObjectDestroyer_Write(c2)_Write(c2).result);
				Model_TestCompositeObjectDestroyer_Write(c2)_Write(c2).value.reset(new InputPin());
				this->addToElementRepository("Write(c2).value", Model_TestCompositeObjectDestroyer_Write(c2)_Write(c2).value);
				Model_TestCompositeObjectDestroyer_Write(c2)_Write(c2).object.reset(new InputPin());
				this->addToElementRepository("Write(c2).object", Model_TestCompositeObjectDestroyer_Write(c2)_Write(c2).object);
			Model_TestCompositeObjectDestroyer_Parameter(object2).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(object2)", Model_TestCompositeObjectDestroyer_Parameter(object2));
			Model_TestCompositeObjectDestroyer_.reset(new ForkNode());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
			Model_TestCompositeObjectDestroyer_Parameter(compositeOut).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(compositeOut)", Model_TestCompositeObjectDestroyer_Parameter(compositeOut));
			Model_TestCompositeObjectDestroyer_composite.reset(new Parameter());
			this->addToElementRepository("composite", Model_TestCompositeObjectDestroyer_composite);
				Model_TestCompositeObjectDestroyer_composite_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_composite_);
				Model_TestCompositeObjectDestroyer_composite_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_composite_);
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
			Model_TestCompositeObjectDestroyer_assocOut.reset(new Parameter());
			this->addToElementRepository("assocOut", Model_TestCompositeObjectDestroyer_assocOut);
				Model_TestCompositeObjectDestroyer_assocOut_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_assocOut_);
				Model_TestCompositeObjectDestroyer_assocOut_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_assocOut_);
			Model_TestCompositeObjectDestroyer_Parameter(object1Out).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(object1Out)", Model_TestCompositeObjectDestroyer_Parameter(object1Out));
			Model_TestCompositeObjectDestroyer_Parameter(object2Out).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(object2Out)", Model_TestCompositeObjectDestroyer_Parameter(object2Out));
			Model_TestCompositeObjectDestroyer_Write(c1).reset(new AddStructuralFeatureValueAction());
			this->addToElementRepository("Write(c1)", Model_TestCompositeObjectDestroyer_Write(c1));
				Model_TestCompositeObjectDestroyer_Write(c1)_Write(c1).object.reset(new InputPin());
				this->addToElementRepository("Write(c1).object", Model_TestCompositeObjectDestroyer_Write(c1)_Write(c1).object);
				Model_TestCompositeObjectDestroyer_Write(c1)_Write(c1).object.reset(new InputPin());
				this->addToElementRepository("Write(c1).object", Model_TestCompositeObjectDestroyer_Write(c1)_Write(c1).object);
				Model_TestCompositeObjectDestroyer_Write(c1)_Write(c1).result.reset(new OutputPin());
				this->addToElementRepository("Write(c1).result", Model_TestCompositeObjectDestroyer_Write(c1)_Write(c1).result);
			Model_TestCompositeObjectDestroyer_object2Out.reset(new Parameter());
			this->addToElementRepository("object2Out", Model_TestCompositeObjectDestroyer_object2Out);
				Model_TestCompositeObjectDestroyer_object2Out_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_object2Out_);
				Model_TestCompositeObjectDestroyer_object2Out_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_object2Out_);
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
			Model_TestCompositeObjectDestroyer_object1.reset(new Parameter());
			this->addToElementRepository("object1", Model_TestCompositeObjectDestroyer_object1);
				Model_TestCompositeObjectDestroyer_object1_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_object1_);
				Model_TestCompositeObjectDestroyer_object1_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_object1_);
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
			Model_TestCompositeObjectDestroyer_Parameter(composite).reset(new ActivityParameterNode());
			this->addToElementRepository("Parameter(composite)", Model_TestCompositeObjectDestroyer_Parameter(composite));
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
			Model_TestCompositeObjectDestroyer_compositeOut.reset(new Parameter());
			this->addToElementRepository("compositeOut", Model_TestCompositeObjectDestroyer_compositeOut);
				Model_TestCompositeObjectDestroyer_compositeOut_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_compositeOut_);
				Model_TestCompositeObjectDestroyer_compositeOut_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_compositeOut_);
			Model_TestCompositeObjectDestroyer_Destroy(composite).reset(new DestroyObjectAction());
			this->addToElementRepository("Destroy(composite)", Model_TestCompositeObjectDestroyer_Destroy(composite));
				Model_TestCompositeObjectDestroyer_Destroy(composite)_Destroy(composite).target.reset(new InputPin());
				this->addToElementRepository("Destroy(composite).target", Model_TestCompositeObjectDestroyer_Destroy(composite)_Destroy(composite).target);
			Model_TestCompositeObjectDestroyer_.reset(new ForkNode());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
			Model_TestCompositeObjectDestroyer_Read(composite).reset(new ReadLinkAction());
			this->addToElementRepository("Read(composite)", Model_TestCompositeObjectDestroyer_Read(composite));
				Model_TestCompositeObjectDestroyer_Read(composite)_LinkEndData4.reset(new LinkEndData());
				this->addToElementRepository("LinkEndData4", Model_TestCompositeObjectDestroyer_Read(composite)_LinkEndData4);
				Model_TestCompositeObjectDestroyer_Read(composite)_LinkEndData5.reset(new LinkEndData());
				this->addToElementRepository("LinkEndData5", Model_TestCompositeObjectDestroyer_Read(composite)_LinkEndData5);
				Model_TestCompositeObjectDestroyer_Read(composite)_Read(Composite).iresult.reset(new OutputPin());
				this->addToElementRepository("Read(Composite).iresult", Model_TestCompositeObjectDestroyer_Read(composite)_Read(Composite).iresult);
				Model_TestCompositeObjectDestroyer_Read(composite)_Read(Composite).inputValue.reset(new InputPin());
				this->addToElementRepository("Read(Composite).inputValue", Model_TestCompositeObjectDestroyer_Read(composite)_Read(Composite).inputValue);
			Model_TestCompositeObjectDestroyer_.reset(new ForkNode());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
			Model_TestCompositeObjectDestroyer_object1Out.reset(new Parameter());
			this->addToElementRepository("object1Out", Model_TestCompositeObjectDestroyer_object1Out);
				Model_TestCompositeObjectDestroyer_object1Out_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_object1Out_);
				Model_TestCompositeObjectDestroyer_object1Out_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer_object1Out_);
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
			Model_TestCompositeObjectDestroyer_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCompositeObjectDestroyer_);
				Model_TestCompositeObjectDestroyer__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCompositeObjectDestroyer__);
		Model_ActiveClass.reset(new Class_());
		this->addToElementRepository("ActiveClass", Model_ActiveClass);
			Model_ActiveClass_signal1.reset(new Property());
			this->addToElementRepository("signal1", Model_ActiveClass_signal1);
			Model_ActiveClass_ActiveClassBehavior.reset(new Activity());
			this->addToElementRepository("ActiveClassBehavior", Model_ActiveClass_ActiveClassBehavior);
				Model_ActiveClass_ActiveClassBehavior_Accept(TestSignal).reset(new AcceptEventAction());
				this->addToElementRepository("Accept(TestSignal)", Model_ActiveClass_ActiveClassBehavior_Accept(TestSignal));
					Model_ActiveClass_ActiveClassBehavior_Accept(TestSignal)_.reset(new Trigger());
					this->addToElementRepository("", Model_ActiveClass_ActiveClassBehavior_Accept(TestSignal)_);
					Model_ActiveClass_ActiveClassBehavior_Accept(TestSignal)_Accept(TestSignal).result.reset(new OutputPin());
					this->addToElementRepository("Accept(TestSignal).result", Model_ActiveClass_ActiveClassBehavior_Accept(TestSignal)_Accept(TestSignal).result);
				Model_ActiveClass_ActiveClassBehavior_ReadSelf.reset(new ReadSelfAction());
				this->addToElementRepository("ReadSelf", Model_ActiveClass_ActiveClassBehavior_ReadSelf);
					Model_ActiveClass_ActiveClassBehavior_ReadSelf_self.reset(new OutputPin());
					this->addToElementRepository("self", Model_ActiveClass_ActiveClassBehavior_ReadSelf_self);
				Model_ActiveClass_ActiveClassBehavior_.reset(new ObjectFlow());
				this->addToElementRepository("", Model_ActiveClass_ActiveClassBehavior_);
					Model_ActiveClass_ActiveClassBehavior__.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_ActiveClass_ActiveClassBehavior__);
				Model_ActiveClass_ActiveClassBehavior_.reset(new ObjectFlow());
				this->addToElementRepository("", Model_ActiveClass_ActiveClassBehavior_);
					Model_ActiveClass_ActiveClassBehavior__.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_ActiveClass_ActiveClassBehavior__);
				Model_ActiveClass_ActiveClassBehavior_.reset(new ObjectFlow());
				this->addToElementRepository("", Model_ActiveClass_ActiveClassBehavior_);
					Model_ActiveClass_ActiveClassBehavior__.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_ActiveClass_ActiveClassBehavior__);
				Model_ActiveClass_ActiveClassBehavior_Fork(self).reset(new ForkNode());
				this->addToElementRepository("Fork(self)", Model_ActiveClass_ActiveClassBehavior_Fork(self));
				Model_ActiveClass_ActiveClassBehavior_.reset(new ObjectFlow());
				this->addToElementRepository("", Model_ActiveClass_ActiveClassBehavior_);
					Model_ActiveClass_ActiveClassBehavior__.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_ActiveClass_ActiveClassBehavior__);
				Model_ActiveClass_ActiveClassBehavior_.reset(new ObjectFlow());
				this->addToElementRepository("", Model_ActiveClass_ActiveClassBehavior_);
					Model_ActiveClass_ActiveClassBehavior__.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_ActiveClass_ActiveClassBehavior__);
				Model_ActiveClass_ActiveClassBehavior_Write(signal1).reset(new AddStructuralFeatureValueAction());
				this->addToElementRepository("Write(signal1)", Model_ActiveClass_ActiveClassBehavior_Write(signal1));
					Model_ActiveClass_ActiveClassBehavior_Write(signal1)_Write(signal1).value.reset(new InputPin());
					this->addToElementRepository("Write(signal1).value", Model_ActiveClass_ActiveClassBehavior_Write(signal1)_Write(signal1).value);
					Model_ActiveClass_ActiveClassBehavior_Write(signal1)_Write(signal1).object.reset(new InputPin());
					this->addToElementRepository("Write(signal1).object", Model_ActiveClass_ActiveClassBehavior_Write(signal1)_Write(signal1).object);
				Model_ActiveClass_ActiveClassBehavior_Write(signal2).reset(new AddStructuralFeatureValueAction());
				this->addToElementRepository("Write(signal2)", Model_ActiveClass_ActiveClassBehavior_Write(signal2));
					Model_ActiveClass_ActiveClassBehavior_Write(signal2)_Write(signal2).value.reset(new InputPin());
					this->addToElementRepository("Write(signal2).value", Model_ActiveClass_ActiveClassBehavior_Write(signal2)_Write(signal2).value);
					Model_ActiveClass_ActiveClassBehavior_Write(signal2)_Write(signal2).object.reset(new InputPin());
					this->addToElementRepository("Write(signal2).object", Model_ActiveClass_ActiveClassBehavior_Write(signal2)_Write(signal2).object);
				Model_ActiveClass_ActiveClassBehavior_Accept(OtherSignal).reset(new AcceptEventAction());
				this->addToElementRepository("Accept(OtherSignal)", Model_ActiveClass_ActiveClassBehavior_Accept(OtherSignal));
					Model_ActiveClass_ActiveClassBehavior_Accept(OtherSignal)_Accept(OtherSignal).result.reset(new OutputPin());
					this->addToElementRepository("Accept(OtherSignal).result", Model_ActiveClass_ActiveClassBehavior_Accept(OtherSignal)_Accept(OtherSignal).result);
					Model_ActiveClass_ActiveClassBehavior_Accept(OtherSignal)_.reset(new Trigger());
					this->addToElementRepository("", Model_ActiveClass_ActiveClassBehavior_Accept(OtherSignal)_);
			Model_ActiveClass_signal2.reset(new Property());
			this->addToElementRepository("signal2", Model_ActiveClass_signal2);
		Model_DecisionJoin.reset(new Activity());
		this->addToElementRepository("DecisionJoin", Model_DecisionJoin);
			Model_DecisionJoin_DecisionNode.reset(new DecisionNode());
			this->addToElementRepository("DecisionNode", Model_DecisionJoin_DecisionNode);
			Model_DecisionJoin_.reset(new ControlFlow());
			this->addToElementRepository("", Model_DecisionJoin_);
				Model_DecisionJoin__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_DecisionJoin__);
			Model_DecisionJoin_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_DecisionJoin_);
				Model_DecisionJoin__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_DecisionJoin__);
				Model_DecisionJoin__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_DecisionJoin__);
			Model_DecisionJoin_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_DecisionJoin_);
				Model_DecisionJoin__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_DecisionJoin__);
			Model_DecisionJoin_Action_B.reset(new CallBehaviorAction());
			this->addToElementRepository("Action_B", Model_DecisionJoin_Action_B);
				Model_DecisionJoin_Action_B_Action_C.output.reset(new OutputPin());
				this->addToElementRepository("Action_C.output", Model_DecisionJoin_Action_B_Action_C.output);
					Model_DecisionJoin_Action_B_Action_C.output_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_DecisionJoin_Action_B_Action_C.output_);
					Model_DecisionJoin_Action_B_Action_C.output_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_DecisionJoin_Action_B_Action_C.output_);
				Model_DecisionJoin_Action_B_Action_B.input.reset(new InputPin());
				this->addToElementRepository("Action_B.input", Model_DecisionJoin_Action_B_Action_B.input);
					Model_DecisionJoin_Action_B_Action_B.input_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_DecisionJoin_Action_B_Action_B.input_);
					Model_DecisionJoin_Action_B_Action_B.input_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_DecisionJoin_Action_B_Action_B.input_);
			Model_DecisionJoin_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_DecisionJoin_);
				Model_DecisionJoin__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_DecisionJoin__);
			Model_DecisionJoin_Value(0).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(0)", Model_DecisionJoin_Value(0));
				Model_DecisionJoin_Value(0)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_DecisionJoin_Value(0)_);
				Model_DecisionJoin_Value(0)_.reset(new OutputPin());
				this->addToElementRepository("", Model_DecisionJoin_Value(0)_);
			Model_DecisionJoin_Action_A.reset(new CallBehaviorAction());
			this->addToElementRepository("Action_A", Model_DecisionJoin_Action_A);
				Model_DecisionJoin_Action_A_Action_A.output.reset(new OutputPin());
				this->addToElementRepository("Action_A.output", Model_DecisionJoin_Action_A_Action_A.output);
					Model_DecisionJoin_Action_A_Action_A.output_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_DecisionJoin_Action_A_Action_A.output_);
					Model_DecisionJoin_Action_A_Action_A.output_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_DecisionJoin_Action_A_Action_A.output_);
				Model_DecisionJoin_Action_A_Action_A.input.reset(new InputPin());
				this->addToElementRepository("Action_A.input", Model_DecisionJoin_Action_A_Action_A.input);
					Model_DecisionJoin_Action_A_Action_A.input_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_DecisionJoin_Action_A_Action_A.input_);
					Model_DecisionJoin_Action_A_Action_A.input_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_DecisionJoin_Action_A_Action_A.input_);
			Model_DecisionJoin_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_DecisionJoin_);
				Model_DecisionJoin__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_DecisionJoin__);
			Model_DecisionJoin_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_DecisionJoin_);
				Model_DecisionJoin__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_DecisionJoin__);
			Model_DecisionJoin_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_DecisionJoin_);
				Model_DecisionJoin__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_DecisionJoin__);
			Model_DecisionJoin_JoinNode.reset(new JoinNode());
			this->addToElementRepository("JoinNode", Model_DecisionJoin_JoinNode);
			Model_DecisionJoin_OutputNode.reset(new ActivityParameterNode());
			this->addToElementRepository("OutputNode", Model_DecisionJoin_OutputNode);
			Model_DecisionJoin_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_DecisionJoin_);
				Model_DecisionJoin__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_DecisionJoin__);
				Model_DecisionJoin__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_DecisionJoin__);
			Model_DecisionJoin_output.reset(new Parameter());
			this->addToElementRepository("output", Model_DecisionJoin_output);
				Model_DecisionJoin_output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_DecisionJoin_output_);
				Model_DecisionJoin_output_.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_DecisionJoin_output_);
			Model_DecisionJoin_Value(1).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(1)", Model_DecisionJoin_Value(1));
				Model_DecisionJoin_Value(1)_.reset(new OutputPin());
				this->addToElementRepository("", Model_DecisionJoin_Value(1)_);
				Model_DecisionJoin_Value(1)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_DecisionJoin_Value(1)_);
		Model_OtherSignal.reset(new Signal());
		this->addToElementRepository("OtherSignal", Model_OtherSignal);
		Model_TestIntegerComparisonFunctions.reset(new Activity());
		this->addToElementRepository("TestIntegerComparisonFunctions", Model_TestIntegerComparisonFunctions);
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_Param(LTResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(LTResult)", Model_TestIntegerComparisonFunctions_Param(LTResult));
			Model_TestIntegerComparisonFunctions_LEResult.reset(new Parameter());
			this->addToElementRepository("LEResult", Model_TestIntegerComparisonFunctions_LEResult);
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_GEResult.reset(new Parameter());
			this->addToElementRepository("GEResult", Model_TestIntegerComparisonFunctions_GEResult);
			Model_TestIntegerComparisonFunctions_Param(GTResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(GTResult)", Model_TestIntegerComparisonFunctions_Param(GTResult));
			Model_TestIntegerComparisonFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_Fork(3).reset(new ForkNode());
			this->addToElementRepository("Fork(3)", Model_TestIntegerComparisonFunctions_Fork(3));
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_Call(LT).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(LT)", Model_TestIntegerComparisonFunctions_Call(LT));
				Model_TestIntegerComparisonFunctions_Call(LT)_LT.x.reset(new InputPin());
				this->addToElementRepository("LT.x", Model_TestIntegerComparisonFunctions_Call(LT)_LT.x);
					Model_TestIntegerComparisonFunctions_Call(LT)_LT.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(LT)_LT.x_);
					Model_TestIntegerComparisonFunctions_Call(LT)_LT.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(LT)_LT.x_);
				Model_TestIntegerComparisonFunctions_Call(LT)_LT.result.reset(new OutputPin());
				this->addToElementRepository("LT.result", Model_TestIntegerComparisonFunctions_Call(LT)_LT.result);
					Model_TestIntegerComparisonFunctions_Call(LT)_LT.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(LT)_LT.result_);
					Model_TestIntegerComparisonFunctions_Call(LT)_LT.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(LT)_LT.result_);
				Model_TestIntegerComparisonFunctions_Call(LT)_LT.y.reset(new InputPin());
				this->addToElementRepository("LT.y", Model_TestIntegerComparisonFunctions_Call(LT)_LT.y);
					Model_TestIntegerComparisonFunctions_Call(LT)_LT.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(LT)_LT.y_);
					Model_TestIntegerComparisonFunctions_Call(LT)_LT.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(LT)_LT.y_);
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_Value(2).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(2)", Model_TestIntegerComparisonFunctions_Value(2));
				Model_TestIntegerComparisonFunctions_Value(2)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Value(2)_);
				Model_TestIntegerComparisonFunctions_Value(2)_Value(2).result.reset(new OutputPin());
				this->addToElementRepository("Value(2).result", Model_TestIntegerComparisonFunctions_Value(2)_Value(2).result);
					Model_TestIntegerComparisonFunctions_Value(2)_Value(2).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Value(2)_Value(2).result_);
					Model_TestIntegerComparisonFunctions_Value(2)_Value(2).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Value(2)_Value(2).result_);
			Model_TestIntegerComparisonFunctions_Call(GT).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(GT)", Model_TestIntegerComparisonFunctions_Call(GT));
				Model_TestIntegerComparisonFunctions_Call(GT)_GT.y.reset(new InputPin());
				this->addToElementRepository("GT.y", Model_TestIntegerComparisonFunctions_Call(GT)_GT.y);
					Model_TestIntegerComparisonFunctions_Call(GT)_GT.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(GT)_GT.y_);
					Model_TestIntegerComparisonFunctions_Call(GT)_GT.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(GT)_GT.y_);
				Model_TestIntegerComparisonFunctions_Call(GT)_GT.x.reset(new InputPin());
				this->addToElementRepository("GT.x", Model_TestIntegerComparisonFunctions_Call(GT)_GT.x);
					Model_TestIntegerComparisonFunctions_Call(GT)_GT.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(GT)_GT.x_);
					Model_TestIntegerComparisonFunctions_Call(GT)_GT.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(GT)_GT.x_);
				Model_TestIntegerComparisonFunctions_Call(GT)_GT.result.reset(new OutputPin());
				this->addToElementRepository("GT.result", Model_TestIntegerComparisonFunctions_Call(GT)_GT.result);
					Model_TestIntegerComparisonFunctions_Call(GT)_GT.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(GT)_GT.result_);
					Model_TestIntegerComparisonFunctions_Call(GT)_GT.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(GT)_GT.result_);
			Model_TestIntegerComparisonFunctions_Value(3).reset(new ValueSpecificationAction());
			this->addToElementRepository("Value(3)", Model_TestIntegerComparisonFunctions_Value(3));
				Model_TestIntegerComparisonFunctions_Value(3)_.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Value(3)_);
				Model_TestIntegerComparisonFunctions_Value(3)_Value(3).result.reset(new OutputPin());
				this->addToElementRepository("Value(3).result", Model_TestIntegerComparisonFunctions_Value(3)_Value(3).result);
					Model_TestIntegerComparisonFunctions_Value(3)_Value(3).result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Value(3)_Value(3).result_);
					Model_TestIntegerComparisonFunctions_Value(3)_Value(3).result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Value(3)_Value(3).result_);
			Model_TestIntegerComparisonFunctions_Param(LEResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(LEResult)", Model_TestIntegerComparisonFunctions_Param(LEResult));
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_GTResult.reset(new Parameter());
			this->addToElementRepository("GTResult", Model_TestIntegerComparisonFunctions_GTResult);
			Model_TestIntegerComparisonFunctions_Fork(2).reset(new ForkNode());
			this->addToElementRepository("Fork(2)", Model_TestIntegerComparisonFunctions_Fork(2));
			Model_TestIntegerComparisonFunctions_Param(GEResult).reset(new ActivityParameterNode());
			this->addToElementRepository("Param(GEResult)", Model_TestIntegerComparisonFunctions_Param(GEResult));
			Model_TestIntegerComparisonFunctions_LTResult.reset(new Parameter());
			this->addToElementRepository("LTResult", Model_TestIntegerComparisonFunctions_LTResult);
			Model_TestIntegerComparisonFunctions_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_Call(GE).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(GE)", Model_TestIntegerComparisonFunctions_Call(GE));
				Model_TestIntegerComparisonFunctions_Call(GE)_GE.result.reset(new OutputPin());
				this->addToElementRepository("GE.result", Model_TestIntegerComparisonFunctions_Call(GE)_GE.result);
					Model_TestIntegerComparisonFunctions_Call(GE)_GE.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(GE)_GE.result_);
					Model_TestIntegerComparisonFunctions_Call(GE)_GE.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(GE)_GE.result_);
				Model_TestIntegerComparisonFunctions_Call(GE)_GE.y.reset(new InputPin());
				this->addToElementRepository("GE.y", Model_TestIntegerComparisonFunctions_Call(GE)_GE.y);
					Model_TestIntegerComparisonFunctions_Call(GE)_GE.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(GE)_GE.y_);
					Model_TestIntegerComparisonFunctions_Call(GE)_GE.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(GE)_GE.y_);
				Model_TestIntegerComparisonFunctions_Call(GE)_GE.x.reset(new InputPin());
				this->addToElementRepository("GE.x", Model_TestIntegerComparisonFunctions_Call(GE)_GE.x);
					Model_TestIntegerComparisonFunctions_Call(GE)_GE.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(GE)_GE.x_);
					Model_TestIntegerComparisonFunctions_Call(GE)_GE.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(GE)_GE.x_);
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestIntegerComparisonFunctions_);
				Model_TestIntegerComparisonFunctions__.reset(new LiteralInteger());
				this->addToElementRepository("", Model_TestIntegerComparisonFunctions__);
			Model_TestIntegerComparisonFunctions_Call(LE).reset(new CallBehaviorAction());
			this->addToElementRepository("Call(LE)", Model_TestIntegerComparisonFunctions_Call(LE));
				Model_TestIntegerComparisonFunctions_Call(LE)_LE.x.reset(new InputPin());
				this->addToElementRepository("LE.x", Model_TestIntegerComparisonFunctions_Call(LE)_LE.x);
					Model_TestIntegerComparisonFunctions_Call(LE)_LE.x_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(LE)_LE.x_);
					Model_TestIntegerComparisonFunctions_Call(LE)_LE.x_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(LE)_LE.x_);
				Model_TestIntegerComparisonFunctions_Call(LE)_LE.y.reset(new InputPin());
				this->addToElementRepository("LE.y", Model_TestIntegerComparisonFunctions_Call(LE)_LE.y);
					Model_TestIntegerComparisonFunctions_Call(LE)_LE.y_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(LE)_LE.y_);
					Model_TestIntegerComparisonFunctions_Call(LE)_LE.y_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(LE)_LE.y_);
				Model_TestIntegerComparisonFunctions_Call(LE)_LE.result.reset(new OutputPin());
				this->addToElementRepository("LE.result", Model_TestIntegerComparisonFunctions_Call(LE)_LE.result);
					Model_TestIntegerComparisonFunctions_Call(LE)_LE.result_.reset(new LiteralUnlimitedNatural());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(LE)_LE.result_);
					Model_TestIntegerComparisonFunctions_Call(LE)_LE.result_.reset(new LiteralInteger());
					this->addToElementRepository("", Model_TestIntegerComparisonFunctions_Call(LE)_LE.result_);
		Model_TestCallSend.reset(new Activity());
		this->addToElementRepository("TestCallSend", Model_TestCallSend);
			Model_TestCallSend_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCallSend_);
				Model_TestCallSend__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallSend__);
			Model_TestCallSend_.reset(new ControlFlow());
			this->addToElementRepository("", Model_TestCallSend_);
				Model_TestCallSend__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallSend__);
			Model_TestCallSend_Send(TestSignal).reset(new SendSignalAction());
			this->addToElementRepository("Send(TestSignal)", Model_TestCallSend_Send(TestSignal));
				Model_TestCallSend_Send(TestSignal)_Send(TestSignal).target.reset(new InputPin());
				this->addToElementRepository("Send(TestSignal).target", Model_TestCallSend_Send(TestSignal)_Send(TestSignal).target);
			Model_TestCallSend_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCallSend_);
				Model_TestCallSend__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallSend__);
			Model_TestCallSend_Create(TestCallSender).reset(new CreateObjectAction());
			this->addToElementRepository("Create(TestCallSender)", Model_TestCallSend_Create(TestCallSender));
				Model_TestCallSend_Create(TestCallSender)_Create(TestCallSender).result.reset(new OutputPin());
				this->addToElementRepository("Create(TestCallSender).result", Model_TestCallSend_Create(TestCallSender)_Create(TestCallSender).result);
			Model_TestCallSend_.reset(new ObjectFlow());
			this->addToElementRepository("", Model_TestCallSend_);
				Model_TestCallSend__.reset(new LiteralUnlimitedNatural());
				this->addToElementRepository("", Model_TestCallSend__);
			Model_TestCallSend_ForkNode.reset(new ForkNode());
			this->addToElementRepository("ForkNode", Model_TestCallSend_ForkNode);
			Model_TestCallSend_Start(TestCallSender).reset(new StartObjectBehaviorAction());
			this->addToElementRepository("Start(TestCallSender)", Model_TestCallSend_Start(TestCallSender));
				Model_TestCallSend_Start(TestCallSender)_Start(TestCallSender).object.reset(new InputPin());
				this->addToElementRepository("Start(TestCallSender).object", Model_TestCallSend_Start(TestCallSender)_Start(TestCallSender).object);

	// Initialize public members
	/*
	 * Model Model
	 */
	Model->setThisPackagePtr(Model);
	Model->setName("Model");
	Model->setVisibility(VisibilityKind::public_);
}
